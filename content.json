{"meta":{"title":"보고 배우는 개발","subtitle":null,"description":null,"author":"Taekyun Kim","url":"https://tuhbm.github.io"},"pages":[{"title":"보고 배우는 개발자 김태균입니다","date":"2018-02-17T10:47:47.000Z","updated":"2018-06-21T14:36:46.449Z","comments":true,"path":"about/index.html","permalink":"https://tuhbm.github.io/about/index.html","excerpt":"","text":"블로그의 시작이 블로그는 제가 공부하고 익인 내용을 정리하기 위해 시작하였습니다.비전공자로 시작한 개발….어려운만큼 저와 같은 분이 많을 것이라 생각이 됩니다.블로그를 통해 지속적으로 공부하는 내용을 정리해서보다 쉽게 포스팅하여 정보공유의 노력도 함께 하겠습니다. 주요 내용 HTML CSS JavaScript Column Java 기타언어들.. 등등…"}],"posts":[{"title":"자료정렬","slug":"arrayAlign","date":"2018-09-03T13:18:58.241Z","updated":"2018-09-03T13:18:58.241Z","comments":true,"path":"2018/09/03/arrayAlign/","link":"","permalink":"https://tuhbm.github.io/2018/09/03/arrayAlign/","excerpt":"","text":"용어정리이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. 정렬지난시간에 알고리즘에 대해 알아보았습니다.알고리즘을 요약하자면, 어떠한 명령어들을 처리하는 과정이라고 하였습니다. 이러한 과정을 함에 있어서 효율적이고 좋은 성능을 통해 개발을 하는 것이 좋은 알고리즘이라고 했었습니다. 지난번 전화번호부를 다시 예로 들어 보겠습니다.전화번호부책에서 어떠한 부분을 찾는데,ㄱ~ㅎ까지 A~B까지 1~0까지 순서대로 차례로 탐색 또는 검색 방법을 순차적검색 또는 선형탐색이라고합니다. 하지만ㄱ~ㅎ까지 A~B까지 1~0까지 순서가 없이 마구잡이로 섞여있다고 가정을 해봅니다.Q, I, O, P, D, J, A, M, N, S, W, E, Z, X, B, L, H, F, U, T, Y, R이렇게 정렬되어있지 않은 부분에서 무언가 찾으려면, 시간이 걸립니다.또한 더 복잡한 데이터안에서 무언가 찾기란 쉽지 않습니다. 그렇기때문에 전화번호부는 A~Z까지 ㄱ~ㅎ까지 정렬이 되어있는 것을 볼 수 있습니다. ‘데이터는 원하는 형태로 정렬될 때 비로소 의미 있는 정보가 된다.’라는 말이 있습니다.많은 정보를 가지고 있음에도 활용을 하려면 정렬되어 있는 상태로 있어야 그 정보를 활용할 수 있다는 말입니다. 그렇기에 데이터를 활용할때 정렬하는 방법 중 몇가지에 대해 말해보겠습니다. 버블정렬버블 정렬은 두 개의 인접한 자료 값을 비교하면서 위치를 교환하는 방식으로 정렬하는 방법을 말합니다.단 두 개의 요소만 정렬해주는 좁은 범위의 정렬에 집중합니다.두 개의 인접한 수를 비교하고 만약 순서에 맞지 않는다면 교환해주는 방식으로 작동합니다.큰값이 점점 끝쪽으로 거품처럼 밀려나간다고 생각하시면, 이해가 빠를것 같습니다. 예를 들어보겠습니다.5, 1, 6, 2, 4, 3의 리스트를 정렬해보겠습니다.5, 1, 6, 2, 4, 3 첫번째로 5와 1을 비교해 순서를 정렬합니다.1, 5, 6, 2, 4, 3 첫번째 정렬이 이루어졌습니다. 다음은1, 5, 6, 2, 4, 3 5와 6을 비교합니다.1, 5, 6, 2, 4, 3 비교를 해도 5 &lt; 6 이기때문에 그대로 둡니다.다음으로1, 5, 6, 2, 4, 3를 비교합니다.이러한순서로 정렬이되면,1, 5, 2, 4, 3, 6 이됩니다.그러면 다시1, 5, 2, 4, 3, 6을 비교하고1, 5, 2, 4, 3, 6을 비교하여1, 5, 2, 4, 3, 6이런식으로 계속 비교를 하여, 결국1, 2, 3, 4, 5, 6 으로 최종 정렬이됩니다. 이 접근법은 간단하지만 단 하나의 요소를 정렬하기 위해 너무 많이 교환하는 낭비가 발생할 수도 있습니다.n개의 요소를 정렬해 주기 위해서는 n-1번 실행해주어야 합니다.최악의 상황인 경우 최대한의 횟수를 실행해줘야 하므로 경제적이지 않습니다. 선택정렬선택정렬은 배열 안의 자료 중 가장 작은 수(혹은 가장 큰 수)를 찾아첫 번째 위치(혹은 가장 마지막 위치)의 수와 교환해주는 방식의 정렬입니다. 예를 들어보겠습니다.5, 1, 6, 2, 4, 3의 리스트를 정렬해보겠습니다. 5, 1, 6, 2, 4, 3 첫번째로 5와 1을 비교해 순서를 정렬합니다.1, 5, 6, 2, 4, 3 첫번째 정렬이 이루어졌습니다.첫번째까지는 버블정렬과 동일합니다.하지만 선택정렬은 첫 번째 위치(혹은 가장 마지막 위치)의 수가 가장 작은수라는 가정에 의해 이루어집니다. 1, 5, 6, 2, 4, 3을 비교해 5 &lt; 6 이므로 기존을 유지합니다.1, 5, 6, 2, 4, 3을 비교합니다. 2가 가장 작은 수로 둘의 자리를 바꿔줍니다.1, 2, 6, 5, 4, 3가 됩니다. 이렇게 두번째 자리까지 정렬이 완료되었다는 가정하에 다음스텝을 진행합니다.1, 2, 6, 5, 4, *3** 이렇게 세번째 자리의 수와 가장 작은 수를 찾아 자리를 바꾸는 식으로 진행됩니다.이런식으로 최종적으로1, 2, 3, 4, 5, 6으로 정렬됩니다. 선택 정렬은 교환 횟수를 최소화하는 반면 각 자료를 비교하는 횟수는 증가합니다.버블 정렬의 교환 횟수보다는 적습니다.그러나 한 번의 교환이 일어나기 위해서는 정렬되지 않은 수의 모든 비교가 이루어져야 하므로, n²번의 비교가 이루어 집니다.선택 정렬은 최선의 경우에도 최악의 경우에서 수행하는 횟수만큼 비교와 교환을 해주어야 합니다. 삽입정렬삽입정렬은 자료가 정렬된 부분과 정렬되지 않은 부분으로 나누어집니다.정렬되지 않은 부분의 자료가 정렬된 부분의 자리로 삽입되는 형태의 정렬 방법입니다. 예를 들어보겠습니다.5, 1, 6, 2, 4, 3의 리스트를 정렬해보겠습니다.정렬되지 않은 리스트에서 첫번째 가장 작은 수를 찾습니다.편의상 | 를 사용해 정렬된부분과 정렬되지 않은 부분을 구분합니다.5, 1, 6, 2, 4, 3 첫번째 제일 작은 수가 정렬됩니다.1 | 5, 6, 2, 4, 3 정렬되지 않은 부분 중 가장 작은 수를 찾습니다. 1보다 큰수입니다.1 | 5, 6, 2, 4, 3 5보다는 작습니다.1, 2 | 5, 6, 4, 3 정렬이됩니다.1, 2 | 5, 6, 4, 3 다시 가장작은 수를 찾습니다. 정렬된 숫자중 가작 작은수인 1과 비교를 하고 1 &lt; 3이므로 다음으로 넘어갑니다.1, 2 | 5, 6, 4, 3 다음 정렬된 수와 비교를 합니다. 2 &lt; 3이므로1, 2, 3 | 5, 6, 4그다음으로 들어갑니다.이렇게 처음을 제외하고 다음부터는 작은 수를 찾아 정렬된 수와 비교한 후 제자리를 찾아 나머지를 밀어내는 방식으로 정렬됩니다. 삽입 정렬은 특정 실행 단계에서, 어떤 원소가 정렬된 배열 내에 자리를 찾았다고 해서 그것이 최종적인 제자리라는 보장은 없습니다. 다음 단계가 진행되면서 다른 자료에 의해 위치가 바뀔 수 있기 때문입니다. 따라서 삽입 정렬은 자료의 양이 적을 때 성능이 우수하며 자료 대부분이 이미 정렬이 되어있는 경우 효율적입니다. 삽입정렬은 이미 정렬된 자료에 새로운 자료를 삽입해야 하는 경우가 발생하면, 정렬된 자료들이 자리를 이동해야 하므로 안정성이 낮습니다. 합병정렬합병 정렬은 원소가 한 개가 될 때까지 계속해서 반으로 나누다가 다시 합쳐나가며 정렬을 하는 방식입니다.합병정렬의 장점은 가장 빠른 정렬방법입니다.단점은 시간은 가장 빠르게 처리하면서, 메모리를 매우 많이 차지 한다는 점입니다. 바로 예를 들어보겠습니다.5, 1, 6, 2, 4, 3, 8, 7의 리스트를 정렬해보겠습니다.편의상 | 를 통해 구분을 하겠습니다.5, 1, 6, 2, 4, 3, 8, 7 가장 먼저 앞에 두수를 비교해 정렬 후 하나로 합칩니다.1, 5 | 6, 2, 4, 3, 8, 7 비교를 하지 않은 두수를 비교해 역시 정렬 후 하나로 합칩니다.1, 5 | 6, 2 | 4, 3, 8, 7 이런식으로 쭉쭉 진행하여1, 5 | 6, 2 | 4, 3 | 8, 7 이렇게 4개의 리스트로 변경되었습니다.1, 5 | 6, 2 | 4, 3 | 8, 7 이렇게 두개의 정렬된 데이터를 비교해 정렬 후 합칩니다.1, 2, 5, 6 | 4, 3 | 8, 7 이런방식으로 일어나는데 다음으로는1, 2, 5, 6 | 4, 3, 8, 7 이렇게 될 것입니다.1, 2, 5, 6 | 4, 3, 8, 7 다음엔 또 두개의 리스트를 비교하고최종적으로 1, 2, 3, 4, 5, 6, 7, 8 하나의 리스트로 정렬하게됩니다. 이렇게 나누어지고 합쳐지는 중간 단계의 배열을 임시로 저장하고 함수가 종료될 때 까지 기억하고 있어야 하기 때문에,메모리의 필요한 공간이 늘어납니다. 합병 정렬 역시 반을 나눈다는 개념이 사용되기 때문에 시간이 적게 들 것이라고 유추할 수 있습니다.만약 8개의 원소가 있다면 3번 나누어질 것입니다. 따라서 n개의 원소가 있을 때 완전히 다 나누어지기까지 호출되는 함수의 개수는 log n개라는 것을 알 수 있습니다.그리고 합병 정렬은 병합하는 알고리즘을 포함합니다.합쳐지는 과정에서 각 원소들의 크기를 비교하기 때문에 n번의 비교 과정이 있습니다. 즉 한번 나누어질 때마다 n번의 비교 횟수가 추가되는 것입니다. 요즘 같이 성능이 좋은 하드웨어가 많은 경우 합병정렬하는데 무리가 가지 않습니다.하드웨어의 성능을 고려하며, 상황에 적합하다면 합병정렬을 사용하는 방법이 가장 효율적으로 정렬 할 수 있는 방법입니다. 정리이처럼 정렬에는 다양한 방법이 있습니다.버블정렬, 선택정렬, 삽입정렬, 합병정렬 등등…. 다양한방법을 상황에 맞게 올바른 정렬방법을 사용하여,정보들을 원하는 형태로 정렬하여, 정보를 의미있게 사용하여, 효율적으로 정보전달을 해야합니다.","categories":[{"name":"용어정리","slug":"용어정리","permalink":"https://tuhbm.github.io/categories/용어정리/"}],"tags":[{"name":"효율성","slug":"효율성","permalink":"https://tuhbm.github.io/tags/효율성/"},{"name":"algorithm","slug":"algorithm","permalink":"https://tuhbm.github.io/tags/algorithm/"},{"name":"알고리즘","slug":"알고리즘","permalink":"https://tuhbm.github.io/tags/알고리즘/"},{"name":"개발","slug":"개발","permalink":"https://tuhbm.github.io/tags/개발/"}]},{"title":"알고리즘","slug":"algorithm","date":"2018-08-20T13:47:40.000Z","updated":"2018-08-20T14:01:37.861Z","comments":true,"path":"2018/08/20/algorithm/","link":"","permalink":"https://tuhbm.github.io/2018/08/20/algorithm/","excerpt":"용어정리이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. 알고리즘알고리즘이란?명령어들의 순서상 처리과정을 말합니다.예를들어 우리가 학교에 등교할때도 잠에서 깨고, 아침을 먹고, 양치를 하고, 씻고, 교복을 입고, 학교에 도착하기까지의 순서상 처리하는 과정이 있습니다.이들을 순서상 나열해놓은 것을 알고리즘이라고 합니다.","text":"용어정리이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. 알고리즘알고리즘이란?명령어들의 순서상 처리과정을 말합니다.예를들어 우리가 학교에 등교할때도 잠에서 깨고, 아침을 먹고, 양치를 하고, 씻고, 교복을 입고, 학교에 도착하기까지의 순서상 처리하는 과정이 있습니다.이들을 순서상 나열해놓은 것을 알고리즘이라고 합니다. 이러한 과정을 효율적으로 하기위해, 일어나서 씻고, 아침을 먹으면서 교복을 입고 버스를 타고가는것도 알고리즘입니다. 이처럼 최상의 결과를 도출해낼수 있는 알고리즘이 좋은 알고리즘입니다. 컴퓨터를 사용할때도, 입력장치인 마우스와 키보드를 통해 우리가 어떠한 입력을 했을때, 가장 효율적으로 처리하는 것이 가장 좋은 알고리즘이라고 할 수 있습니다. 과거에 우리의 전화번호부는 매우 두껍고 많은 정보를 표현해 두었습니다.많은 사람들의 전화번호를 마구 표현해 놓고, 원하는 정보를 찾기위해 한장한장 넘기는 것도 알고리즘의 과정입니다. 하지만 더 효율적으로 원하는 정보를 보다 빠르고 쉽게 찾기 위해 전화번호부는 ㄱ~ㅎ까지 ㅏ~ㅠ 까지 순서대로 정렬을 해놓았습니다. 그로인해 더 효율적으로 원하는 정보를 찾을수 있었죠.이러한 부분이 바로 효율성과 정확성을 위해 알고리즘을 잘 정의해서 사용하는 좋은 알고리즘이라고 할 수 있습니다. 이처럼 개발을 할 때도 JavaScript부터 Java,C++등등의 개발언어 모두 좋은 알고리즘을 통해 성능과 효율적으로 개발을 했을 때 ‘좋은 알고리즘을 사용해서 좋은 서비스를 개발했다.’라고 말 할 수 있습니다. 아래는 필자가 알고 있는 알고리즘을 공부 할 수 있는 서비스들입니다.독자 여러분들도 이러한 알고리즘을 통해 뛰어 난 개발자가 되었으면 좋겠습니다. 알고리즘 공부 서비스Programmers - ProgrammersBAEKJOON - BAEKJOON","categories":[{"name":"용어정리","slug":"용어정리","permalink":"https://tuhbm.github.io/categories/용어정리/"}],"tags":[{"name":"효율성","slug":"효율성","permalink":"https://tuhbm.github.io/tags/효율성/"},{"name":"algorithm","slug":"algorithm","permalink":"https://tuhbm.github.io/tags/algorithm/"},{"name":"알고리즘","slug":"알고리즘","permalink":"https://tuhbm.github.io/tags/알고리즘/"},{"name":"개발","slug":"개발","permalink":"https://tuhbm.github.io/tags/개발/"}]},{"title":"java 유효범위(scope)","slug":"javaScope","date":"2018-06-24T12:08:55.000Z","updated":"2018-06-24T12:20:02.089Z","comments":true,"path":"2018/06/24/javaScope/","link":"","permalink":"https://tuhbm.github.io/2018/06/24/javaScope/","excerpt":"JAVA이 카테고리는 자바를 공부 하며, 익힌 내용을 기록합니다.책을 보며, 또는 독학을 하므로 잘못된 내용이 있으면 댓글 또는 메일주시면 신속히 오류처리하겠습니다. 유효범위(scope) 이론우리는 보통 여러명의 개발자들과 협업을 하며 개발을 진행합니다.그렇기에 어떠한 것을 명명할때, 같은 이름으로 충돌이 발생 할 수 있습니다.예를들어,12int left;public void left() &#123;&#125;","text":"JAVA이 카테고리는 자바를 공부 하며, 익힌 내용을 기록합니다.책을 보며, 또는 독학을 하므로 잘못된 내용이 있으면 댓글 또는 메일주시면 신속히 오류처리하겠습니다. 유효범위(scope) 이론우리는 보통 여러명의 개발자들과 협업을 하며 개발을 진행합니다.그렇기에 어떠한 것을 명명할때, 같은 이름으로 충돌이 발생 할 수 있습니다.예를들어,12int left;public void left() &#123;&#125; 위의 경우와 같이 left는 왼쪽이라는 뜻으로 사용 할 수도있고, leave의 과거형 left으로 사용될 수 도 있습니다.이와같은 경우는 흔히 매우 빈번히 발생하는 경우 입니다.그렇기에 개발을 함에 있어, 에러등이 발생 할 수 있습니다. 자바역시 자바스크립트와 같이 유효범위(scope)가 존재하므로써 이러한 명명충돌을 방지할 수 있습니다. 번외의 이야기만 사실 명명할때 사람이 보기 좋은 누가봐도 알 수 있을 만한 명명규칙을 고민해봅시다.예를들면, getArticleInfo와 같이 길어도 누가봐도 기사정보를 가져오는 메소드구나! 이러한 느낌이 들도록 명명규칙을 고민해봅시다. 명명규칙에서 길더라도 명확한게 좋습니다. 다만 보통 단어별로 대문자를 사용하는 카멜케이스를 사용합니다.(물론 케밥기법이라던지 다양한 종류가 있지만 필자는 카멜케이스를 선호합니다.)다양한 방법은 위키를 참고하세요. 다시 본론으로 들어가서유효범위에 대해 다시 돌아가 보겠습니다.123456789101112public class DemoScope &#123; static void a () &#123; int i = 0; &#125; public static void main(String[] args) &#123; for(int i = 0; i &lt; 5; i++) &#123; a(); System.out.println(i); &#125; &#125;&#125; 결과를 예상해봅시다. 유효범위(Scope)를 제외하고 생각하면for문이 돌아갈때 메소드 a가 실행되면 i=0 이 되므로 0이 무한으로 찍히는 경우가 발생합니다.바로 무한루프가 발생합니다. 하지만 유효범위(Scope)라는 것이 존재하기에 이 코드는 0,1,2,3,4가 찍히고 종료됩니다.유효범위(Scope)가 존재하기 때문입니다.메소드에서 다른메소드의 지역변수(i)를 호출한다하더라도, 유효 범위의 우선순위는 지역변수 그다음이 멤버변수입니다.또한 메소드에서 다른 메소드의 지역변수의 값은 참조 할 수 없습니다.그렇기에 main메소드의 지역변수 i의 값은 0,1,2,3,4가 찍히게 되는것입니다. 다음예제를 보겠습니다.123456789101112public class DemoScope &#123; static int i; static void a() &#123; i = 0; &#125; public static void main(String[] args) &#123; for(i = 0; i &lt; 5; i++) &#123; a(); System.out.println(i); &#125; &#125;&#125; 이전 코드와 다른점은 메소드a의 i와 for문에 i가 모두 멤버변수의 값을 참조하고있습니다.이코드를 실행시키면 어떻게 될까요?0000000000000000000000이 무한하게 찍히는 무한루프에 빠집니다. 위에서 말씀드렸다시피 메소드에서 유효범위(Scope)의 우선순위는 지역변수 다음 멤버변수입니다.하지만 이코드에서는 for문에서 i를 증가되어도 System.out.println(i)가 실행전 메소드a가 먼저 실행되기 때문에 i의 값은 계속 0이 되므로 무한루프에 빠지게 되는 것입니다. 무한루프를 빠져나오기 위해선 메소드 a의 i의 값을 지역변수로 선언해주면 말끔히 해결됩니다.123static void a() &#123; int i = 0;&#125; 이렇게 고쳐주면 메소드 a의 i의 값은 지역변수가 되므로 멤버변수의 i의 값에는 영향을 미치지 못합니다.또한 main메소드에서는 i의 값을 멤버변수의 i의 값을 사용하는것입니다. 그렇다면 지역변수가 존재하는 메소드에서는 멤버변수에 접근을 못하는것인가?라는 의문을 가질 수 있습니다.예제를 들어보겠습니다. 1234567891011121314151617class Demo &#123; int v = 10; void m() &#123; int v = 20; System.out.println(v); &#125;&#125;public class DemoScope2 &#123; public static void main(String[] args) &#123; Demo c1 = new Demo(); c1.m(); &#125;&#125; 결과를 예측해보세요. 결과는 20이 출력됩니다.그렇다면 우리가 원하는 멤버변수의 값인 10이 나오게하려면 어떻게 해야할까요?이럴때 사용하는 키워드가 바로 this입니다.1234void m() &#123; int v = 20; System.out.println(this.v);&#125; 이렇게 this를 사용하면 결과 값은 10이 나옵니다.this는 현재 실행된 메소드의 부모를 나타내므로 클래스Demo를 가르키게 됩니다. 이상으로 유효범위에 대해 알아보았습니다.","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://tuhbm.github.io/categories/JAVA/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tuhbm.github.io/tags/java/"},{"name":"oop","slug":"oop","permalink":"https://tuhbm.github.io/tags/oop/"},{"name":"객체지향","slug":"객체지향","permalink":"https://tuhbm.github.io/tags/객체지향/"},{"name":"메소드","slug":"메소드","permalink":"https://tuhbm.github.io/tags/메소드/"},{"name":"클래스","slug":"클래스","permalink":"https://tuhbm.github.io/tags/클래스/"},{"name":"멤버변수","slug":"멤버변수","permalink":"https://tuhbm.github.io/tags/멤버변수/"},{"name":"scope","slug":"scope","permalink":"https://tuhbm.github.io/tags/scope/"},{"name":"유효범위","slug":"유효범위","permalink":"https://tuhbm.github.io/tags/유효범위/"},{"name":"스코프","slug":"스코프","permalink":"https://tuhbm.github.io/tags/스코프/"},{"name":"this","slug":"this","permalink":"https://tuhbm.github.io/tags/this/"}]},{"title":"객체지향 언어 자바 이론","slug":"javaObjectOriented","date":"2018-06-21T13:33:33.000Z","updated":"2018-06-21T13:53:26.702Z","comments":true,"path":"2018/06/21/javaObjectOriented/","link":"","permalink":"https://tuhbm.github.io/2018/06/21/javaObjectOriented/","excerpt":"JAVA이 카테고리는 자바를 공부 하며, 익힌 내용을 기록합니다.책을 보며, 또는 독학을 하므로 잘못된 내용이 있으면 댓글 또는 메일주시면 신속히 오류처리하겠습니다. 객체지향 이론하나의 결과물을 만들때, 필요한부분을 각각 개발하여, 하나로 사용하고, 또 필요한부분을 가져가 쓰는 방법이 객체지향프로그래밍입니다. 예를 들어보겠습니다.초창기 컴퓨터는 하나의 기계였습니다..그림으로 살펴보겠습니다..","text":"JAVA이 카테고리는 자바를 공부 하며, 익힌 내용을 기록합니다.책을 보며, 또는 독학을 하므로 잘못된 내용이 있으면 댓글 또는 메일주시면 신속히 오류처리하겠습니다. 객체지향 이론하나의 결과물을 만들때, 필요한부분을 각각 개발하여, 하나로 사용하고, 또 필요한부분을 가져가 쓰는 방법이 객체지향프로그래밍입니다. 예를 들어보겠습니다.초창기 컴퓨터는 하나의 기계였습니다..그림으로 살펴보겠습니다.. 이처럼 각 모니터(출력장치)와 본체(저장 및 연산장치) 키보드(입력장치)가 모두 하나로 연결되어있습니다.그렇기에 각각 하나의 부분이 고장난다고하면, 전체 수리를 맡기거나 교체를 해야 합니다. 그렇기에 현대의 컴퓨터는 각각 필요한 부분을 부품화하여, 조합하여 사용하는 방법으로 사용하고 있습니다.이러한 방식으로 부품화하여, 필요에 의해 부품을 가져다 쓰는방법입니다.예를 들면 필요에 의해 모니터를 두개사용하는 듀얼모니터 등을 예로 들 수 있습니다. 앞서 컴퓨터를 예로 들어본것처럼저장매체(아는것) + 출력&amp;입력등(하는것)을 하나로 묶은 객체를 부품화하여,각각 조합하여 사용하는 방법을 객체지향프로그래밍이라고 이해하면 될 것 같습니다. 클래스멤버변수(아는것)와 메소드(하는것)를 둘중 하나를 꼭 포함한 하나의 부품 멤버변수(아는것) 변수로 상태(아는것) 또는 값을 저장 메소드 기능부분(하는일) 공통부분을 하나의 기능별로 정리 은닉화,캡슐화부품을 사용할때, 단순 그룹핑하여 객체화 하였다고, 끝이 아닙니다.정작 사용하는데 있어서, 전문지식이 없이도 어떠한 정보만으로 만들 수 있도록 해야합니다.어떻게 동작하는지 정확히 알지못하는 사람도 사용할 수 있도록 만들어야 합니다.예를 들면 모니터가 어떻게 작동하는지에 대한 원리는 우리는 알지 못합니다.하지만 HDMI케이블 또는 DVI케이블을 사용하여, 본체와 연결하면 제대로 작동시킬 줄 아는것처럼동작 방법을 클래스 안에 숨기고, 사용방법만을 노출하는 방식을 은닉화, 캡슐화라고 합니다. 인터페이스부품과 부품사이 연결을 통하여, 부품끼리의 정보교환을 통해 연산 또는 출력 등의 작업이 이루어집니다.예를 들면, 본체와 모니터를 연결하는 HDMI의 연결선은 규격화 되어있어, 어떠한 모니터를 변경하여도 정상적으로 연결이 가능합니다. 이러한 규격화되어있는 HDMI와 같은 연결선을 인터페이스라고 합니다.부품끼리 서로 규격에 맞지 않는 부분이 있는데 연결하려 하면, 연결이 안됩니다.사전에 맞지 않는 부분을 차단하는 역할을 한다고 할 수 있습니다.","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://tuhbm.github.io/categories/JAVA/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tuhbm.github.io/tags/java/"},{"name":"oop","slug":"oop","permalink":"https://tuhbm.github.io/tags/oop/"},{"name":"객체지향","slug":"객체지향","permalink":"https://tuhbm.github.io/tags/객체지향/"},{"name":"메소드","slug":"메소드","permalink":"https://tuhbm.github.io/tags/메소드/"},{"name":"클래스","slug":"클래스","permalink":"https://tuhbm.github.io/tags/클래스/"},{"name":"멤버변수","slug":"멤버변수","permalink":"https://tuhbm.github.io/tags/멤버변수/"},{"name":"은닉화","slug":"은닉화","permalink":"https://tuhbm.github.io/tags/은닉화/"},{"name":"캡슐화","slug":"캡슐화","permalink":"https://tuhbm.github.io/tags/캡슐화/"},{"name":"인터페이스","slug":"인터페이스","permalink":"https://tuhbm.github.io/tags/인터페이스/"}]},{"title":"Java Data Type","slug":"javaDataType","date":"2018-06-14T12:27:36.000Z","updated":"2018-06-21T14:01:13.528Z","comments":true,"path":"2018/06/14/javaDataType/","link":"","permalink":"https://tuhbm.github.io/2018/06/14/javaDataType/","excerpt":"JAVA이 카테고리는 자바를 공부 하며, 익힌 내용을 기록합니다.책을 보며, 또는 독학을 하므로 잘못된 내용이 있으면 댓글 또는 메일주시면 신속히 오류처리하겠습니다. 데이터 타입프로그래밍에서 데이터는 데이터형식, 메모리의 소비크기, 표현가능범위에 따라 알맞게 사용해야합니다.그 내용은 데이터의 형식을 알아보면서 알아보겠습니다.","text":"JAVA이 카테고리는 자바를 공부 하며, 익힌 내용을 기록합니다.책을 보며, 또는 독학을 하므로 잘못된 내용이 있으면 댓글 또는 메일주시면 신속히 오류처리하겠습니다. 데이터 타입프로그래밍에서 데이터는 데이터형식, 메모리의 소비크기, 표현가능범위에 따라 알맞게 사용해야합니다.그 내용은 데이터의 형식을 알아보면서 알아보겠습니다. 숫자정수형 데이터 타입 메모리의 크기 표현 가능 범위 byte 1 byte -128 ~ 127 short 2 byte -32,768 ~ 32,767 int 4 byte -2,147,483,648~2,147,483,647 long 8 byte -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807 실수형 데이터 타입 메모리의 크기 표현 가능 범위 float 4byte ±(1.40129846432481707e-45 ~ 3.40282346638528860e+38) double 8byte ±(4.94065645841246544e-324d ~ 1.79769313486231570e+308d) 여기서 문제를 내보겠습니다.12long a = 123123123;long b = 123; 이 변수의 메모리의 크기는 같을까요? 다를까요? 정답은 같습니다. 하지만 a에는 123132123이라는 큰 숫자가 들어갔지만,b에는 123이라는 작은 숫자가 들어갔습니다. 그럼에도 불구하고 메모리의 크기는 같습니다.컴퓨터 프로그래밍은 결국 메모리를 어떻게 사용하느냐에 따라 성능의 차이가 나타납니다.위의 b와같은 경우처럼 작은 숫자를 이용할때는 byte를 사용해야 하는것처럼 알맞은 데이터형태를 선언하므로써 메모리의 용량을 아낄수 있습니다.추가적으로 오늘날 하드웨어의 발달로 인해 메모리의 용량이 많이 향상되어, 정수를 사용할때는 충분히 편하게 큰 수를 표현 할 수 있는 데이터 타입인 int를 주로 사용합니다. 명시적 데이터타입명시적으로 데이터 형태를 표기해줘야 하는 데이터타입 형태가 있다.1int a = 2.2; 에러가 납니다. 2.2는 실수형 타입입니다. 그렇다면 실수형 타입인 float으로 변경해보겠습니다.1float a = 2.2; 에러가 납니다.그렇다면 double형태를 사용해보겠습니다.1double a = 2.2; 에러가 나지않습니다.이는 2.2는 double형태의 데이터값이라는 것입니다.‘float의 데이터형태는 언제 사용하지…?’라는 의문이 듭니다.float의 데이터 타입은 명시적으로 값에 float의 형태의 값이라는 F을 지정해줘야합니다.1float a = 2.2F; 이렇게 하니 에러가 안나는 것을 확인 할 수 있습니다.1int a = 2147483648; int는 2,147,483,647까지 밖에 표현을 못합니다.그러면 큰값을 표기할 수 있는 long의 데이터 형태를 사용해보겠습니다.1long a = 2147483648; 에러가 납니다. 이부분 역시 float의 형태와 같이 명시적으로 값을 지정해주겠습니다.1long a = 2147483648L; 이렇게 명시적으로 값을 long의 데이터 타입 L을 지정해주니 에러가 발생하지 않습니다. byte나 short의 데이터의 형태같은경우 자바에서 자체적으로 편하게 사용하기위해 int의 데이터값을 허용하고 있습니다. 단 허용범위내에 표시 할 수 있는 경우에 한에서만 가능합니다. 이부분은 생활코딩 강좌를 참고하였습니다. 문자 데이터 타입 메모리의 크기 표현 가능 범위 char 2byte 모든 유니코드 문자 자바에서는 문자와 문자열이 다릅니다.문자(character)는 글자 하나를 의미하고, 문자열은 글자들의 집합을 의미합니다. 문자열 데이터 타입 메모리의 크기 표현 가능 범위 String 글자당 2byte 모든 유니코드 문자 자동 형 변환서로 다른 데이터 타입의 형태의 숫자가 있다고 이를 더해야 한다고 생각을 해봅시다.예를들면 int와 byte값이 있다면 이는 데이터형태가 다르므로 더하기가 안되야합니다.1234int a = 20;byte b = 10;int p = a+b;System.out.println(p); //30 실행이 되는 것을 볼 수 있습니다. ‘자바는 형태에 따른 오류를 방지하기 위한 엄격한 언어인데..’라는 생각이 들겠지만,자바도 유연함을 갖추고 있습니다.바로 표현 할 수 있는 메모리의 크기별로 데이터의 손실이 발생하지 않으므로,자동으로 형변환을 합니다. 또한 실수는 정수를 포함하지만, 정수는 실수를 포함 할 수 없습니다.이처럼 데이터 형태에 따라 자동으로 형변환이 가능한부분을 표기해보면byte =&gt; short, char =&gt; int =&gt; long =&gt; float =&gt; double순서로 자동으로 형변환이 됩니다. 명시적 형 변환자동으로 형변환이 되지 않는 부분들은 직접 명시적 형 변환을 해야 합니다.1int a = 100.0F; 이러한 변수타입은 에러가 발생합니다.데이터형태는 int형태이나 값은 float의 형태이기 때문입니다.이와같은경우 명시적 형 변환이 필요합니다.1int a = (int) 100.0F; 이렇게 값앞에 (int)을 적어주므로써 값을 명시적으로 int의 데이터형태로 변화하였습니다. 다른 예를 들어보겠습니다.1int b = 100.1F; 변환해보겠습니다.1int b = (int) 100.1F; 결과는 100이 출력됩니다.int의 형태로 변경하기위해 소수점이하를 버림으로 처리하기 때문입니다.이와 같은경우 기존에 갖고 있던 데이터의 손실이 발생합니다. 데이터의 손실이 발생하지않도록 곱하기를 하거나 더하기와 같이 추가적인 계산을 통해 데이터 손실이 발생하지 않도록 해야 합니다. 이번 포스팅을 통해 데이터의 타입과 형변환에 대해 알아보았습니다.다음시간엔 비교연산자와 배열에 대해 알아보도록하겠습니다.","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://tuhbm.github.io/categories/JAVA/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tuhbm.github.io/tags/java/"},{"name":"oop","slug":"oop","permalink":"https://tuhbm.github.io/tags/oop/"},{"name":"객체지향","slug":"객체지향","permalink":"https://tuhbm.github.io/tags/객체지향/"},{"name":"데이터타입","slug":"데이터타입","permalink":"https://tuhbm.github.io/tags/데이터타입/"},{"name":"byte","slug":"byte","permalink":"https://tuhbm.github.io/tags/byte/"},{"name":"숫자","slug":"숫자","permalink":"https://tuhbm.github.io/tags/숫자/"},{"name":"정수","slug":"정수","permalink":"https://tuhbm.github.io/tags/정수/"},{"name":"실수","slug":"실수","permalink":"https://tuhbm.github.io/tags/실수/"},{"name":"문자","slug":"문자","permalink":"https://tuhbm.github.io/tags/문자/"},{"name":"문자열","slug":"문자열","permalink":"https://tuhbm.github.io/tags/문자열/"},{"name":"long","slug":"long","permalink":"https://tuhbm.github.io/tags/long/"},{"name":"float","slug":"float","permalink":"https://tuhbm.github.io/tags/float/"},{"name":"암시적형변화","slug":"암시적형변화","permalink":"https://tuhbm.github.io/tags/암시적형변화/"},{"name":"명시적형변화","slug":"명시적형변화","permalink":"https://tuhbm.github.io/tags/명시적형변화/"}]},{"title":"Java 숫자와 문자","slug":"javaNumberText","date":"2018-06-13T11:29:10.000Z","updated":"2018-06-21T13:53:52.644Z","comments":true,"path":"2018/06/13/javaNumberText/","link":"","permalink":"https://tuhbm.github.io/2018/06/13/javaNumberText/","excerpt":"JAVA이 카테고리는 자바를 공부 하며, 익힌 내용을 기록합니다.책을 보며, 또는 독학을 하므로 잘못된 내용이 있으면 댓글 또는 메일주시면 신속히 오류처리하겠습니다. 자바(JAVA) 숫자와 문자 System.out숫자와 문자를 접하기전에 우리는 결과물을 확인 할 방법을 먼저 알아보겠습니다.자바는 웹브라우저가 아닌 JVM을 이용해 실행합니다. CMD나 터미널등을 통해서도 코드작성이 가능하지만, IDE(Integrated development environment)를 통해 편하게 개발을 할 수 있습니다.IDE에는 여러가지가 있겠지만, 저는 jetbrain사의 intellij를 사용하고 있습니다.개발시 각자 본인에 맞는 IDE를 찾아보시길 권장합니다.IDE에서는 Run기능을 통해 실행하여 작성한 코드의 컴파일 결과를 확인 할 수 있습니다.","text":"JAVA이 카테고리는 자바를 공부 하며, 익힌 내용을 기록합니다.책을 보며, 또는 독학을 하므로 잘못된 내용이 있으면 댓글 또는 메일주시면 신속히 오류처리하겠습니다. 자바(JAVA) 숫자와 문자 System.out숫자와 문자를 접하기전에 우리는 결과물을 확인 할 방법을 먼저 알아보겠습니다.자바는 웹브라우저가 아닌 JVM을 이용해 실행합니다. CMD나 터미널등을 통해서도 코드작성이 가능하지만, IDE(Integrated development environment)를 통해 편하게 개발을 할 수 있습니다.IDE에는 여러가지가 있겠지만, 저는 jetbrain사의 intellij를 사용하고 있습니다.개발시 각자 본인에 맞는 IDE를 찾아보시길 권장합니다.IDE에서는 Run기능을 통해 실행하여 작성한 코드의 컴파일 결과를 확인 할 수 있습니다.자바스크립트에서 console의 역할을 하는 부분을 자바에서는 **System.out 프로퍼티**를 통해 실행 결과 확인할 수 있습니다. System.out.println - 입력시 한줄씩 자동 줄바뀜123System.out.println(&quot;테스트1&quot;);System.out.println(&quot;테스트2&quot;);System.out.println(&quot;테스트3&quot;); 결과물123테스트1테스트2테스트3 System.out.print - 입력시 이어서 출력123System.out.print(&quot;테스트1&quot;);System.out.print(&quot;테스트2&quot;);System.out.print(&quot;테스트3&quot;); 결과물1테스트1테스트2테스트3 위에 내용을 살펴보면1System.out.print(&quot;테스트1&quot;); 이처럼 &quot;&quot;큰따옴표를 사용한 것을 볼 수 있습니다. 기존 자바스크립트에서는 &#39;&#39; 또는 &quot;&quot;를 이용해 문자열을 입력하였습니다.자바에서도 마찬가지로 ‘’ 또는 &quot;&quot;를 이용 할 수 있습니다.하지만 차이가 있습니다.1System.out.println(&quot;테스트&quot;); 를 입력시 정상적으로 실행이 됩니다. 하지만1System.out.println(&apos;테스트&apos;); 여러글자를 입력시 오류가 발생합니다.1System.out.println(&apos;테&apos;); 이처럼 한글자의 문자를 넣을때는 작은따옴표가 허용이되지만, 문자열(문자조합)을 입력시는 큰따옴표를 사용해야합니다. 문자열 입력시 큰따옴표를 사용해야합니다 변수기존 자바스크립트는 데이터의 형식을 정하지 않고, 자유로운 형식의 데이터를 변수에 담을 수 있었습니다.이부분은 ‘자유롭다. 유연하다.’라는 장점과 ‘그로 인해 오류가 발생하기 쉽다.’단점을 갖고 있습니다. 하지만 자바는 이러한 데이터형식을 변수를 선언할때 정의해야합니다.데이터 형식을 정의하지 않은 변수를 작성시 컴파일이 되지 않는 엄격한 언어입니다. 자바스크립트와 비교해보도록 하겠습니다.123var a = 0;let b = 1;const pi = 3.14; 선언시 데이터의 형태를 구분하는 부분이 없습니다.그렇기에 코드를 작성할때 방어패턴등을 사용하여, 올바른 데이터형태가 들어왔는지 확인하는 등의 방법으로 오류를 방지하였습니다. 다음으로 자바입니다.1234int a = 0;double pi = 3.14;String b = &quot;문자&quot;;byte c = 1; 등 선언시 int, double, String, byte등의 데이터 형식을 미리 정의 한 후 변수이름을 선언합니다.데이터 형태는 다음 시간에 포스팅하도록 하겠습니다. 세미콜론세미콜론(;)은 코드를 작성시 끝을 의미한다.과거 자바스크립트에서는 세미콜론을 사용해도 되고, 사용하지 않아도 됩니다.세미콜론을 사용하므로써, 좀 더 명확히 문장의 끝을 나타내 사람도 보기 편하고 오류도 줄이는 결과를 가져올 수 있지만,한편으로는 세미콜론도 하나의 문자로 문서의 크기를 늘린다고 보는 개발자들도 존재한다.그렇기에 외국의 동영상강의를 보았을때 세미콜론을 사용하지 않는 개발자들도 많이 보았습니다. 하지만 자바에서는 세미콜론을 사용하지 않으면 컴파일이 되지 않아 에러가 발생하므로,자바에서는 세미콜론을 강제한다.라고 기억해 두시기 바랍니다.","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://tuhbm.github.io/categories/JAVA/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tuhbm.github.io/tags/java/"},{"name":"oop","slug":"oop","permalink":"https://tuhbm.github.io/tags/oop/"},{"name":"객체지향","slug":"객체지향","permalink":"https://tuhbm.github.io/tags/객체지향/"},{"name":"문자열","slug":"문자열","permalink":"https://tuhbm.github.io/tags/문자열/"},{"name":"System.out","slug":"System-out","permalink":"https://tuhbm.github.io/tags/System-out/"},{"name":"console","slug":"console","permalink":"https://tuhbm.github.io/tags/console/"},{"name":"세미콜론","slug":"세미콜론","permalink":"https://tuhbm.github.io/tags/세미콜론/"},{"name":"큰따옴표","slug":"큰따옴표","permalink":"https://tuhbm.github.io/tags/큰따옴표/"},{"name":"작은따옴표","slug":"작은따옴표","permalink":"https://tuhbm.github.io/tags/작은따옴표/"}]},{"title":"Java 시작","slug":"startJava","date":"2018-06-11T13:07:25.000Z","updated":"2018-06-14T12:30:30.710Z","comments":true,"path":"2018/06/11/startJava/","link":"","permalink":"https://tuhbm.github.io/2018/06/11/startJava/","excerpt":"JAVA이 카테고리는 자바를 공부 하며, 익힌 내용을 기록합니다.책을 보며, 또는 독학을 하므로 잘못된 내용이 있으면 댓글 또는 메일주시면 신속히 오류처리하겠습니다. 자바(JAVA) 시작하기 자바를 시작하게된 계기프론트 엔드 개발자로써 예전부터 패러다임이었던 OOP(Object-Oriented Programming) 즉 객체지향프로그래밍은 모든 개발자에게 접할 수 밖에 없는 숙제 일것이다.개발을 시작한지 얼마 되지 않은 필자는 지금까지 해왔던 절차지향프로그래밍을 떠나 객체지향프로그래밍을 접하기 위해, 공부를 하던 중 객체지향프로그래밍의 본좌인 JAVA를 공부하고 싶은 호기심이 생겼다.최근 개발 패러다임이라면 함수형 프로그래밍도 있겠지만, 좀 더 아직까진 대중적인 패러다임인 객체지향 프로그래밍을 시작하기로 했다.","text":"JAVA이 카테고리는 자바를 공부 하며, 익힌 내용을 기록합니다.책을 보며, 또는 독학을 하므로 잘못된 내용이 있으면 댓글 또는 메일주시면 신속히 오류처리하겠습니다. 자바(JAVA) 시작하기 자바를 시작하게된 계기프론트 엔드 개발자로써 예전부터 패러다임이었던 OOP(Object-Oriented Programming) 즉 객체지향프로그래밍은 모든 개발자에게 접할 수 밖에 없는 숙제 일것이다.개발을 시작한지 얼마 되지 않은 필자는 지금까지 해왔던 절차지향프로그래밍을 떠나 객체지향프로그래밍을 접하기 위해, 공부를 하던 중 객체지향프로그래밍의 본좌인 JAVA를 공부하고 싶은 호기심이 생겼다.최근 개발 패러다임이라면 함수형 프로그래밍도 있겠지만, 좀 더 아직까진 대중적인 패러다임인 객체지향 프로그래밍을 시작하기로 했다. 자바 설치하기자바는 자바스크립트와 마찬가지로 작성한 코드를 컴파일러를 통해 컴파일된 결과물을 JVM(Java Virtual Machine)을 통해 실행하여야 합니다.JVM에 대한 설명은 위키 링크를 통해 확인해보세요.자바는 과거 1.02버전부터 현 11버전까지 지속적으로 시행착오를 통해 성장해 왔습니다.자바는 1.1에서 1.2로 업데이트 되었을때, 마케팅팀에서 아예 이름을 새로 정해야겠다는 생각에 “자바 2”라고 지었다고 합니다.1.3버전과 1.4버전에서는 미비한 업데이트로 인해 계속 “자바 2”라는 명칭을 사용하다가대대전인 변화인 1.5 버전부터는 “자바 5”라고 이름을 변경하며, 현재 11버전까지 지속적으로 발전하고 있습니다. 자바로 개발을 하기위해서는 JDK(Java Development Kit)으로 설치하도록 합니다.자바는 원래 썬 마이크로시스템즈에서 만들고 배포했지만 오라클이 썬을 인수하면서부터 라이센스가 좀 복잡하게 변경 되었다고 합니다.하지만 공부를 위해 필요한 JDK는 온라인에서 무료로 다운로드 받고 설치할 수 있습니다.오라클 JDK공식홈페이지를 통해 다운을 받고 나면 일반적인 프로그램처럼 설치를 합니다. 윈도우와 Mac OS X는 설치방법이 다릅니다.윈도우는 설치를 직접해야 하는데, Mac OS X는 기존 설치로 별도의 설치가 필요 없습니다. 다음 포스팅부터는 자바의 기초 문법을, 공부하여 포스팅하겠습니다. Hello JAVA!!Hello OOP!!","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://tuhbm.github.io/categories/JAVA/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tuhbm.github.io/tags/java/"},{"name":"oop","slug":"oop","permalink":"https://tuhbm.github.io/tags/oop/"},{"name":"객체지향","slug":"객체지향","permalink":"https://tuhbm.github.io/tags/객체지향/"}]},{"title":"이것이 자바다","slug":"javaBook","date":"2018-04-12T12:51:20.000Z","updated":"2018-04-12T13:50:10.193Z","comments":true,"path":"2018/04/12/javaBook/","link":"","permalink":"https://tuhbm.github.io/2018/04/12/javaBook/","excerpt":"이 카테고리는 책을 읽고, 느낀점에 대해 리뷰를 남기는 카테고리입니다. 이것이 자바다 한줄평 리뷰어마어마한 두께만큼 배울때 보면 좋은도서다.","text":"이 카테고리는 책을 읽고, 느낀점에 대해 리뷰를 남기는 카테고리입니다. 이것이 자바다 한줄평 리뷰어마어마한 두께만큼 배울때 보면 좋은도서다. 책정보 판매처: 한빛출판네트워크저자 : 신용권출간 : 2015-01-06페이지 : 1224 쪽가격 : 정가 30,000원 -&gt; 판매가 27,000원(10% off) 상세정보 네이버 북스 한빛출판네트워크 소개JAVA는 프로그래밍에서 손꼽히는 중요한 언어다. 2015년에 출간하여, 현재까지 동영상강의를 12개월 제공하며 JAVA를 배우는 이들이 쉽게 배울 수 있도록 노력하였다.책의 부피에 처음 압도되고, 내용의 꼼꼼함에서 다시 압도된다.책을 들고다니기 부담스러워 걱정이 되었으나 다행히도 분권이 가능하여 출퇴근길에 보기 편했다. 장점 스케줄표 및 예상시간등 그리고 동영상강의를 12개월 무료로 볼 수 있게 해주어 이해하기 그나마 쉽게 출간하였다. 단점 JAVA라는 전공자들이 학교를 다니면서 배우는 언어로 기초 CS(Computer Science)지식이 요구된다. 후기프론트엔드 개발자로써 JAVA보다 하위 언어인 Javascript를 주로 사용하는 개발자로써, 매우 정적인 언어로 이해하는데 힘들고, 아직도 힘들다.하지만 Javascript의 자유로움을 제한하여 Type을 작성하도록 하는 Typescript를 이해하는데 충분한 도움이 될 수 있다. 이 서평은 한빛비디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.","categories":[{"name":"book","slug":"book","permalink":"https://tuhbm.github.io/categories/book/"}],"tags":[{"name":"programming","slug":"programming","permalink":"https://tuhbm.github.io/tags/programming/"},{"name":"start","slug":"start","permalink":"https://tuhbm.github.io/tags/start/"},{"name":"book-review","slug":"book-review","permalink":"https://tuhbm.github.io/tags/book-review/"},{"name":"북리뷰","slug":"북리뷰","permalink":"https://tuhbm.github.io/tags/북리뷰/"},{"name":"프로그래머","slug":"프로그래머","permalink":"https://tuhbm.github.io/tags/프로그래머/"},{"name":"비전공자","slug":"비전공자","permalink":"https://tuhbm.github.io/tags/비전공자/"},{"name":"java","slug":"java","permalink":"https://tuhbm.github.io/tags/java/"},{"name":"major","slug":"major","permalink":"https://tuhbm.github.io/tags/major/"}]},{"title":"슈퍼클래스 와 서브클래스","slug":"superClassAndSubClass","date":"2018-03-11T04:30:13.000Z","updated":"2018-03-11T05:29:16.152Z","comments":true,"path":"2018/03/11/superClassAndSubClass/","link":"","permalink":"https://tuhbm.github.io/2018/03/11/superClassAndSubClass/","excerpt":"용어정리이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. 슈퍼클래스(superClass)와 서브클래스(subClass)슈퍼클래스와 서브클래스는 상속에서 나오는 개념입니다.원래 상속에 대한 개념은 고급언어 Java의 개념입니다.자바스크립트에서는 상속의 대한 개념이 적용이 되지 않고, 상속 비슷하게 만드는 개념인 prototype이 있습니다.","text":"용어정리이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. 슈퍼클래스(superClass)와 서브클래스(subClass)슈퍼클래스와 서브클래스는 상속에서 나오는 개념입니다.원래 상속에 대한 개념은 고급언어 Java의 개념입니다.자바스크립트에서는 상속의 대한 개념이 적용이 되지 않고, 상속 비슷하게 만드는 개념인 prototype이 있습니다.예를 들어 살펴보겠습니다.예제는 ES6를 바벨을 사용하여 ES5로 변환하여, 상속의 개념을 살펴보겠습니다.123456789101112131415161718class animal &#123; constructor(name)&#123; this.name = name; &#125; move(number)&#123; console.log(`Move Move!!! $&#123;number&#125;M`); &#125;&#125;class dog extends animal &#123;2speak(sound)&#123; console.log(`$&#123;this.name&#125; is speak $&#123;sound&#125;`); &#125;&#125;const Rocky = new dog('Rocky');Rocky.move(5);Rocky.speak('wal wal'); 바벨(babel)을 이용하여 ES6문법을 ES6로 컴파일해보겠습니다.1234567891011121314151617181920212223242526272829303132333435'use strict';var _createClass = function () &#123; function defineProperties(target, props) &#123; for (var i = 0; i &lt; props.length; i++) &#123; var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); &#125; &#125; return function (Constructor, protoProps, staticProps) &#123; if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; &#125;; &#125;();function _possibleConstructorReturn(self, call) &#123; if (!self) &#123; throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); &#125; return call &amp;&amp; (typeof call === \"object\" || typeof call === \"function\") ? call : self; &#125;function _inherits(subClass, superClass) &#123; if (typeof superClass !== \"function\" &amp;&amp; superClass !== null) &#123; throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); &#125; subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, &#123; constructor: &#123; value: subClass, enumerable: false, writable: true, configurable: true &#125; &#125;); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; &#125;function _classCallCheck(instance, Constructor) &#123; if (!(instance instanceof Constructor)) &#123; throw new TypeError(\"Cannot call a class as a function\"); &#125; &#125;var animal = function () &#123; function animal(name) &#123; _classCallCheck(this, animal); this.name = name; &#125; _createClass(animal, [&#123; key: 'move', value: function move(number) &#123; console.log('Move Move!!! ' + number + 'M'); &#125; &#125;]); return animal;&#125;();var dog = function (_animal) &#123; _inherits(dog, _animal); function dog() &#123; _classCallCheck(this, dog); return _possibleConstructorReturn(this, (dog.__proto__ || Object.getPrototypeOf(dog)).apply(this, arguments)); &#125; _createClass(dog, [&#123; key: 'speak', value: function speak(sound) &#123; console.log(this.name + ' is speak ' + sound); &#125; &#125;]); return dog;&#125;(animal);var Rocky = new dog('Rocky');Rocky.move(5);Rocky.speak('wal wal'); 내용이 매우 복잡해 자세히 설명드리기는 어려우겠으나, 처음나오는 4줄을 살펴보면1234var _createClass = function () &#123; function defineProperties(target, props) &#123; for (var i = 0; i &lt; props.length; i++) &#123; var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); &#125; &#125; return function (Constructor, protoProps, staticProps) &#123; if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; &#125;; &#125;();function _possibleConstructorReturn(self, call) &#123; if (!self) &#123; throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); &#125; return call &amp;&amp; (typeof call === \"object\" || typeof call === \"function\") ? call : self; &#125;function _inherits(subClass, superClass) &#123; if (typeof superClass !== \"function\" &amp;&amp; superClass !== null) &#123; throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); &#125; subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, &#123; constructor: &#123; value: subClass, enumerable: false, writable: true, configurable: true &#125; &#125;); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; &#125;function _classCallCheck(instance, Constructor) &#123; if (!(instance instanceof Constructor)) &#123; throw new TypeError(\"Cannot call a class as a function\"); &#125; &#125; ES5의 prototype을 이용한거라는 추측이 가능합니다.이처럼 Javascript에서는 상속의 개념이 없습니다. 그럼 이번 주제인 슈퍼클래스와 서브클래스는 무엇일까요?앞에 나왔던 ES6문법에선 클래스를 사용하였으므로 앞에 예제를 다시 살펴보죠.12345678910class animal &#123; //...&#125;class dog extends animal &#123; //...&#125;const Rocky = new dog('Rocky');//... animal의 클래스를 extends를 이용해 dog에 상속한 것을 볼 수 있습니다. 이번예제에서는animal - 상속을 해준 부모를 슈퍼클래스,부모클래스라 하고dog - 상속을 받은 자식을 서브클래스,자식클래스라고 합니다. 앞으로 천천히 상속에 대해 공부해가며, 상속에 대한 내용르 더 정리하는 시간을 갖도록 하겠습니다.","categories":[{"name":"용어정리","slug":"용어정리","permalink":"https://tuhbm.github.io/categories/용어정리/"}],"tags":[{"name":"클래스","slug":"클래스","permalink":"https://tuhbm.github.io/tags/클래스/"},{"name":"superClass","slug":"superClass","permalink":"https://tuhbm.github.io/tags/superClass/"},{"name":"subClass","slug":"subClass","permalink":"https://tuhbm.github.io/tags/subClass/"},{"name":"inherit","slug":"inherit","permalink":"https://tuhbm.github.io/tags/inherit/"},{"name":"슈퍼클래스","slug":"슈퍼클래스","permalink":"https://tuhbm.github.io/tags/슈퍼클래스/"},{"name":"서브클래스","slug":"서브클래스","permalink":"https://tuhbm.github.io/tags/서브클래스/"},{"name":"상속","slug":"상속","permalink":"https://tuhbm.github.io/tags/상속/"},{"name":"프로토타입","slug":"프로토타입","permalink":"https://tuhbm.github.io/tags/프로토타입/"},{"name":"prototype","slug":"prototype","permalink":"https://tuhbm.github.io/tags/prototype/"},{"name":"객체","slug":"객체","permalink":"https://tuhbm.github.io/tags/객체/"}]},{"title":"let 과 const","slug":"letAndConst","date":"2018-03-05T13:32:46.000Z","updated":"2018-03-11T03:17:50.676Z","comments":true,"path":"2018/03/05/letAndConst/","link":"","permalink":"https://tuhbm.github.io/2018/03/05/letAndConst/","excerpt":"let과 const과거 ES5이하에서는 변수를 선언할때 아래와 같은 방식을 사용하였다.123var a = 1;var b = 2;var c = a + b; 이러한 선언 방식은 javascript에게 유연함을 선물해 준 대신, 타언어를 공부한 많은 개발자들에게 혼란을 초래 했다.2015년 ECMAscript2015 또는 ES6로 자바스크립트가 변화하면서, 많은 혼란을 조금을 달래줄 수 있었다. 오늘은 ES6의 변수 선언방식인 let과 const에 대해 알아보겠다.과거 javascript의 변수를 var로 선언하였을때 함수스코프, 호이스팅 등 많은 자유로움으로 인해 작은 문제가 큰문제로 발생하는 경우가 많았다. ES6의 변수 선언방식인 let과 const는 block-scope로 스코프범위를 일반적인 다른 언어들과 맞추었다.예를 들어보자.","text":"let과 const과거 ES5이하에서는 변수를 선언할때 아래와 같은 방식을 사용하였다.123var a = 1;var b = 2;var c = a + b; 이러한 선언 방식은 javascript에게 유연함을 선물해 준 대신, 타언어를 공부한 많은 개발자들에게 혼란을 초래 했다.2015년 ECMAscript2015 또는 ES6로 자바스크립트가 변화하면서, 많은 혼란을 조금을 달래줄 수 있었다. 오늘은 ES6의 변수 선언방식인 let과 const에 대해 알아보겠다.과거 javascript의 변수를 var로 선언하였을때 함수스코프, 호이스팅 등 많은 자유로움으로 인해 작은 문제가 큰문제로 발생하는 경우가 많았다. ES6의 변수 선언방식인 let과 const는 block-scope로 스코프범위를 일반적인 다른 언어들과 맞추었다.예를 들어보자. 1234567console.log(a); // undefinedvar a = 1;console.log(a);1&#123; var a = 2;&#125;console.log(a); //2 이처럼 var로 선언한 변수는 블록스코프 규칙을 따르지 않는다. let의 경우를 살펴보자.123456789console.log(a); //Uncaught ReferenceError: a is not define. - 선언되지 않은 함수로써 호이스팅이 되지않아 실행조차 되지 않는다.//위에 콘솔이 없다는 가정하에 계속 진행해보겠다.let a = 1;console.log(a); //1&#123; let a = 2; console.log(a); //2&#125;console.log(a); //1 이처럼 { }블록스코프로 인해 블록안에 변수만 2로 재할당 된것을 볼 수 있다. 또한, 중복 선언도 금지되어있다.123456var a = 1;var b = 2; //2let b = 1;let b = 2; //Uncaught SyntaxError: Identifier 'b' has already been declaredb = 2; //2 같은 스코프 내에서 let은 재선언이 불가능하다. let과 const의 차이ES6의 변수인 let과 const의 차이는 바로 할당에 있다.위의 경우에 let은 재선언이 불가능 하였지만, 재할당은 가능함을 볼 수 있었다.하지만 const는 상수로 재할당이 불가능하다. 1234const a; //Uncaught SyntaxError: Missing initializer in const declarationconst a = 1;const a = 2; //Uncaught SyntaxError: Identifier 'a' has already been declareda = 3; //Uncaught TypeError: Assignment to constant variable. 이처럼 상수 const는 할당 그리고 재선언도 불가능하다. 그리고 특이한점은 const를 사용하여 선언시 할당이 불가능하므로, 선언과 동시에 할당을 해야합니다. let과 const의 사용let과 const의 특징에 대해 알아보았다. 그렇다면 언제 사용할까? let은 재할당이 가능하다. 그러므로 원시형자료인 string, number, bloolean, null, undefined에 사용하고,const는 재할당이 불가능하므로, array, Object등 참조형자료인경우 사용한다. 왜냐하면 const는 immutable하지만 프로퍼티의 할당 및 재할당은 가능하다.","categories":[{"name":"Javascript","slug":"Javascript","permalink":"https://tuhbm.github.io/categories/Javascript/"}],"tags":[{"name":"scope","slug":"scope","permalink":"https://tuhbm.github.io/tags/scope/"},{"name":"ES6","slug":"ES6","permalink":"https://tuhbm.github.io/tags/ES6/"},{"name":"var","slug":"var","permalink":"https://tuhbm.github.io/tags/var/"},{"name":"let","slug":"let","permalink":"https://tuhbm.github.io/tags/let/"},{"name":"const","slug":"const","permalink":"https://tuhbm.github.io/tags/const/"}]},{"title":"Reflow와 Repaint","slug":"reflowAndRepaint","date":"2018-02-22T13:56:50.000Z","updated":"2018-03-11T03:23:03.862Z","comments":true,"path":"2018/02/22/reflowAndRepaint/","link":"","permalink":"https://tuhbm.github.io/2018/02/22/reflowAndRepaint/","excerpt":"이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. Reflow와 Repaint지금 이후 편하게 한국어로 리플로우 &amp; 리페인트 로 표현하도록 하겠습니다.","text":"이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. Reflow와 Repaint지금 이후 편하게 한국어로 리플로우 &amp; 리페인트 로 표현하도록 하겠습니다.리플로우와 리페인트 웹을 만드는 개발자로써 많이 들어본 내용일 것이다.이름만 들어로 리(Re)로 시작하는 하는 것이 뭔가 다시한다는 것 같다.위키를 살펴보니 Re- 로 시작하는 단어들은 다시 또는 반복, 되돌리다의 뜻을 더한 접두사로 정리되어 있다.리핏(repeat), 리턴(return), 리액션(reaction)등 우리가 아는 모든 단어가 위키에서 정리한대로 반복 또는 다시등의 뜻을 갖고 있다.이중 우리가 리플로우(reflow) &amp; 리페인트(repaint)에 관심을 갖어야 하는 이유는 우리는 웹개발자이기 때문이다.먼저 플로우와 페인트는 우리가 만든 웹문서를 브라우저에서 렌더링할때 발생한다.렌더링 과정은 이전에 1편과 2편으로 나누어서 포스팅했었다.(모르시는 분들을 위해 친절히 링크를 걸어두었습니다.) 그때의 보았던 그림을 통해 살펴보자그림은 친히 한글로 써있다. 렌더트리가 보이는가?렌더트리의 위쪽 그리고 오른쪽에 각각 배치와 그리기가 있다.저것이 바로 플로우와 페인트이다.이제 리플로우와 리페인트에 대해 알아보자. Reflow리플로우는 플로우가 다시 반복된다는 뜻이다. 위에서 살펴본 그림으로 보면 배치 === 플로우이다.배치라고 해서 위치를 뜻하는 것은 아니다.플로우 과정은 돔트리를 구성한 후에 스타일을 합쳐 렌더트리의 과정에서 크기, 위치등을 담당한다.각각 문서의 위에서 아래로 그리고 왼쪽에서 오른쪽으로 문서를 읽어가면서 필요한 부분에 대해 서버와 통신을 한후에 DOM트리 + 스타일을 합치고,이를 표현하기위한 렌더트리를 구성하는 과정에서 display 그리고 width, height, position 등을 계산하는 과정이다. 리플로우는 이과정을 다시 거치는 것을 말한다.Javascript를 통해 어떠한 이벤트가 발생하였을 경우,예를 들면 팝업노출 또는 슬라이드조작등 Javascript를 통한 UI를 변경 또는 이동하는 과정에서 리플로우가 발생한다. Repaint리페인트 역시 페인트가 다시 일어나는 과정이다. 위그림에서는 그리기 === 페인트이다.페인트는 다시 그린다는 뜻이다.위에 렌더트리과정에서 플로우를 통해 계산한 것을 그리는 과정이 바로 페인트이다.그리는 것은 실제 웹에 보여주는 것을 말한다. 계산된것을 웹브라우저에 ‘표현한다’는 것이 더 좋은 것 같다.색깔, 보더, 형태 등등을 우리가 보는 뷰의 형태로 표현하는것이다. 즉 리페인트는 리플로우로 인해 계산된 것을 다시 그리는 것이다. 우리가 Reflow 와 Repaint에 관심을 갖어야 하는 이유우리 웹개발자의 역량은 과거에는 단순 보여주는 것을 중심으로 두었었다.반면 현대에 들어서 웹개발자의 역량은 성능 최적화된 웹페이지를 만드는 것에 중점을 두고있다.물론 자사서비스가 아니고, 타사의 웹서비스를 만드는 곳은 속도라는 예외가 있긴하다. 하지만 자사의 서비스를 만드는 회사는 성능 최적화에 우선을 둬야한다.예를 들어 쇼핑몰을 렌더링하는데 5초의 시간이 걸린다고 해보자.같은 제품을 여러회사들이 나눠팔고 가격은 같다.여러분들이라면 어느곳을 택하겠는가? 당연히 소비자에게 불편함 없이 빨리 보여지는 페이지에 초점을 둔다.심지어 렌더링 과정에서 Javascript로 인한 기능이 보여지기 이전에 눈속임으로 뷰단을 이미지로 보여주는 회사도 보았었다.이처럼 성능 최적화에 중점을 둬야한다. 그렇기 위해서는 빠른 렌더링을 위해 여러 방법이 있지만, 리플로우와 리페인트를 최대한 줄이는 것이 성능 최적화의 좋은 방법이다.그래서 우리 웹개발자는 리플로우와 리페인트를 줄이는 방법에 대해 공부해야만한다","categories":[{"name":"용어정리","slug":"용어정리","permalink":"https://tuhbm.github.io/categories/용어정리/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://tuhbm.github.io/tags/javascript/"},{"name":"rendering","slug":"rendering","permalink":"https://tuhbm.github.io/tags/rendering/"},{"name":"reflow","slug":"reflow","permalink":"https://tuhbm.github.io/tags/reflow/"},{"name":"repaint","slug":"repaint","permalink":"https://tuhbm.github.io/tags/repaint/"},{"name":"렌더링","slug":"렌더링","permalink":"https://tuhbm.github.io/tags/렌더링/"},{"name":"렌터트리","slug":"렌터트리","permalink":"https://tuhbm.github.io/tags/렌터트리/"},{"name":"리플로우","slug":"리플로우","permalink":"https://tuhbm.github.io/tags/리플로우/"},{"name":"리페인팅","slug":"리페인팅","permalink":"https://tuhbm.github.io/tags/리페인팅/"}]},{"title":"프로그래머 첫걸음","slug":"firstProgramming","date":"2018-02-21T12:51:20.000Z","updated":"2018-03-11T03:40:17.278Z","comments":true,"path":"2018/02/21/firstProgramming/","link":"","permalink":"https://tuhbm.github.io/2018/02/21/firstProgramming/","excerpt":"이 카테고리는 책을 읽고, 느낀점에 대해 리뷰를 남기는 카테고리입니다. 프로그래머 첫걸음 한줄평 리뷰책 제목처럼 비전공자가 처음 프로그래밍을 배울때 보면 좋은도서다.","text":"이 카테고리는 책을 읽고, 느낀점에 대해 리뷰를 남기는 카테고리입니다. 프로그래머 첫걸음 한줄평 리뷰책 제목처럼 비전공자가 처음 프로그래밍을 배울때 보면 좋은도서다. 책정보 판매처: 한빛출판네트워크저자 : 코리 알트호프번역 : 한선용출간 : 2018-01-02페이지 : 404 쪽가격 : 정가 19,800원 -&gt; 판매가 17,8200원(10% off) 상세정보 네이버 북스 한빛출판네트워크 소개보통 많은 책들이 프로그래밍을 처음 시작하는 초심자들에게 쉽게 설명한다고 쓴다. 하지만 정작 읽어보면 그 언어에 대해 쉽게 설명한 책이 대부분이다.하지만 이책은 조금 달랐다. 비록 파이썬을 언어로 사용하여, 설명하긴 하지만 모든 언어에 공통적으로 갖고 있는 개념들에 대해 설명하고, 또한 그것을 실습으로 옮겨낸다.어떤 한 언어에만 초점을 두고 있지 않는 것이 다른 책들과의 차별성이라고 생각된다. 장점 앞서 말한바와 같이 하나의 언어를 설명을 초점으로 하지 않고, 실무에서 접해볼 프로그래밍 언어들의 공통적인 개념들에 대해 보다 쉽게 설명하였다. 마지막엔 프로그래밍에 대한 설명 뿐만아니라, 본인의 경험도 설명하며 좋은 프로그래머가 되기위한 조언들을 저술하였다. 집중력이 떨어질만한 시점에 좋은 내용으로 기억에 남는다. 단점 비전공자들에 초점을 두었기 때문에 전공자들에게는 비적합하다고 생각된다. 모든 개발서적과 마찬가지로 긴 코드를 눈으로 읽기가 힘들었다. E-BOOK이 아니라 출퇴근시간에 읽기 힘들었다. 비전공자의 프로그래밍리뷰를 쓰고 있는 필자는 비전공자이다. 그렇기 때문에 실무에서 들어봤을만 하지만 정확히 알고 있지 못한 개념에 아쉬움을 느꼈었다.물론 책에 있는 내용들은 검색을 해보면 모두 나와있는 내용이다. 하지만 키워드를 통해 이해하고, 어려 프로그래머의 명언들을 각 단에 시작부분에 써 놓으므로써조금 섬뜩할 수 있는 조언들을 통해 재미를 주는 부분도 포함되어 있다.비록 내가 주로 하고있는 언어와는 다르게 파이썬을 통해 프로그래밍에 대한 개념을 설명하였지만, 충분히 이해 할 수 있을정도로 쉽게 저술하였다. 후기모든 개발 서적을 끝까지 읽어본적이 없다. 초반에 집중을 후반으로 갈수록 어려워져 집중력이 떨어지고 버거움을 느꼈다. 하지만 이책은 비전공자들을 대상으로 한만큼 최대한 쉽게 표현하려고 애쓴 저자의 노력이 보이는 책이었다.그리고 후반에 집중력이 떨어질때 쯤 나오는 좋은 프로그래머가 되기 위한 조언을 보고 있자니 마치 책에서 나온 멘토를 하나 두고, 책에서 조언한 내용들을 &#39;꼭 해야겠다&#39; 다짐하였다.조언 또한 어려운것들이 아니고, 쉽게 해낼 수 있는 조언들을 담고 있다. 앞으로의 Hello Coding 시리즈가 기대되는 책이었다. 이 서평은 한빛비디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.","categories":[{"name":"book","slug":"book","permalink":"https://tuhbm.github.io/categories/book/"}],"tags":[{"name":"python","slug":"python","permalink":"https://tuhbm.github.io/tags/python/"},{"name":"programming","slug":"programming","permalink":"https://tuhbm.github.io/tags/programming/"},{"name":"non-major","slug":"non-major","permalink":"https://tuhbm.github.io/tags/non-major/"},{"name":"first-programming","slug":"first-programming","permalink":"https://tuhbm.github.io/tags/first-programming/"},{"name":"start","slug":"start","permalink":"https://tuhbm.github.io/tags/start/"},{"name":"book-review","slug":"book-review","permalink":"https://tuhbm.github.io/tags/book-review/"},{"name":"북리뷰","slug":"북리뷰","permalink":"https://tuhbm.github.io/tags/북리뷰/"},{"name":"프로그래머","slug":"프로그래머","permalink":"https://tuhbm.github.io/tags/프로그래머/"},{"name":"파이썬","slug":"파이썬","permalink":"https://tuhbm.github.io/tags/파이썬/"},{"name":"비전공자","slug":"비전공자","permalink":"https://tuhbm.github.io/tags/비전공자/"}]},{"title":"CSS - Resetting VS Normalize","slug":"cssReset","date":"2018-02-21T12:00:04.000Z","updated":"2018-03-11T03:23:03.885Z","comments":true,"path":"2018/02/21/cssReset/","link":"","permalink":"https://tuhbm.github.io/2018/02/21/cssReset/","excerpt":"Resetting과 Normalize최근 외국의 한 블로거를 통해 작업 전 기본적으로 브라우저별 태그에 대한 기본 스타일링을 제어하는 두가지 방법을 비교한 글을 본적 있다.하지만 국내에서는 대부분 front-end개발의 아버지로 칭하는 Eric Meyer의 Reset.css를 사용하거나,yahoo가 내놓은 Reset.css를 사용 또는 국내 IT대기업인 네이버나 다음의 reset.css를 사용한다.그리고 본인의 입맛에 맞춰 커스터마이징하여 사용한다. 필자는 다음의 reset.css를 커스터마이징해서 사용한다.이처럼 국내에서는 아직 Normalize보다는 Resetting을 하는 추세이다.일단 Resetting은 대충 사용해보았기때문에 알 것 같은데 Normalize는 무엇인가를 정확히 설명 할 수 없을 것이다.그럼 Resetting과 Normalize에 대해 알아보자","text":"Resetting과 Normalize최근 외국의 한 블로거를 통해 작업 전 기본적으로 브라우저별 태그에 대한 기본 스타일링을 제어하는 두가지 방법을 비교한 글을 본적 있다.하지만 국내에서는 대부분 front-end개발의 아버지로 칭하는 Eric Meyer의 Reset.css를 사용하거나,yahoo가 내놓은 Reset.css를 사용 또는 국내 IT대기업인 네이버나 다음의 reset.css를 사용한다.그리고 본인의 입맛에 맞춰 커스터마이징하여 사용한다. 필자는 다음의 reset.css를 커스터마이징해서 사용한다.이처럼 국내에서는 아직 Normalize보다는 Resetting을 하는 추세이다.일단 Resetting은 대충 사용해보았기때문에 알 것 같은데 Normalize는 무엇인가를 정확히 설명 할 수 없을 것이다.그럼 Resetting과 Normalize에 대해 알아보자 Restting우리가 주로 사용하는 Resetting을 알아보자. 위에서 언급한 바와 같이 Reset.css를 사용한다.왜 멀쩡한 브라우저를 reset할까? 초심자들은 의문을 갖을 수 있다. 하지만 상급자 또는 동료가 하기 때문에 자연스럽게 복사 붙여 넣기를 하여 작업을 시작한다.필자는 이런 초심자들이 궁굼해 할만한 내용 찝찝한 등을 긁어주고자 한다. 고수들은 그냥 지나 쳐도 좋다.본론으로 들어가서 왜 reset을 할까? 우리의 주 업무는 성능쪽에도 관심을 둬야하지만, 일단 front 즉 보이는 부분을 담당한다.하지만 기본적으로 브라우저는 각 브라우저별로 각각의 태그에 대한 기본 스타일링이 되어있다.특히 우리의 적 익스플로러는 심하게 버전별로 차이가 있다. 이처럼 브라우저별로 각가 태그에 대한 기본 스타일링이 다르기 때문에, 기본적인 것들은 초기화해서 사용합니다.그래야지 우리가 생각하는 브라우저별 최대한 비슷한 흡사한 웹페이지를 작성할 수 있습니다. NormalizeNormalize는 기존의 브라우저별 스타일을 모두 리셋시키는 방법이 아니라이를 유지하고, 이용하려는 스타일링 방법입니다.브라우저 크롬과 사파리의 비교입니다.스타일 크롬과 사파리의 비교입니다. 이처럼 Normalize는 기존에 있던 부분을 이용하되, 최대한 훼손시키지 않고, 이용하는 방법을 사용하고 있습니다. 장점과 단점이처럼 CSS를 작업하기전에 설정하는 각 방법에 따라 장점과 단점이 존재합니다. Restting 장점 익숙하다 현재 우리나라에서는 초기화하는 방법을 많이 사용하므로 익숙합니다. 익숙하므로써 작업의 속도 측면에서 고려할 부분이 존재 하지 않기 때문에 작업 속도는 빠를 수 있습니다. 다른부분에 신경을 쓰지 않아도 된다. 만약 잘못 쓰고 있는 Restting일 경우 예상치 못한 변수가 등장합니다. 하지만 모든것을 제대로 Restting하였다면, 고려해야 할 변수가 적습니다. 단점 코드의 복잡성 Restting을 하면 우선순위에 따라 또한 상위 또는 하위에 작성했느냐에 따라 스타일이 달리 적용 될 수 있습니다. 최근 업데이트가 없다. 브라우저는 지속적으로 업데이트 되고 있습니다. 또한 코드는 언제나 변하죠. 하지만 Normalize처럼 대표적으로 한가지 방법을 사용하는 것과 달리, 앞서 언급한대로 Restting을 하는 방법은 다양합니다. Normalize 장점 코드의 간결함 Normalize는 리셋과 달리 기존 코드를 유지하고, 이용한다는 측면에 있어서 코드의 우선순위등의 측면에서 충돌이 일어날 가능성이 적습니다. 지속적인 업데이트 Restting과 다르게 최근에 v8.0이 나오고 github를 운영하여, 지속적인 업데이트를 거치고 있습니다. 단점 어색함 국내 많은 개발자들은 Restting을 사용해 왔기 때문에, 어색하고 새롭습니다. 그렇기에 생각지 못한 디자인 오류가 발생할 수 있습니다. 하지만 익숙해지면 괜찮을것으로 판단 됩니다. 정리정리하자면, 현재 국내의 개발자들은 Restting을 이용해 초기화하여 작업한 경우가 많기 때문에, 익숙합니다.하지만 최근에 해외에서는 Normalize를 통해 코드를 효율적으로 작성하는데 초점을 두고 있는 것 같습니다. 정답은 없습니다.각자 원하는 방법으로 효율적으로 작업하면 됩니다.하지만 개발자로써 이러한 방법이 있으니 실무에서 까지는 아니더라도 한번 사용해보는 것을 추천드립니다.","categories":[{"name":"CSS","slug":"CSS","permalink":"https://tuhbm.github.io/categories/CSS/"}],"tags":[{"name":"reset","slug":"reset","permalink":"https://tuhbm.github.io/tags/reset/"},{"name":"normalize","slug":"normalize","permalink":"https://tuhbm.github.io/tags/normalize/"},{"name":"ie","slug":"ie","permalink":"https://tuhbm.github.io/tags/ie/"},{"name":"chrome","slug":"chrome","permalink":"https://tuhbm.github.io/tags/chrome/"},{"name":"firefox","slug":"firefox","permalink":"https://tuhbm.github.io/tags/firefox/"},{"name":"safari","slug":"safari","permalink":"https://tuhbm.github.io/tags/safari/"}]},{"title":"python2","slug":"python2","date":"2018-02-14T13:41:49.000Z","updated":"2018-03-11T03:23:03.859Z","comments":true,"path":"2018/02/14/python2/","link":"","permalink":"https://tuhbm.github.io/2018/02/14/python2/","excerpt":"Python이 카테고리는 파이썬 공부를 하며, 익힌 내용을 기록합니다.책을 보며, 독학을 하므로 잘못된 내용이 있으면 댓글 또는 메일주시면 신속히 오류처리하겠습니다. 파이썬 2편","text":"Python이 카테고리는 파이썬 공부를 하며, 익힌 내용을 기록합니다.책을 보며, 독학을 하므로 잘못된 내용이 있으면 댓글 또는 메일주시면 신속히 오류처리하겠습니다. 파이썬 2편 파이썬 문법파이썬의 기본 문법은 들여쓰기로 구분이 됩니다.자바스크립트는 {}의 블록 형태로 또는 ()처럼 함수의 호출 등 괄호를 통해 문법을 구분하였습니다.또는 실수를 하지 않도록 ;을 통해 마침을 지었습니다. 그렇기에 자바스크립트 진영에서 minify을 하여도 문제가 되지 않았습니다.그리고 ;도 문자이므로 세미콜론을 쓰지말아야한다 VS 안정감을 위해 써야한다라는 식의 논란이 있을정도로 구분이 쉬웠습니다. 하지만 우리가 앞으로 배워나갈 파이썬은 들여쓰기로 문법을 나눕니다.예를 들어보겠습니다. 12345678 x = 2 y = 4 \"\"\"이렇게 작성하면,IndentationError: unexpected indent 에러가 발생합니다.\"\"\" 이처럼 파이썬은 문법 구분을 할 때 들여쓰기를 기준으로 사용합니다. 나중에 또 설명드리겠지만 함수를 예로 들면12def sum(x,y): return x + y 이런식으로 함수의 내용은 들여쓰기를 통해 입력을 합니다. 에러와 예외파이썬의 에러 형태는 두가지 입니다. 문법에러와 예외입니다.예를 들어 어떤 숫자를 0으로 나누려 할때 일어나는 ZeroDivisionError는 예외에 해당됩니다. 문법에러는 치명적이지만, 예외는 프로그램이 계속 실행되도록 만들 수 있는 에러입니다. 산술 연산자자바스크립트와 마찬가지로 파이썬도 연산을 할 수 있습니다.모든 산술 연산자가 같지만 다른점이 몇가지가 있습니다.그 중 한가지는 //연산자입니다. 자바스크립트에는 //연산자가 존재하지 않습니다.지금부터 //연산자의 예제를 보겠습니다. 12313 // 5 # 211 // 8 # 110 // 3 # 3 위 결과를 통해 추측이 되나요?바로 정수 나누셈의 몫을 얻는 연산자입니다.숫자는 정수만 있는 것이 아니라 소수도 있습니다.하지만 //연산자는 나누기인데 정수의 몫을 구하는 연산자입니다. 그리고 나머지 한가지는 제곱 연산자입니다.예제를 보겠습니다.1234# 마크다운에서는 **이 표현되지 않아 제곱으로 표현합니다.2 ** 2 # 43 ** 2 # 94 ** 1 # 4 바로 제곱의 수를 구합니다.2 제곱 2 는 2 X 2와 같고3 제곱 2 는 3 X 3과 같습니다.그럼 4 제곱 4은 무엇일까요. 바로 4 X 4 X 4 X 4입니다 이처럼 자바스크립트의 기본적인 연산 뿐만 아니라,추가적인 산술 연산자를 알아보았습니다. 논리 연산자자바스크립트의 논리 연산자에는 &amp;&amp;, ||, !이 있습니다.하지만 파이썬에서는 더 쉽게 영어로 표현합니다.and, or, not으로 논리 연산자를 사용합니다.예를 들어 사용해보면,1231 == 1 and 2 == 2 # 자바스크립트 1 == 1 &amp;&amp; 2 == 23 == 3 or 4 == 4 # 자바스크립트 3 == 3 || 4 == 4not5 == 6 # 자바스크립트 !5 == 6 이렇게 사용합니다. 이번시간에는 파이썬의 문법, 에러, 연산자를 알아보았습니다.다음시간에는 조건문, 함수, 반복문을 알아보겠습니다. 즐거운 명절 보내세요.","categories":[{"name":"Python","slug":"Python","permalink":"https://tuhbm.github.io/categories/Python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://tuhbm.github.io/tags/python/"},{"name":"파이썬","slug":"파이썬","permalink":"https://tuhbm.github.io/tags/파이썬/"},{"name":"indentationError","slug":"indentationError","permalink":"https://tuhbm.github.io/tags/indentationError/"},{"name":"문법","slug":"문법","permalink":"https://tuhbm.github.io/tags/문법/"},{"name":"들여쓰기","slug":"들여쓰기","permalink":"https://tuhbm.github.io/tags/들여쓰기/"},{"name":"논리연산자","slug":"논리연산자","permalink":"https://tuhbm.github.io/tags/논리연산자/"},{"name":"에러","slug":"에러","permalink":"https://tuhbm.github.io/tags/에러/"},{"name":"예외","slug":"예외","permalink":"https://tuhbm.github.io/tags/예외/"},{"name":"산술연산자","slug":"산술연산자","permalink":"https://tuhbm.github.io/tags/산술연산자/"}]},{"title":"python 시작하기","slug":"startPython","date":"2018-02-12T12:17:35.000Z","updated":"2018-03-11T03:23:03.874Z","comments":true,"path":"2018/02/12/startPython/","link":"","permalink":"https://tuhbm.github.io/2018/02/12/startPython/","excerpt":"Python이 카테고리는 파이썬 공부를 하며, 익힌 내용을 기록합니다.책을 보며, 독학을 하므로 잘못된 내용이 있으면 댓글 또는 메일주시면 신속히 오류처리하겠습니다. 파이썬(python) 시작하기파이썬을 시작하게된 계기한빛미디어의 ‘나는 리뷰어다.’ 라는 이벤트가 있습니다.한빛미디어에서 신청을 받아 3가지의 선택한 책중 1권을 랜덤으로 보내주는데,그 책을 읽고, 기간내에 책에 대한 리뷰를 블로그 및 온라인 서점 등에 리뷰를 작성하는 이벤트입니다.그래서 받게 된 책이 &#39;비전공자가 궁굼해하는 프로그래머의 첫걸음&#39;입니다.이 책은 프로그래밍의 내용을 요즘 HOT하다는 파이썬이란 언어 통해 프로그래밍에 관련된 내용을 전달합니다.책을 반정도 읽다보니, 파이썬을 공부해 포스팅하는것도 좋겠다라는 생각이 들어 파이썬 공부를 시작하게 되었습니다.다만, 제가 주로 사용하는 언어가 아닌 만큼 포스팅에 다소 시간이 걸릴 수 있습니다.","text":"Python이 카테고리는 파이썬 공부를 하며, 익힌 내용을 기록합니다.책을 보며, 독학을 하므로 잘못된 내용이 있으면 댓글 또는 메일주시면 신속히 오류처리하겠습니다. 파이썬(python) 시작하기파이썬을 시작하게된 계기한빛미디어의 ‘나는 리뷰어다.’ 라는 이벤트가 있습니다.한빛미디어에서 신청을 받아 3가지의 선택한 책중 1권을 랜덤으로 보내주는데,그 책을 읽고, 기간내에 책에 대한 리뷰를 블로그 및 온라인 서점 등에 리뷰를 작성하는 이벤트입니다.그래서 받게 된 책이 &#39;비전공자가 궁굼해하는 프로그래머의 첫걸음&#39;입니다.이 책은 프로그래밍의 내용을 요즘 HOT하다는 파이썬이란 언어 통해 프로그래밍에 관련된 내용을 전달합니다.책을 반정도 읽다보니, 파이썬을 공부해 포스팅하는것도 좋겠다라는 생각이 들어 파이썬 공부를 시작하게 되었습니다.다만, 제가 주로 사용하는 언어가 아닌 만큼 포스팅에 다소 시간이 걸릴 수 있습니다. 파이썬 설치하기파이썬은 공식 홈페이지를 통해 설치가 가능합니다.저는 과거 버전인 2.x 버전이 아닌 3.x의 버전을 통해 공부를 시작하겠습니다.공식홈페이지를 통해 다운을 받고 나면 일반적인 프로그램을 설치하는것처럼 설치를 합니다. 파이썬 터미널파이썬은 일반적인 CMD 또는 터미널을 통해 작성(따로 PATH) 설치시 파이썬 사용이 가능하다.하지만 파이썬을 설치시 자동으로 설치되는 IDLE라는 파이썬 전용 터미널을 이용하는 것이 PATH문제의 측면에서 좋다고 생각합니다. Hello world!12print ('Hello world!')#Hello world! 출력 &#39;Hello world&#39;는 프로그래밍을 배우는 개발자들이 가장 먼저 출력해 보는 예제입니다.파이썬 세계에 오신것을 환영합니다. 주석달기파이썬은 그동안 우리가 자바스크립트를 하면서 달아왔던 주석과는 조금 형태가 다릅니다.자바스크립트에서는12345// 한줄주석/* 여러줄 주석 */ /** * 다른형태의 여러줄 주석 */ 이런 형태의 주석을 사용했습니다. 하지만 파이썬에서는1234#파이썬 한줄주석달기\"\"\"파이썬 멀티주석\"\"\" 이런 형태로 주석을 사용합니다. 다음포스팅부터는 제가 기존에 알고 있던 자바스크립트와 파이썬을 비교하며,공부를 진행하며 포스팅하겠습니다. Hello python!!","categories":[{"name":"Python","slug":"Python","permalink":"https://tuhbm.github.io/categories/Python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://tuhbm.github.io/tags/python/"},{"name":"start","slug":"start","permalink":"https://tuhbm.github.io/tags/start/"},{"name":"파이썬","slug":"파이썬","permalink":"https://tuhbm.github.io/tags/파이썬/"},{"name":"파이썬 시작","slug":"파이썬-시작","permalink":"https://tuhbm.github.io/tags/파이썬-시작/"}]},{"title":"스레드(thread)","slug":"thread","date":"2018-02-06T12:43:00.000Z","updated":"2018-03-11T03:23:03.913Z","comments":true,"path":"2018/02/06/thread/","link":"","permalink":"https://tuhbm.github.io/2018/02/06/thread/","excerpt":"용어정리이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. 스레드(thread)한글로 스레드라 표기하겠습니다.","text":"용어정리이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. 스레드(thread)한글로 스레드라 표기하겠습니다.자바스크립트를 포함 여러 개발 서적 또는 웹문서들을 읽다 보면, 굉장히 많이 나오는 용어 중 하나이다.스레드….싱글스레드….멀티스레드….도대체 스레드란 무엇인가?위키를 통해 스레드를 알아보자.정리를 하면 프로그램 내에서 프로세스가 실행되는 흐름의 단위이다. 그렇다면 프로세스는 무엇인가?프로세스는 소프트웨어가 실행되는 작업단위이다. 이말인즉, 프로그램(소프트웨어) &gt; 프로세스 &gt; 스레드 라고 보면 이해하면 된다.스레드가 모여 프로세스가 되고, 프로세스가 모여 하나의 프로그램이 된다. 자바스크립트의 스레드각 언어별 특이한 사항들이 있다.자바스크립트의 특징은 싱글스레드라는 것이다. 싱글스레드싱글스레드는 말 그대로 하나의 직렬로 처리하는 스레드 방식이라는 것이다.이말인 즉 하나의 요청이 있으면 하나를 처리할때까지 다음 요청은 대기상태라는것이다.하나씩만 실행 할 수 있다.라는 뜻이다. 물론 자바스크립트에서도 멀티스레드 비슷한 방식으로 처리 하기위해 WebWork를 사용하면 된다.멀티스레드는 여러개의 스레드를 사용한다는 방식인대,실제 한번에 두가지 일을 동시에 병렬로 처리하는 것이 아니라 번갈아 가며 처리하므로써 동시에 작업이 처리되는 것처럼 느끼게 하는 방식이다.이는 채팅을 예로 들면, 상대방의 메시지를 다운 받는 동안 나는 입력을 할 수 없을 경우 멀티스레드를 사용하여 다운과 입력을 동시에 처리하는 것과 같다. 정리해보면 그림과 같다.이미지 참조사이트-LG CNS 결론싱글스레드와 멀티스레드를 사용할때 무작정 사용하는 것이 아니라작업의 효율을 따져보고 직렬로 빠르게 처리해야할 것, 또는 병렬로 다중으로 처리해야할 것을 구분하여상황에 맞게 사용해야 한다.","categories":[{"name":"용어정리","slug":"용어정리","permalink":"https://tuhbm.github.io/categories/용어정리/"}],"tags":[{"name":"thread","slug":"thread","permalink":"https://tuhbm.github.io/tags/thread/"},{"name":"스레드","slug":"스레드","permalink":"https://tuhbm.github.io/tags/스레드/"},{"name":"싱글스레드","slug":"싱글스레드","permalink":"https://tuhbm.github.io/tags/싱글스레드/"},{"name":"멀티스레드","slug":"멀티스레드","permalink":"https://tuhbm.github.io/tags/멀티스레드/"},{"name":"프로세스","slug":"프로세스","permalink":"https://tuhbm.github.io/tags/프로세스/"}]},{"title":"ThirdParty(서드파티)","slug":"thirdParty","date":"2018-01-26T11:54:28.000Z","updated":"2018-03-11T03:23:03.870Z","comments":true,"path":"2018/01/26/thirdParty/","link":"","permalink":"https://tuhbm.github.io/2018/01/26/thirdParty/","excerpt":"용어정리이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. Thrid party(서드파티)지금부터 서드파티라 칭하겠습니다.개발을 진행하다 보면, 모르는 부분을 검색을 통해 알아보는 경우가 매우 빈번하다.블로그등을 보다보면 서드파티 라는 용어가 자주 존재하는데, 그뜻을 알아보도록 하자","text":"용어정리이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. Thrid party(서드파티)지금부터 서드파티라 칭하겠습니다.개발을 진행하다 보면, 모르는 부분을 검색을 통해 알아보는 경우가 매우 빈번하다.블로그등을 보다보면 서드파티 라는 용어가 자주 존재하는데, 그뜻을 알아보도록 하자일단 용어 검색을 할때는 위키는 먼저 찾아보는데, 위키를 살펴본 서드파티정리를 하면, 제조사 와 소비자 를 연결해주는 회사 또는 제3자라고 볼 수 있다.예를 들면, 게임제조사 와 소비자 를 연결해주는 게임회사(퍼블리싱)의 관계라고 볼 수 있다.중국에 크로스파이어로 성공을 거둔 스마일게이트(게임제조사) 와 유저(중국 사용자)를 이어주는 텐센트(퍼블리싱)같은 예시가 있다. 그렇다면 프로그래밍 개발에서 서드파트란 이야기가 왜 나올까…?프로그래밍 개발을 하다보면, 편하고 효율적인 개발을 위해, 플러그인이나 라이브러리 또는 프레임워크등을 사용한다.예를 들면 프로그래밍 개발과 개발자 사이에 플러그인, 라이브러리, 프레임워크를 서드파티로 볼 수 있다.만약 개발을 완료했다고 한다면, 서비스와 사용자를 이어주는 서드파티는 응용프로그램 or 어플리케이션 or 웹서비스입니다.이처럼 제3자로써 중간 다리의 역할을 하는 것을 서드파티라 합니다.","categories":[{"name":"용어정리","slug":"용어정리","permalink":"https://tuhbm.github.io/categories/용어정리/"}],"tags":[{"name":"programming","slug":"programming","permalink":"https://tuhbm.github.io/tags/programming/"},{"name":"framework","slug":"framework","permalink":"https://tuhbm.github.io/tags/framework/"},{"name":"library","slug":"library","permalink":"https://tuhbm.github.io/tags/library/"},{"name":"third party","slug":"third-party","permalink":"https://tuhbm.github.io/tags/third-party/"},{"name":"plug in","slug":"plug-in","permalink":"https://tuhbm.github.io/tags/plug-in/"},{"name":"vendor","slug":"vendor","permalink":"https://tuhbm.github.io/tags/vendor/"},{"name":"플러그인","slug":"플러그인","permalink":"https://tuhbm.github.io/tags/플러그인/"},{"name":"라이브러리","slug":"라이브러리","permalink":"https://tuhbm.github.io/tags/라이브러리/"},{"name":"프레임워크","slug":"프레임워크","permalink":"https://tuhbm.github.io/tags/프레임워크/"}]},{"title":"리터럴이란 무엇일까?","slug":"literal","date":"2018-01-26T10:43:00.000Z","updated":"2018-08-20T14:01:33.565Z","comments":true,"path":"2018/01/26/literal/","link":"","permalink":"https://tuhbm.github.io/2018/01/26/literal/","excerpt":"용어정리이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. 리터럴프로그램 개발을 하다보면, 리터럴이라는 단어를 많이 사용한다.먼저 위키를 살펴보자","text":"용어정리이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. 리터럴프로그램 개발을 하다보면, 리터럴이라는 단어를 많이 사용한다.먼저 위키를 살펴보자리터럴리터럴이란? 소스 코드의 고정된 값을 대표하는 용어이다.고정된 값은 숫자, 문자, 함수 등 더이상 나눌 수 없는 명확하게 데이터를 표현하는 값이다. 예를 들어보자.12345678const intergerNum = 123; // 정수인 number리터럴const floatingPointNum = 54.5413; // 실수인(소수점) number리터럴const str = '글자'; // 문자 리터럴const func = function (a) &#123; return a;&#125; // 함수 리터럴const obj = &#123; x: 123, y : 456&#125; // 객체 리터럴const regex = /[a-z]/; // 정규표현식 리터럴const arr = [1,2,3]; // 배열 리터럴const bool = true; // boolean 리터럴 이와같이 Javascript의 리터럴 종류가 있다.리터럴은 더이상 나눌 수 없는 값이므로(변화가 불가능하다 라는 뜻은 아니다) 변수 선언한다면, const로 선언 해야한다.","categories":[{"name":"용어정리","slug":"용어정리","permalink":"https://tuhbm.github.io/categories/용어정리/"}],"tags":[{"name":"var","slug":"var","permalink":"https://tuhbm.github.io/tags/var/"},{"name":"let","slug":"let","permalink":"https://tuhbm.github.io/tags/let/"},{"name":"const","slug":"const","permalink":"https://tuhbm.github.io/tags/const/"},{"name":"리터럴","slug":"리터럴","permalink":"https://tuhbm.github.io/tags/리터럴/"},{"name":"literal","slug":"literal","permalink":"https://tuhbm.github.io/tags/literal/"},{"name":"상수","slug":"상수","permalink":"https://tuhbm.github.io/tags/상수/"},{"name":"변수","slug":"변수","permalink":"https://tuhbm.github.io/tags/변수/"},{"name":"값","slug":"값","permalink":"https://tuhbm.github.io/tags/값/"},{"name":"메모리","slug":"메모리","permalink":"https://tuhbm.github.io/tags/메모리/"}]},{"title":"SASS에 대해 알아보자2","slug":"sass2","date":"2018-01-24T11:01:13.000Z","updated":"2018-03-11T03:23:03.901Z","comments":true,"path":"2018/01/24/sass2/","link":"","permalink":"https://tuhbm.github.io/2018/01/24/sass2/","excerpt":"SASSSASS를 통칭 사스 라고 표기하겠습니다.지난 포스팅을 통해 SASS의 확장자가 최종적으로 .scss로 확정되었다고 말씀드렸습니다.이번 포스팅부터는 사스의 문법에 대해 알아보겠습니다. 변수사용변수를 사용하므로써, 한번의 변경으로 사용한 모든 변수의 값을 바꿀 수 있는 효율적인 방법이라고 말씀드렸었습니다.변수를 키와값으로 표현해 보겠습니다.1$normalFontSize: 14px;","text":"SASSSASS를 통칭 사스 라고 표기하겠습니다.지난 포스팅을 통해 SASS의 확장자가 최종적으로 .scss로 확정되었다고 말씀드렸습니다.이번 포스팅부터는 사스의 문법에 대해 알아보겠습니다. 변수사용변수를 사용하므로써, 한번의 변경으로 사용한 모든 변수의 값을 바꿀 수 있는 효율적인 방법이라고 말씀드렸었습니다.변수를 키와값으로 표현해 보겠습니다.1$normalFontSize: 14px; 이제 14px은 $normalFontSize에 담겨있습니다.여러가지의 형태로도 담을 수 있습니다.이때 사용하는것이 @mixin입니다.예를 들어보겠습니다.대표적인 예로 우리는 float을 해제 할 때 여러방법이 있지만 가상선택자인 :after를 사용한 클리어 방법을 상황에 따라 사용합니다.이것을 사스로 표현해보겠습니다.1234567891011121314@mixin afterClear &#123; display: block; content: ''; clear: both;&#125;ul &#123; &amp;:after&#123; @include afterClear; &#125; li&#123; float:left; &#125;&#125; 사스에서 CSS의 컴파일 된 코드를 보겠습니다.123456789ul:after &#123; display: block; content: ''; clear: both;&#125;ul li &#123; float: left;&#125; 이처럼 코드 뭉치의 재사용도 가능합니다. 이처럼 선언시에는 @mixin으로 사용할때에는 @include로 사용하는 것을 볼 수 있습니다.또한123456789101112131415161718192021@mixin setImageMaskRotate &#123; @include setImageMask; @include rotate;&#125;@mixin setImageMask &#123; position: relative; &amp;:after&#123; position: absolute; top: 0; bottom: 0; left: 0; right: 0; border: 10px solid #000; opacity: 0.2; content: ''; &#125;&#125;@mixin rotate &#123; transform: rotate(45deg);&#125; 이처럼 @mixin안에 @mixin을 넣는것 역시 가능합니다.사실 @mixin은 변수의 개념보다는 함수의 개념에 가깝습니다. 이유를 살펴보도록 하겠습니다.123456789101112131415161718@mixin center($width, $height) &#123; position: absolute; top: 50%; margin-top: - $height / 2; left: 50%; margin-left: - $width / 2; height: $height; width: $width;&#125;.ex_box_1&#123; @include center(100px, 100px); background-color: pink;&#125;.ex_box_2&#123; @include center(300px, 100px); background-color: orange;&#125; 매개변수의 사용이 가능합니다. 컴파일 코드를 보면1234567891011121314151617181920.ex_box_1 &#123; position: absolute; top: 50%; margin-top: -50px; left: 50%; margin-left: -50px; height: 100px; width: 100px; background-color: pink;&#125;.ex_box_2 &#123; position: absolute; top: 50%; margin-top: -50px; left: 50%; margin-left: -150px; height: 100px; width: 300px; background-color: orange;&#125; 이처럼 매개변수의 값을 통해 연산 또한 가능함을 알 수 있습니다.사스의 기능을 설명 드리려고 하니, 기능이 너무너무 많아서 한번에 다 설명이 힘들어 여러편에 나누어야 할 것 같습니다.다음시간에는 @extend에 부터 설명을 드리겠습니다.","categories":[{"name":"CSS","slug":"CSS","permalink":"https://tuhbm.github.io/categories/CSS/"},{"name":"SASS","slug":"CSS/SASS","permalink":"https://tuhbm.github.io/categories/CSS/SASS/"}],"tags":[{"name":"변수","slug":"변수","permalink":"https://tuhbm.github.io/tags/변수/"},{"name":"SASS","slug":"SASS","permalink":"https://tuhbm.github.io/tags/SASS/"},{"name":"scss","slug":"scss","permalink":"https://tuhbm.github.io/tags/scss/"},{"name":"사스","slug":"사스","permalink":"https://tuhbm.github.io/tags/사스/"},{"name":"mixin","slug":"mixin","permalink":"https://tuhbm.github.io/tags/mixin/"},{"name":"include","slug":"include","permalink":"https://tuhbm.github.io/tags/include/"}]},{"title":"SASS에 대해 알아보자1","slug":"sass1","date":"2018-01-24T07:12:13.000Z","updated":"2018-03-11T03:23:03.878Z","comments":true,"path":"2018/01/24/sass1/","link":"","permalink":"https://tuhbm.github.io/2018/01/24/sass1/","excerpt":"SASSSASS를 통칭 사스 라고 표기하겠습니다.금일은 사스에 대해 알아보겠습니다.우선 컴파일 하는 방법에 대해 지난번 포스팅한 것이 있는데요. 1. scout앱 사용하여 컴파일하기 (지난번 포스팅내용입니다.)2. Ruby를 설치해 Cli를 통해 컴파일하기3. gulp등 Task runner(또는 webpack같은 빌드도구)이용하여 컴파일하기4. prepros 또는 kolal등의 앱사용하기 사스는 이렇게 컴파일 하시면 되겠구요.","text":"SASSSASS를 통칭 사스 라고 표기하겠습니다.금일은 사스에 대해 알아보겠습니다.우선 컴파일 하는 방법에 대해 지난번 포스팅한 것이 있는데요. 1. scout앱 사용하여 컴파일하기 (지난번 포스팅내용입니다.)2. Ruby를 설치해 Cli를 통해 컴파일하기3. gulp등 Task runner(또는 webpack같은 빌드도구)이용하여 컴파일하기4. prepros 또는 kolal등의 앱사용하기 사스는 이렇게 컴파일 하시면 되겠구요. 사스등 CSS 전처리기의 사용 이유우선 전처리기(위키바로가기)란?요약해보면 입력 데이터를 처리하여 다른 프로그램에 대한 입력으로서 사용되는 출력물을 만들어내는 프로그램입니다. CSS는 웹을 구현하는데 스타일을 담당하고 있습니다. 그렇기에 CSS만으로 웹을 정복하겠다는 생각을 가지신분을 없으시겠죠…?CSS는 웹의 스타일을 담당하는 웹에서 필수는 아니지만, 보이는 부분을 처리해주는 중요한 역할을 하고 있습니다. CSS가 없는 웹을 상상해 보셨나요?보신적있으신가요? 대부분 없을테니 보여드리겠습니다.어떤가요. 우리나라의 녹색사이트 입니다.이처럼 CSS로 인해 스타일을 입히는 것은 매우 중요한 작업입니다.물론 모든 회사들이 이부분을 알기 때문에 css를 빼고 웹개발을 진행 할리없습니다.서론이 길었습니다. 현대시대에 웹개발 기술은 지속적인 발전을 이루었습니다.웹에서 돔을 구성하는 HTML도 템플릿화 된 jade 또는 pug등의 방법으로 발전하였고,현재 가장 화두가 되고 있는 Javascript도 각각 라이브러리와 프레임워크등으로 발전하고 있습니다.여기서 발전 === 효율적으로 작업자들이 작업을 할 수 있고, 깊게는 렌더링등의 성능적인 부분에도 영향을 줄 수 있습니다.(성능적인 부분은 문서가 짧아지고 그러므로써.) 개발자들에게 작업을 효율적으로 할 수 있는 일은 참 대단히 반가운 소리입니다.이처럼 CSS도 전처리기를 통해 효율적으로 작업을 할 수 있습니다. CSS 전처리기의 종류 SASS LESS Stylus CssNext PostCSS현존하고 있는 CSS전처리기는 이정도 입니다.각각의 차이는 있지만 변수나 함수등을 사용하여, 코드를 효율적으로 작성 및 관리 할 수 있다는 공통적인 부분은 같습니다. 이제부터 SASS에 대해 본격적으로 알아보겠습니다. SASS의 특징 가장 오래된 역사를 가진 전처리기이다. Ruby 언어를 기반으로 동작한다. 기존 CSS 문법과 호환성이 높다. 함수, 제어문까지 제공하며 완성도 높은 프로그래밍 언어처럼 동작한다. 확장자명이 .SASS 와 .SCSS 로 두가지 방식의 확장자 사용이 가능하다. .SASS와 .SCSS의 차이같은 사스라도 말씀드린 것처럼 .sass와 .scss가 있습니다.차이를 알아보도록 하겠습니다.1234567891011$normalFont: 14pxheader font-size: $normalFont .container display: block font-size: $normalFont p font-size: $normalFont color: #000 먼저 .sass의 문법입니다.어떤가요? 보시는 바와 같이 괄호가 없습니다.개인적으로는 보기 매우 불편하고, 헷갈릴것 같은 느낌이 듭니다.이처럼 .sass는 {}괄호 대신 들여쓰기등의 공백문자(white space)를 통해 선택자를 구분합니다.지금은 짧은 내용이지만, 내용이 길어지면 더욱 헷갈릴듯 합니다. 그렇게에 사스는 3.0버전부터는 문법이 .scss로 통일되었습니다.12345678910111213$normalFont: 14px;header &#123; font-size: $normalFont;&#125;.container &#123; display: block; font-size: $normalFont; p &#123; font-size: $normalFont; color: #000; &#125;&#125; 통일된 .scss문법을 보시죠 괄호를 통해 매우 정갈함이 느껴집니다.그런데 혹시 이 간단한 예제에서 CSS와 차이점을 느끼셨습니까?네 맞습니다. $normalFont: 14px;를 지정하고 $normalFont를 호출하여 사용하고 있습니다.이처럼 변수형태로 작성이 가능합니다.에이… 별거아니네… 변수를 무시하시면 안됩니다. Javascript나 다른 언어에서도 사용하고 있는 변수는 매우 중요합니다.지금처럼 몇번 사용하지 않았을 경우 직접 바꿔주거나, 에디터의 찾은 후 변경 같은 기능을 사용하면 됩니다.하지만 10,000번을 사용한 부분이라면 어떨까요…?(여기부분은 마치 자바스크립트를 설명하는 느낌이네요..)변수를 지정한 부분의 1번 수정으로 10,000번 이상 수정해야 할 부분을 변경할 수 있습니다. 그럼 위에 부분을 컴파일 하면 어떻게 나올까요?1234567891011header &#123; font-size: 14px;&#125;.container&#123; display: block; font-size: 14px;&#125;.container p&#123; font-size: 14px; color: #000;&#125; 이처럼 CSS의 원래 형태로 나오게 됩니다.이러한 사스의 강점은 CSS가 길어지면 길어질 수록 강점을 발휘합니다.잘 사용하면, 1000줄의 CSS를 700줄의 CSS로 줄일 수 있는 CSS전처리기 어떤가요? 다음시간엔 계속해서 사스의 문법에 대해 알아보겠습니다.","categories":[{"name":"CSS","slug":"CSS","permalink":"https://tuhbm.github.io/categories/CSS/"},{"name":"SASS","slug":"CSS/SASS","permalink":"https://tuhbm.github.io/categories/CSS/SASS/"}],"tags":[{"name":"SASS","slug":"SASS","permalink":"https://tuhbm.github.io/tags/SASS/"},{"name":"compile","slug":"compile","permalink":"https://tuhbm.github.io/tags/compile/"},{"name":"sass","slug":"sass","permalink":"https://tuhbm.github.io/tags/sass/"},{"name":"scss","slug":"scss","permalink":"https://tuhbm.github.io/tags/scss/"},{"name":"CSS 전처리기","slug":"CSS-전처리기","permalink":"https://tuhbm.github.io/tags/CSS-전처리기/"},{"name":"CSS processors","slug":"CSS-processors","permalink":"https://tuhbm.github.io/tags/CSS-processors/"},{"name":"사스","slug":"사스","permalink":"https://tuhbm.github.io/tags/사스/"}]},{"title":"부수효과","slug":"sideEffect","date":"2018-01-22T13:40:55.000Z","updated":"2018-03-11T03:23:03.879Z","comments":true,"path":"2018/01/22/sideEffect/","link":"","permalink":"https://tuhbm.github.io/2018/01/22/sideEffect/","excerpt":"용어정리이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. 부수효과(side effect)부수효과를 좀 있어보이게 사이드이팩트라 쓰겠습니다사이드이팩트란 무엇인가 알아보았다.위키에서의 부수효과(부가작용) 이렇게 정의하고 있습니다.이처럼 원래의 목적과 다르게 다른 효과 또는 부작용이 나는 상태를 지칭합니다.","text":"용어정리이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. 부수효과(side effect)부수효과를 좀 있어보이게 사이드이팩트라 쓰겠습니다사이드이팩트란 무엇인가 알아보았다.위키에서의 부수효과(부가작용) 이렇게 정의하고 있습니다.이처럼 원래의 목적과 다르게 다른 효과 또는 부작용이 나는 상태를 지칭합니다.프로그래밍 세계에서도 마찬가지입니다.예를 들어보겠습니다. 순수 함수123456function add (a, b) &#123; //순수하게 더하는 함 return a + b;&#125;add(1, 2)//3add(3, 4)//7add(5, 6)//11 add함수는 단순하게 더하기만 하는 함수입니다.매개변수인 a와 b값을 어떠한 영향도 받지 않고, 더하기만 하는 함수입니다.이것을 순수함수(Pure function)이라고 합니다. 순수하지않은 함수순수하지 않은 함수는 부수효과등을 일으키는 함수입니다.예를 보겠습니다.1234567891011var c = 10;function add (a, b) &#123; return a + b + c;&#125;add(1, 2)//13add(2, 3)//15c = 20;add(1, 2)//23add(2, 3)//25//이처럼 a와 b를 매개변수로 받아 c와 합산하는 함수입니다.//c의 값이 변경되므로써 값이 달라집니다. 이처럼 부수효과가 많을수록, 개발자들에게 예상치 못한 혼란을 줄 수 있습니다.그렇기 때문에 부수효과를 줄이므로써, 인간이 하는 개발에 있어서 좀 더 쉽게 편리하게 개발하자는 취지입니다.이렇게 순수함수를 통해 프로그래밍 하는 것을 함수형프로그래밍(Functional Programming)이라고 합니다. 함수형프로그래밍아직 공부하지 않아 아는내용만 작성 후 추후 포스팅하겠습니다.함수형 프로그래밍은 순수 함수를 통해, 부수효과를 줄이므로써 발생 할 수 있는 이슈를 줄이는 함수 입니다.함수안에 매개변수로 함수를 받아 단순 처리하며, 사이드이팩트를 줄여 순수하게 프로그래밍하는 것입니다. 공부가 부족함을 느끼고, 추후 공부하여 더 살을 붙이도록 하겠습니다.","categories":[{"name":"용어정리","slug":"용어정리","permalink":"https://tuhbm.github.io/categories/용어정리/"}],"tags":[{"name":"side effect","slug":"side-effect","permalink":"https://tuhbm.github.io/tags/side-effect/"},{"name":"부수효과","slug":"부수효과","permalink":"https://tuhbm.github.io/tags/부수효과/"},{"name":"functional programming","slug":"functional-programming","permalink":"https://tuhbm.github.io/tags/functional-programming/"}]},{"title":"VanillaJS","slug":"vanillaJS","date":"2018-01-21T14:42:22.000Z","updated":"2018-03-11T03:23:03.890Z","comments":true,"path":"2018/01/21/vanillaJS/","link":"","permalink":"https://tuhbm.github.io/2018/01/21/vanillaJS/","excerpt":"Vanilla JS지금부터는 Vanilla JS를 편하게 바닐라JS라고 기재하겠다.Javascript를 사용하는 개발자로써, 많은 사람들이 들어 보았을 것이다.필자는 과거 면접에서 이러한 질문을 받은 적이 있다.‘바닐라 JS에 대해 아시나요?’라는 질문을 받았다. 좀 당황스러운 질문이었다.평소 바닐라JS === Javascript라고 생각해 온 상황이서 그런지 더욱 당황스러웠지만…답을했다.‘일반적으로 우리가 사용하고 있는 Javascript라고 합니다.’‘그럼 왜 자바스크립트가 바닐라JS라고 불리는지 아시나요?’ 또 당황스러웠다.(이것이 면접에서 말리는 시초였다.)","text":"Vanilla JS지금부터는 Vanilla JS를 편하게 바닐라JS라고 기재하겠다.Javascript를 사용하는 개발자로써, 많은 사람들이 들어 보았을 것이다.필자는 과거 면접에서 이러한 질문을 받은 적이 있다.‘바닐라 JS에 대해 아시나요?’라는 질문을 받았다. 좀 당황스러운 질문이었다.평소 바닐라JS === Javascript라고 생각해 온 상황이서 그런지 더욱 당황스러웠지만…답을했다.‘일반적으로 우리가 사용하고 있는 Javascript라고 합니다.’‘그럼 왜 자바스크립트가 바닐라JS라고 불리는지 아시나요?’ 또 당황스러웠다.(이것이 면접에서 말리는 시초였다.) 바닐라JS란 무엇인가?바닐라JS에 어원에 대한 내용을 검색하지 못해 바닐라를 통해 추측해보았습니다. 바닐라바닐라라는 단어는 우리 주변에서 많이 사용되고 있는데 대표적인 것이 바닐라 아이스크림입니다. 어원적으로 스페인어 vanilla 는 ‘작은 콩’ 이라는 뜻을 가진 난초과 식물로, 이 단어에는 ‘바닐라, 바닐라 향의’ 의미만 가지는 것이 아니라 ‘평범한, 특별할 것이 없는( ordinary )’ 이라는 의외의(?) 뜻이 있습니다. 프로그래밍으로서의 바닐라바닐라 이처럼 ‘바닐라’라는 단어는 프로그래밍 세계에서 기본적인 기능만 구현해 놓은 상태를 뜻합니다.그러므로 바닐라JS는 새로운 프레임워크 또는 라이브러리가 아닌 순수한 Javascript입니다.실제 바닐라JS 공식사이트를 접속해서 다운받을 수 있다.하지만 정작 파일을 다운받으면 파일 사이즈가 0KB이다. 바닐라JS를 사용하기위해선 별도의 파일이 없다는 것이다.이미 우리의 브라우저에는 바닐라JS가 탑제되어있다.바닐라JS 공식 사이트에는 마치 프레임워크처럼 가볍고 빠른데다가 호화성이 좋다라는 듯의 문구들로 인해 프레임워크나 라이브러리로 오해 할 수 있다.하지만 이말인 즉 나는 ‘순수한 자바스크립트를 사용하면, 가볍고 빠른데다가 호환성이 좋다.’라는 것으로 이해해야 할 것 같다. 현재 외국에서 또는 국내 굴지의 회사에서는 jQuery를 사용하는 프로젝트가 점점 줄어들고 있는 상황이다. 하지만 jQuery를 쓸 수 없으면 어떻게 개발을 할 것인가?필자의 경우 퍼블리셔로 개발에 입문을 했기 때문에 아직 jQuery의 Dom셀렉팅, 이벤트 바인딩, Ajax등에 의존도가 꽤 높은 편이지만, Vue 공부를 통해 필수는 아니라는 것을 깨닫고, 바닐라JS를 공부하는 중이다.바닐라JS 뿐만아니라 ES6, TypeScirpt등 하고 싶은 것이 아직 많다. 결론바닐라JS는 순수한 JavaScript로 프로그램세계에서는 부가기능을 제외한 기본적인 기능만 구현한상태를 부르는 어원이다.","categories":[{"name":"Javascript","slug":"Javascript","permalink":"https://tuhbm.github.io/categories/Javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://tuhbm.github.io/tags/javascript/"},{"name":"VanillaJS","slug":"VanillaJS","permalink":"https://tuhbm.github.io/tags/VanillaJS/"},{"name":"바닐라 JS","slug":"바닐라-JS","permalink":"https://tuhbm.github.io/tags/바닐라-JS/"},{"name":"jQuery","slug":"jQuery","permalink":"https://tuhbm.github.io/tags/jQuery/"},{"name":"Pure Javascript","slug":"Pure-Javascript","permalink":"https://tuhbm.github.io/tags/Pure-Javascript/"}]},{"title":"늦은 2017 회고","slug":"bye2017","date":"2018-01-17T12:31:12.000Z","updated":"2018-06-21T13:32:36.793Z","comments":true,"path":"2018/01/17/bye2017/","link":"","permalink":"https://tuhbm.github.io/2018/01/17/bye2017/","excerpt":"2017년 회고2017년이 가고 2018년 1월이 반쯤 보낸 후, 다시 한번 나를 채찍질 하게 만든 사건을 통해 마음을 다잡고 공부와 블로그 운영을 다짐하며,첫 회고를 쓴다.올해는 유난히 ‘첫, 처음’이란 단어가 어울렸던 한해였다.첫 블로그, 첫 커플해외여행, 첫 에이전시, 첫 기술들등……항상 개발을 하며 느끼는 점은 ‘처음’ 그리고 ‘낯선’ 기술등에 대한 어려움이나 반감이었다.올해 기술들에 대한 반감으로 새로운 기술을 도입하려고 팀원들의 반대로 했으나 실패했었다.필자는 개발자라면, 당연히 더 좋은 기술, 더 좋은 방법이 있다면 그것에 대해 지금 당장 사용을 하지 못하더라도 알아두는것 정도는 해야한다고 생각한다.서론이 길었다. 처음 쓰는 회고라 다른 분들의 회고를 보니 주제를 나눠 이야기 하는 것을 보았다. 나도 그방법을 선택하도록 하겠다.","text":"2017년 회고2017년이 가고 2018년 1월이 반쯤 보낸 후, 다시 한번 나를 채찍질 하게 만든 사건을 통해 마음을 다잡고 공부와 블로그 운영을 다짐하며,첫 회고를 쓴다.올해는 유난히 ‘첫, 처음’이란 단어가 어울렸던 한해였다.첫 블로그, 첫 커플해외여행, 첫 에이전시, 첫 기술들등……항상 개발을 하며 느끼는 점은 ‘처음’ 그리고 ‘낯선’ 기술등에 대한 어려움이나 반감이었다.올해 기술들에 대한 반감으로 새로운 기술을 도입하려고 팀원들의 반대로 했으나 실패했었다.필자는 개발자라면, 당연히 더 좋은 기술, 더 좋은 방법이 있다면 그것에 대해 지금 당장 사용을 하지 못하더라도 알아두는것 정도는 해야한다고 생각한다.서론이 길었다. 처음 쓰는 회고라 다른 분들의 회고를 보니 주제를 나눠 이야기 하는 것을 보았다. 나도 그방법을 선택하도록 하겠다. 개발실력나는 블로그 about에도 써 놓았듯이 비전공자다.(자랑을 하려고 써 놓은것은 아니다.) 비전공자로써 개발을 하면서, 전공자와의 비교는 어찌보면 무리일수도 있다. 하지만 사회는 냉정하다.회사에서 사람을 채용할때 비전공자로써 기대치가 더 낮기 때문에(아무래도 전공자들과 습득속도부터가 다르다고 생각한다.) 회사에서 같은 연봉이면 전공자를 뽑는게 맞다고 생각한다. 회사는 사람을 고용해서 인력에 대한 투자를 한 것 이상으로 수익을 내야 살아 남을 수 있다.그렇기에 비전공자로써의 이점은 전혀 없다고 봐도 무방하다. 비전공자이지만 같은 나이또래의 전공자보다 많은 지식 또는 비슷한 지식과 실력을 지녔다면, 어쩌면 이점이 될지도 모른다.(부단히 노력을 많이 했다는 것을 인정해주므로써…어디까지나 개인적인 생각이다.)비전공자는 그만큼 전공자보다 더~~ 많은 노력을 해야한다. 인정받기위해 어쩌면 살아 남기 위해….그렇다면 나는 개발실력을 늘리는데 그렇게 많은 노력을 했는가? 나는 올해 나에게 100점 만점의 점수를 준다면, 25점 정도를 주고 싶다.이유는 하고싶은 많은 것들 중 이룬것이 몇가지 존재하기에 더이상 내자신이 비참해지지 않기위해 억지로 25점이라도 주고 싶다.올해 개발자로써 이룬것이라고 하면 몇가지가 있긴하다. 브라우저의 렌더링과정에 대한 이해도우연히 올초에 진행했던 면접에서 느낀점을 통해서 ‘이부분을 공부해야겠다.’라는 생각이 들었다.면접…..신입때부터 시작하면, 면접은 참 많이도 보았다. 10인 미만의 기업부터 3000여명의 직원이 일하는 나름 업계 메이저 기업까지…면접에서 떨어진다고 해서 나는 결코 나쁘게만 생각하는 것은 옳지 못하다고 생각한다. 물론 면접을 통해 내가 입사여부를 가리도록 회사에서 나를 보는 것도 있지만, 나도 회사를 관찰하는 것이 면접과정 중 하나라고 생각한다.면접에서 떨어질 것이라고 면접을 보다보면 ‘feel’이 오는 경우가 있다. 그런경우 보통 낙심하고, 기가 죽어 하려던 말도 다 못꺼내고 오는 경우가 많다. 물론 나도 그 중 하나였다.올해 봤던 면접 중 올초 면접 웹퍼블리셔라는 직군으로 불리우던 프론트쪽에서 마크업과 스타일링 그리고 인터렉션을 담당하는 업무를 진행하던 나는 과거 jQuery를 이용해 ajax로 JSON데이터를 연동한 경력이 있다.그래서일까? 나는 단순 데이터바인딩을 해봤다라는 생각에 프론트엔드개발직군 무식하게 도전을 하였다.(사실 나중에 알게 되었지만…프론트엔드개발자는 해야할것들이 너무 많다…..심하게많다…)그렇게 운이 좋게 70여명 규모에 방송관련 자사서비스를 하는 회사에 면접을 진행하게 되었다. jquery밖에 써보지 않은 나로썬 정말 무모했다. 심하게 무모했다.질문을 받은 순간 나는 ‘아 내수준이아니구나….’라는 생각이 들었다.자기소개를 마치고, 첫 질문은 “렌더링 과정’ 에 대한 질문이었다. 정확히 말하면, ‘효율적인 렌더링을 하기위해서 어떤방법을 사용하고 계신가요?”흠… 이전회사에서 많은 도움을 받았기에 나는 자신있게 대답을 하였다. ‘유지보수를 위해 돔을 최소화하고, 클래스명 규칙등 가이드에 맞춰, 올바른 이미지 포멧을 사용하고, 스프라이트이미지를 사용하는것입니다.’지금 돌이켜 생각해보니 아찔하다. 답변은 “흠…몇개는 적당한 답변인것 같은데…몇개는 작업자를 위한 개발방법적인 부분도 있는 것 같습니다.”라는 답변을 들었다. 거기서부터 말려들기 시작한것 같다.“그럼 답변중에 스프라이트 이미지를 사용하신다고하셨는데, 스프라이트이미지는 왜 쓰신다고 생각하시나요?”사실 올해까지는 이유도 모르고, 현재 네이버나 카카오등의 굵직한 IT기업들에서 사용하니까 사용했다.이러한 답변이 오고 전부 틀렸다. 하지만 어디서 용기가 났는지 틀렸던것에 대한 질문을 하기 시작했다. 그러면서 공부를 위해 추천을 받고, 귀가길에 책을 주문하였다.이렇게 브라우저의 렌더링 과정에 대해 공부하기 시작하고, 과정에대해 조금은 이해(조금인 이유는 네트워크….ㅎㄷㄷ)를 했다. Task RunnerGulp의 실무 사용은 내가 위에 말한 렌더링을 알게 된 후 책을 통해 알게 되었고, 셋팅을 하며 개인적으로 공부를 진행했다.렌더링의 효율성을 위하여, 스프라이트이미지를 만들고, Concat(webpack이 아니니 번들이라고 하지 않겠다.)을 통해 JS파일과 CSS파일등을 효율적으로 사용하기 위해 시작하였다.어느정도 완성이 되었을때, 실무에 적용해보고 싶었다. 그때 당시 처음으로 에이전시 근무 중이었다. 에이전시는 다들 어떤 분위기인지 알것이다. 시간에 쫓겨 공부를 내팽겨치고, 야근과 철야 주말근무를 하며, 낮은 임금을 받는것이 보통의 에이전시라고 생각할 것이다.하지만 내가 다녔던 회사는 그정도는 아니었다. 하지만 업무시간이 빡빡한것은 맞았다. 그렇기에 팀장등에게 작은 사내세미나를 통해 Gulp를 공유하고, 렌더링 과정에 대해 설명하고 싶었다. 그리고 실무에 적용하고 싶었다.결과는 실패….. 기존의 것이 아닌 새로운것을 배우고 습득하는데 걸리는 시간이 문제였다.하지만 포기 하지 않았다. 왜냐하면 이직 후 도입했기 때문이다. 현재 회사에서 사용하고 있다. 이렇게 크게 보면 두가지정도의 목표를 이루었기 때문에 나는 25점을 주고싶다. 올해는 조금 더 세심하게, 조금 더 Deep하게 공부하겠다 독서 &amp; 세미나 &amp; 스터디누구나 나의 독서하는 습관을 보면 혀를 찰것이다. 하지만 정작 나만 몰랐다. 나의 문제를…올해 본책은 총 14권정도 그중 개발서적은 12권이나 된다. 누가보면 ‘왜 혀를 찬다는거지’라고 생각을 할 수 있다.문제는 어렵고 이해가 가지 않는다 싶으면, 따분함을 못참고 다른 책으로 갈아타버린다.세미나 또한 마찬가지 일것이다. 올해 참석한 세미나만 해도 약 10개정도는 다녀왔다.스터디…또한 7개는 참여했다. 하지만 복습을 하지 않아 전부 까먹어버렸다.위에서 말한것처럼 나는 ‘트랜드!!!’라는 것을 매우 중요시해서 이책을 보다가 저것도 공부해야지 하고 저책을 보다가…세미나도 이것듣고 저것듣고, 스터디도 이것하고, 저것하고이런식으로 여러마리 토끼를 잡기위해 이리 뛰고 저리 뛰고 뛰어만 다녔다. 정작 그러다가 한마리도 잡지 못했다.이러한 습관은 올해 나에게 채찍질을 할 수 있게 만든 사건을 통해 고쳐야겠다라는 생각이 들었다.그렇기에 올해 2018년 목표는 개발서적 완독을 목표로 3~4권정도로 정했다. 돈사람으로써 살아가기 위해서 필요한 것들 중 하나이다.올해목표는 작년까지는 빚에 허덕이며 살았으니, ‘올해부터는 빚청산 후 적금을 가입하자!’였다. 결론은 실패했다.이유는….너무 오래 쉬었다. 자신있게 다음 스텝을 위한 직장을 구하지 않고, 올해 중반 에이전시를 박차고 나왔다. 문제는 없었다. 다만 ‘내가 여기에서 성장할 수 없겠다.’ 라는 생각이 들어서였다.다른 곳으로 빠져나가지 않게 주제에 대해 돌아가겠다. 에이전시에 다닐때, 모든 카드빚을 청산하고 월급의 50%를 적금 및 주택청약등에 넣기 시작했다. 여기까지는 잘 이루어 졌다.하지만 생각보다 구직활동 시간이 길었다. 2~3개월이 걸렸다. 고정적을 받는 월급이 없어서 씀씀이를 줄인다고 생각하고 사용해도, 사람 씀씀이 어디안가더라…적금을 모두 해약하고 현재는 주택청약만이 남았다. 이른바 대실패다. 올해는 꼭 돈을 모으기 위해 실행 할 지켜야 할 나와의 약속을 정했다. 술 일주일에 1회 이상먹지 않기 쇼핑사이트 DM 무시하기 구매전 한번 더 생각하기이정도만 해도 정말 많은 돈을 모을 수는 없을 지언정 소비가 줄어들것이다. 그리고 내가 정해놓은 최소 연봉….받기….제일 중요하다.IT업계가 임금이 짠건 대한민국에 소문이 났나보다.하다못해 건설업계에 있는 친구가 비중있는 역할은 아닌데, 지금 너보다 많이 벌꺼야 하고 추천해준적.버스회사 사무직등 많은 직업 추천이 있었다.들어보면, 비전도 없을 지언정 연봉도 별차이가 없다. IT업계는 이러한 선입견을 없애기위해 연봉을 상향하라!!!블로그의 시작이전에도 트랜드….를 통해 블로그를 시작한 적이 있다. 하지만 그때와 지금의 차이는 ‘남에게 보여주기 위한 블로그’와 ‘나의 필요로 인해 개설한 블로그’의 차이 일것이다.지금은 현재 내가 공부한부분을 내가 정리하므로써 빠르게 다시 머리속에서 소생시키는 역할을 중요시하여 시작하게 되었다. 공유도 중요하긴 하지만 내가 먼저 알아야한다.스터디를 통해 알게 된 Y군을 통해 hexo로 블로그를 개설하고, 초반 시작은 좋았다.하지만 게으름이 점점시작하고, 블로그포스팅이 없어졌다. 그렇기에 반성해야한다.올해는 최대한 공부한것들을 포스팅하도록 해야겠다.목표는 최소 2주 1포스팅 이상이다. 최소목표 이므로 더 많이 해야겠다라는 생각이 지금은 확고하다. 작은 것이라도 모든 공부한것을 기록해 두어야겠다.인간관계올해 최대 위안거리이다. 해가 가면 갈수록 나이를 먹으면 먹을수록 인간관계가 점점 좁아진다고들 한다.이점에 대해서 올해는 절대 아니었다 라고 말할 수 있다. 좋은 직장동료를 만나 퇴사한 지금까지 함께 개발에 대한 고민을 나눌 수 있는 좋은 친구같은 동생이 몇 생기고,정말 대단하다 싶은 정도의 분도 알게 되었고, 그전에 진행하던 스터디를 통해 만났던 사람들과도 좋은 관계를 유지하고 있다. 또한 새로 입사한 회사에서 좋은 팀원들을 만났다.(현재는 해체된상태) 이를통해 올해의 그나마 인간관계를 더 넓히고, 좋은 인맥을 얻었다는 것에 위안거리를 삼을 수 있을 것 같다.총평올해는 실패한 한해라고 생각이 들진 않는다. 그만큼 아픔도 많았지만 기쁨도 많았던 한해였다.물론 직업적인 부분을 따졌을때 자리를 잡지 못한 부분은 아쉽다.(현재 회사가 생존의 존폐위기)개발적인 목표들을 이루지 못하고, 나쁜 습관 같은 부분도 고치지 못하였다.하지만 그만큼 배우고 느끼고 경험한 것들이 많기에 올해가 나쁘지 않았다.그리고 올해를 통해 앞자리가 바뀌었다. 그만큼 책임감이 더생기고, 더많은 노력을 해야한다. 2018년은 부디 원하는걸 모두까지는 아니더라도 거의 이루는 한해가 되야한다.","categories":[{"name":"Column","slug":"Column","permalink":"https://tuhbm.github.io/categories/Column/"}],"tags":[{"name":"UI개발","slug":"UI개발","permalink":"https://tuhbm.github.io/tags/UI개발/"},{"name":"UI-developer","slug":"UI-developer","permalink":"https://tuhbm.github.io/tags/UI-developer/"},{"name":"웹퍼블리셔","slug":"웹퍼블리셔","permalink":"https://tuhbm.github.io/tags/웹퍼블리셔/"},{"name":"프론트엔드개발","slug":"프론트엔드개발","permalink":"https://tuhbm.github.io/tags/프론트엔드개발/"},{"name":"front-end-developer","slug":"front-end-developer","permalink":"https://tuhbm.github.io/tags/front-end-developer/"},{"name":"javascript","slug":"javascript","permalink":"https://tuhbm.github.io/tags/javascript/"},{"name":"gulp","slug":"gulp","permalink":"https://tuhbm.github.io/tags/gulp/"},{"name":"task-runner","slug":"task-runner","permalink":"https://tuhbm.github.io/tags/task-runner/"}]},{"title":"vue 알아보기 4편","slug":"vue4","date":"2017-09-20T05:13:27.000Z","updated":"2018-03-11T03:23:03.887Z","comments":true,"path":"2017/09/20/vue4/","link":"","permalink":"https://tuhbm.github.io/2017/09/20/vue4/","excerpt":"Vue프론트엔드 개발 공부를 위해 SPA페이지 제작을 위한 Javascript 프레임워크 중 Vue를 공부해보도록하겠습니다.Vue에 대한 설명 및 장단점은 추후 포스팅하도록 하고, 지금은 사용방법에 대해서만 포스팅을 하도록 하겠습니다. Vue.component우리는 SPA(single page application)을 제작할때 컴포넌트를 만들고 재사용하는 방법을 일반적으로 많이 사용합니다.그만큼 컴포넌트를 만드는 것이 중요합니다.이번에는 Vue를 이용해서 컴포넌트를 만드는 방법을 알아보겠습니다.기존의 방식과 같이 뷰 프레임워크를 연동 후 부터 진행을 해보겠습니다.","text":"Vue프론트엔드 개발 공부를 위해 SPA페이지 제작을 위한 Javascript 프레임워크 중 Vue를 공부해보도록하겠습니다.Vue에 대한 설명 및 장단점은 추후 포스팅하도록 하고, 지금은 사용방법에 대해서만 포스팅을 하도록 하겠습니다. Vue.component우리는 SPA(single page application)을 제작할때 컴포넌트를 만들고 재사용하는 방법을 일반적으로 많이 사용합니다.그만큼 컴포넌트를 만드는 것이 중요합니다.이번에는 Vue를 이용해서 컴포넌트를 만드는 방법을 알아보겠습니다.기존의 방식과 같이 뷰 프레임워크를 연동 후 부터 진행을 해보겠습니다.app.js파일을 살펴보겟습니다.컴포넌트를 만드는 가장 쉬운 방법은Vue.component(컴포넌트이름,리턴할객체)의 형태입니다.실제 만들어 보겠습니다.123456789101112131415161718192021222324252627Vue.component('greeting',&#123; template:'&lt;p&gt; 안녕하세요. 저는 &#123;&#123;name&#125;&#125;. &lt;button @click=\"changeName\"&gt;이름바꾸기&lt;/button&gt;&lt;/p&gt;', data:function()&#123; return &#123; name:'태균' &#125; &#125;, methods:&#123; changeName:function()&#123; this.name = '현석' &#125; &#125;&#125;);new Vue(&#123; el:'#app-one', data:&#123; &#125;, methods:&#123;&#125;, computed:&#123;&#125;&#125;);new Vue(&#123; el:'#app-two', data:&#123;&#125;, methods:&#123;&#125;, computed:&#123;&#125;&#125;); 이제 html에서 사용해보도록 하겠습니다.12345678&lt;div id=\"app-one\"&gt; &lt;h2&gt;Vue app one&lt;/h2&gt; &lt;greeting&gt;&lt;/greeting&gt;&lt;/div&gt;&lt;div id=\"app-two\"&gt; &lt;h2&gt;Vue app two&lt;/h2&gt; &lt;greeting&gt;&lt;/greeting&gt;&lt;/div&gt; 랜더링은 잘되었습니다.각각의 컴포넌트가 연결이 잘되었는지 확인해보겠습니다.클릭시 각각 이벤트가 진행되는 컴포는트가 완성되었음을 확인 할 수 있습니다. refsref는 한국어번역 vue을 살펴보면 ref는 엘리먼트 또는 자식 컴포넌트에 대한 참조를 등록하는데 사용합니다.참조는 부모 컴포넌트의 $refs 객체 아래에 등록됩니다.일반 DOM 엘리먼트에서 사용되는 경우 참조는 해당 엘리먼트입니다.하위 컴포넌트에서 사용되는 경우 참조는 컴포넌트 인스턴스 입니다. 이렇게 표현되어있습니다.쉽게말해 ref어트리뷰트 이용해 scope안에 있는 자식들은 참조하고, $refs를 통해 객체를 활용할 수 있다는 말입니다.실제 사용을 해보겠습니다.123456&lt;div id=\"app\"&gt; &lt;h2&gt;Refs&lt;/h2&gt; &lt;input type=\"text\" ref=\"input\"&gt; &lt;button @click=\"readRefs\"&gt;Submit&lt;/button&gt; &lt;p&gt;당신이 좋아하는 음식은 무엇인가? :&#123;&#123;output&#125;&#125;&lt;/p&gt;&lt;/div&gt; 123456789101112new Vue(&#123; el:'#app', data:&#123; output:'' &#125;, methods:&#123; readRefs:function()&#123; console.log(this.$refs); this.output = this.$refs.input.value; &#125; &#125;&#125;); 이제 input[type=text]에 글을 입력하면, 밑에 답변이 적히게 됩니다.그리고 콘솔의 영역을 살펴보도록 하겠습니다.보시면 우리가 원하는 결과물이 나오는것을 확인하실 수 있습니다.콘솔영역을 살펴보면 input이 찍히고 우리가 입력한 ‘새우’가 value값에 찍히는 것을 확인 할 수 있습니다.스코프내에 엘리먼트를 조정할수도 있습니다.1234567&lt;div id=\"app\"&gt; &lt;h2&gt;Refs&lt;/h2&gt; &lt;input type=\"text\" ref=\"input\"&gt; &lt;button @click=\"readRefs\"&gt;Submit&lt;/button&gt; &lt;p&gt;당신이 좋아하는 음식은 무엇인가? :&#123;&#123;output&#125;&#125;&lt;/p&gt; &lt;div ref=\"test\"&gt;Vue ref를 공부해보자.&lt;/div&gt;&lt;/div&gt; 123456789101112new Vue(&#123; el:'#app', data:&#123; output:'' &#125;, methods:&#123; readRefs:function()&#123; console.log(this.$refs.test.innerText); this.output = this.$refs.input.value; &#125; &#125;&#125;); 제대로 된 값이 console.log에 찍히는것을 확인 할 수 있습니다.이처럼 ref를 이용해 참조를 통해 간단한 값을 뽑아내거나 이벤트를 발생시키도록 합니다. vue-cli설치우리는 Vue를 이용한 프로젝트를 구성할때 하나하나 모든 설정을 해야합니다.하지만 이를 간단하게 줄일 수 있는 방법이 있습니다.NPM(Node Package Module)을 이용한 방법입니다.node를 이용한 방법으로 vue도 설치하고, 빌드도구 등의 작업등을 쉽게 할수 있습니다. 일반적으로 GUI(graphic user interface)를 이용하는 방법도 있겠지만,Window에서는 CMD창을Mac OS에서는 터미널을 이용하여 text를 입력하여 사용가능합니다.(node 및 vue가 설치되어있다는 가정하에 진행하겠습니다.) vue-cli를 설치하기위서는 우선 npm install -g vue-cli 명령어를 통해 설치합니다.그런 후 프로젝트를 생성합니다. vue init vue init template-name project-name 을 통해 프로젝트를 생성합니다. template-name설명 링크 를 통해 템플릿네임에 대해 알아보세요. vue init webpack-simple vuejs-playlist저는 이렇게 생성하였습니다. 프로젝트 생성 후에는 생성된 프로젝트 내에 package.json의 module을 인스톨해야합니다. npm install npm install 명령어를 입력하면그림과 같이 package.json의 기록되어있는 모듈이 설치됩니다.설치가 완료된 후 파일들을 살펴보겠습니다.기본 구조입니다.Vue는 기본으로 javascript는 ES6문법을 사용하므로, ES6문법을 ES5문법으로 변경하기위해 babel을 사용하므로 babel설정파일 그리고 웹팩 설정파일등등이 구성되어 있습니다. npm run dev현재 작업내용을 확인하기위해 live server를 띄우며 작업을 확인 할 수 있습니다. npm run dev 를 통해 확인할 수 있습니다. 이처럼 현재 기본 템플릿형태가 나오는 것을 확인 할 수 있습니다.이제 Vue를 이용해서 본인의 작업을 완성해보세요 오늘은 Vue.component refs vue-cli설치 vue init npm install npm run dev 에 대해 배웠습니다.Vue 공부를 통해 지속적인 포스팅 하도록 하겠습니다. 감사합니다.","categories":[{"name":"Javascript","slug":"Javascript","permalink":"https://tuhbm.github.io/categories/Javascript/"},{"name":"Vue","slug":"Javascript/Vue","permalink":"https://tuhbm.github.io/categories/Javascript/Vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://tuhbm.github.io/tags/vue/"},{"name":"vue.js","slug":"vue-js","permalink":"https://tuhbm.github.io/tags/vue-js/"},{"name":"vue.js2","slug":"vue-js2","permalink":"https://tuhbm.github.io/tags/vue-js2/"},{"name":"tutorial","slug":"tutorial","permalink":"https://tuhbm.github.io/tags/tutorial/"},{"name":"Vue.component","slug":"Vue-component","permalink":"https://tuhbm.github.io/tags/Vue-component/"},{"name":"refs","slug":"refs","permalink":"https://tuhbm.github.io/tags/refs/"},{"name":"vue-cli","slug":"vue-cli","permalink":"https://tuhbm.github.io/tags/vue-cli/"},{"name":"vue init","slug":"vue-init","permalink":"https://tuhbm.github.io/tags/vue-init/"},{"name":"npm install","slug":"npm-install","permalink":"https://tuhbm.github.io/tags/npm-install/"},{"name":"npm run dev","slug":"npm-run-dev","permalink":"https://tuhbm.github.io/tags/npm-run-dev/"}]},{"title":"vue 알아보기 3편","slug":"vue3","date":"2017-09-19T05:58:26.000Z","updated":"2018-03-11T03:23:03.892Z","comments":true,"path":"2017/09/19/vue3/","link":"","permalink":"https://tuhbm.github.io/2017/09/19/vue3/","excerpt":"Vue프론트엔드 개발 공부를 위해 SPA페이지 제작을 위한 Javascript 프레임워크 중 Vue를 공부해보도록하겠습니다.Vue에 대한 설명 및 장단점은 추후 포스팅하도록 하고, 지금은 사용방법에 대해서만 포스팅을 하도록 하겠습니다. computed계산된 속성을 바인딩할때 사용. computed 사용법123456new Vue(&#123; el:'#app', data:&#123;&#125;, methods:&#123;&#125;, computed:&#123;&#125;&#125;);","text":"Vue프론트엔드 개발 공부를 위해 SPA페이지 제작을 위한 Javascript 프레임워크 중 Vue를 공부해보도록하겠습니다.Vue에 대한 설명 및 장단점은 추후 포스팅하도록 하고, 지금은 사용방법에 대해서만 포스팅을 하도록 하겠습니다. computed계산된 속성을 바인딩할때 사용. computed 사용법123456new Vue(&#123; el:'#app', data:&#123;&#125;, methods:&#123;&#125;, computed:&#123;&#125;&#125;); 이처럼 computed의 메소드를 추가하여 사용할 수 있습니다. computed와 methods의 차이지난 1편 을 통해 함수를 methods의 메소드안에 입력한다고 배웠습니다.하지만 이번시간에 배우는 computed와의 차이는 무엇일까요?예를 들어 살펴보겠습니다. 먼저methods에 함수를 추가하여 입력해보겠습니다.123456&lt;button v-on:click=\"a++\"&gt;Add to A&lt;/button&gt;&lt;button v-on:click=\"b++\"&gt;Add to B&lt;/button&gt;&lt;p&gt;A - &#123;&#123; a &#125;&#125;&lt;/p&gt;&lt;p&gt;B - &#123;&#123; b &#125;&#125;&lt;/p&gt;&lt;p&gt;Age + A = &#123;&#123; addToA &#125;&#125;&lt;/p&gt;&lt;p&gt;Age + B = &#123;&#123; addToB &#125;&#125;&lt;/p&gt; html에 연결을 해보겠습니다.12345678910111213141516new Vue(&#123; el:'#app', data:&#123; age:29, a:0, b:0 &#125;, methods:&#123; addToA: function()&#123; return this.a + this.age &#125;, addToB: function()&#123; return this.b + this.age &#125; &#125;&#125;); 결과를 살펴보도록 하겠습니다.에러가 조금있지만데이터 a와 b의 값은 잘들어가 있습니다.함수값을 바인딩 했던 부분에 문제가 있습니다.하지만 data값을 바인딩한곳은 이벤트도 잘 일어나는 것을 확인할 수 있습니다.무엇이 문제일까요?이번에는 computed 메소드에 함수를 넣어보겠습니다.12345678910111213141516new Vue(&#123; el:'#app', data:&#123; age:29, a:0, b:0 &#125;, computed:&#123; addToA: function()&#123; return this.a + this.age &#125;, addToB: function()&#123; return this.b + this.age &#125; &#125;&#125;); 보시는 바와같이 계산이 된값이 랜더링 되는 모습을 보실수 있습니다.이벤트도 잘 작동됩니다.차이는 무엇일까요? 차이는 렌더링시 함수를 미리 계산해서 적용할수 있느냐 없느냐의 차이입니다.methods의 입력함 함수는 랜더링시 바로 본인을 계산하지 못한다는것인데요.반면 computed의 에 입력한 함수는 미리 계산을 해서 캐싱해둔다는것입니다. 한마디로 정리를 하면,“랜더링 시 methods는 계산을 하지못한다. 그러므로 계산된 속성을 캐싱해두는 computed를 사용해야한다.”라고 정리할 수 있습니다. v-if2편 을 통해 우리는 토글 이벤트를 만들어보았습니다.그때 방식은 class명을 추가 제거하는 방식으로 진행했습니다.하지만 이번에는 v-if 어트리뷰트를 통해 돔을 조작하는 방법을 사용해보겠습니다.123&lt;button @click=\"error = !error\"&gt;Toggle Error&lt;/button&gt;&lt;p v-if=\"error\"&gt;error&lt;/p&gt;&lt;p v-else=\"!error\"&gt;Success&lt;/p&gt; 123456new Vue(&#123; el:\"#app\", data:&#123; error:false &#125;&#125;); v-if를 통해 data의 error의 값을 true와 false값을 변경하는 형태입니다.v-if 뿐만아니라 v-else를 통해 data값에 따라 돔을 조작하는 방법입니다.(v-else=”!error”에 값을 넣어주었지만 비워놓아도 작동을 합니다.) v-showv-show를 이용해서도 이벤트를 발생시킬 수있습니다. 예를 들어보겠습니다. 1234&lt;button @click=\"error = !error\"&gt;Toggle Show Error&lt;/button&gt;&lt;button @click=\"success = !success\"&gt;Toggle Show Success&lt;/button&gt;&lt;p v-show=\"error\"&gt;show error :)&lt;/p&gt;&lt;p v-show=\"success\"&gt;show success :)&lt;/p&gt; 1234567new Vue(&#123; el:\"#app\", data:&#123; error:false, success:false &#125;&#125;); v-show를 통해 데이터에 값에 접근해 true &amp; false값을 확인하여 돔의 style중 display속성을 none과 block형태를 토글하는 것을 볼 수 있습니다. v-if와 v-show의 차이그렇다면 v-if와 v-show를 이용해 둘다 토글이벤트등을 발생시킬 수 있습니다.매우 자주 사용할 것입니다. display를 통해서 또는 dom조작을 통해서 컨텐츠를 표현하는 것은 텝, 메뉴 등등에서 매우 자주 사용하는 이벤트입니다. 그렇다면 차이는 무엇일까요?바로 v-show는 스타일(display)조작v-if는 돔자체를 생성하고 제거 하는 조작이정도의 차이입니다. 평소에 어떤 방법을 사용하느냐에 따라 렌더링이나 성능에 영향을 줄수 있으므로 잘판단해서 사용하는 냉철한 판단이 있어야겠죠? v-forvanilla js를 통해 우리는 데이터를 받아 랜더링 할때 주로 이런방법을 사용했습니다.123456789101112131415var data = &#123; ninjas:[ &#123;name:'Ryu',age:25&#125;, &#123;name:'Youshi',age:35&#125;, &#123;name:'Ken',age:55&#125; ]&#125;function write()&#123; var html = ''; for(var i =0; i &lt; data.ninjas.length; i++)&#123; html += '&lt;li&gt;'+data.ninjas[i].name+','+data.ninjas[i].age+'&lt;/li&gt;' &#125; console.log(html);&#125; 이러한 힘든 과정을 통해서 데이터를 바인딩해왔습니다. 그렇지만 우리는 Vue의 v-for어트리뷰트를 통해 쉽게 데이터를 바인딩 할 수 있습니다.예제를 통해 살펴보겠습니다. 먼저 데이터형태를 보겠습니다12345678910111213new Vue(&#123; el:'#app', data:&#123; characters:['Mario','luigi','Yoshi','Bowser'], ninjas:[ &#123;name:'Ryu',age:25&#125;, &#123;name:'Youshi',age:35&#125;, &#123;name:'Ken',age:55&#125; ] &#125;, methods:&#123;&#125;, computed:&#123;&#125;&#125;); 데이터 형태는 객체에 배열,객체에 배열에 객체를 또 key,value로 묶은 객체가 들어가 있는 형태 두가지로 준비했습니다.html에 랜더링 시켜보겠습니다.123456789&lt;ul&gt; &lt;!--&lt;li v-for=\"character in characters\"&gt;&#123;&#123;character&#125;&#125;&lt;/li&gt; 원래는 이렇게 사용--&gt; &lt;!-- &lt;li v-for=\"x in characters\"&gt;x&lt;/li&gt; 이렇게 변수 명을 바꿔서도 사용가능--&gt; &lt;li v-for=\"(x,index) in characters\"&gt;&#123;&#123;index&#125;&#125;.&#123;&#123;x&#125;&#125;&lt;/li&gt;&lt;!-- 이처럼 자동으로 인덱스도 계산이 가능 --&gt; &lt;/ul&gt; &lt;ul&gt; &lt;!--&lt;li v-for=\"ninja in ninjas\"&gt;&#123;&#123;ninja.name&#125;&#125; - &#123;&#123;ninja.age&#125;&#125;&lt;/li&gt;--&gt; &lt;li v-for=\"(ninja,index) in ninjas\"&gt;&#123;&#123;index&#125;&#125;.&#123;&#123;ninja.name&#125;&#125; - &#123;&#123;ninja.age&#125;&#125;&lt;/li&gt; &lt;/ul&gt; 결과를 보도록 하죠.이 처럼 똑똑한 우리 Vue!! 데이터를 ul&gt;li의 구조가 아닌 다른 형태로도 렌더링 시켜보겠습니다.특별한 태그에 바인딩 시키는것이아니라 단순 구조 반복이라면,template 이라는 가상 태그를 이용해서 바인딩이 가능합니다.데이터는 위의 것과 같은 것을 사용하겠습니다. 123456789&lt;template v-for=\"(ninja,index) in ninjas\"&gt; &lt;h3&gt;&#123;&#123;index&#125;&#125;.&#123;&#123;ninja.name&#125;&#125;&lt;/h3&gt; &lt;p&gt;&#123;&#123;ninja.age&#125;&#125;&lt;/p&gt;&lt;/template&gt;&lt;template v-for=\"ninja in ninjas\"&gt; &lt;div v-for=\"(val,key) in ninja\"&gt; &lt;p&gt;&#123;&#123;key&#125;&#125; - &#123;&#123;val&#125;&#125;&lt;/p&gt; &lt;/div&gt;&lt;/template&gt; 결과를 보겠습니다.이것처럼 특정 태그에 바인딩시키는 것이 아니면 template 가상태그를 사용하면 된다는 것 기억해주세요. 오늘은 computed computed 사용법 computed와 methods의 차이 v-if v-show v-if와 v-show의 차이 v-for 에 대해 배웠습니다.Vue 공부를 통해 지속적인 포스팅 하도록 하겠습니다. 감사합니다.","categories":[{"name":"Javascript","slug":"Javascript","permalink":"https://tuhbm.github.io/categories/Javascript/"},{"name":"Vue","slug":"Javascript/Vue","permalink":"https://tuhbm.github.io/categories/Javascript/Vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://tuhbm.github.io/tags/vue/"},{"name":"vue.js","slug":"vue-js","permalink":"https://tuhbm.github.io/tags/vue-js/"},{"name":"vue.js2","slug":"vue-js2","permalink":"https://tuhbm.github.io/tags/vue-js2/"},{"name":"tutorial","slug":"tutorial","permalink":"https://tuhbm.github.io/tags/tutorial/"},{"name":"methods","slug":"methods","permalink":"https://tuhbm.github.io/tags/methods/"},{"name":"computed","slug":"computed","permalink":"https://tuhbm.github.io/tags/computed/"},{"name":"v-if","slug":"v-if","permalink":"https://tuhbm.github.io/tags/v-if/"},{"name":"v-show","slug":"v-show","permalink":"https://tuhbm.github.io/tags/v-show/"},{"name":"v-for","slug":"v-for","permalink":"https://tuhbm.github.io/tags/v-for/"}]},{"title":"vue 알아보기 2편","slug":"vue2","date":"2017-09-18T08:02:20.000Z","updated":"2018-03-11T03:23:03.866Z","comments":true,"path":"2017/09/18/vue2/","link":"","permalink":"https://tuhbm.github.io/2017/09/18/vue2/","excerpt":"Vue프론트엔드 개발 공부를 위해 SPA페이지 제작을 위한 Javascript 프레임워크 중 Vue를 공부해보도록하겠습니다.Vue에 대한 설명 및 장단점은 추후 포스팅하도록 하고, 지금은 사용방법에 대해서만 포스팅을 하도록 하겠습니다. v-onv-on 어트리뷰트를 통해 이벤트를 발생시킬 수 있습니다.그리고약어 [ @ ] 를 통해 단축이 가능합니다.12&lt;button v-on:click.once=\"Function\"&gt;이벤트&lt;/button&gt;&lt;button @click.once=\"Function\"&gt;이벤트&lt;/button&gt;","text":"Vue프론트엔드 개발 공부를 위해 SPA페이지 제작을 위한 Javascript 프레임워크 중 Vue를 공부해보도록하겠습니다.Vue에 대한 설명 및 장단점은 추후 포스팅하도록 하고, 지금은 사용방법에 대해서만 포스팅을 하도록 하겠습니다. v-onv-on 어트리뷰트를 통해 이벤트를 발생시킬 수 있습니다.그리고약어 [ @ ] 를 통해 단축이 가능합니다.12&lt;button v-on:click.once=\"Function\"&gt;이벤트&lt;/button&gt;&lt;button @click.once=\"Function\"&gt;이벤트&lt;/button&gt; keyboard event123&lt;input type=\"text\" v-on:keyup=\"logName()\"&gt;&lt;!-- keyup 이벤트가 발생할때마다 logName 함수실행 --&gt;&lt;input type=\"text\" v-on:keyup.enter=\"logName()\"&gt;&lt;!-- enter를 눌렀을때마다 logName 함수실행 --&gt;&lt;input type=\"text\" v-on:keyup.alt,enter=\"logName()\"&gt;&lt;!-- alt키와 enter를 눌렀을때마다 logName 함수실행 --&gt; mouse eventmousemove키보드 이벤트와 마찬가지로 마우스 이벤트도 가능합니다.1&lt;div id=\"canvas\" v-on:mousemove=\"updataXY\"&gt;&#123;&#123;x&#125;&#125;,&#123;&#123;y&#125;&#125;&lt;/div&gt; 선언 후12345678910111213new Vue(&#123; el:'#app', data:&#123; x:0, y:0 &#125;, methods:&#123; updataXY:function(event)&#123; this.x = event.offsetX; this.y = event.offsetY; &#125; &#125;&#125;); 이렇게 마우스의 현재값(offset)값을 알려주는 이벤트도 발생시킬 수 있습니다. click1&lt;button v-on:click=\"minus(1)\"&gt;1년빼기&lt;/button&gt; dblclick12&lt;button v-on:dblclick=\"minus(10)\"&gt;10년빼기&lt;/button&gt;&lt;!-- 클릭이벤트 앞에 dbl을 붙여주므로써 더블클릭시 이벤트가 발생하도록 할수있다 --&gt;&lt;button @dblclick=\"add(10)\"&gt;10년더하기&lt;/button&gt; once1&lt;button @click.once=\"add(1)\"&gt;1년더하기&lt;/button&gt; &lt;!-- once를 통해 한번만 실행되게 할 수 있다 --&gt; preventa태그 클릭시 링크되는기능을 막아줄 수 있다.1e.preventDefault(); 보통 우리는 a태그시 링크되는것을 막기위해서 위와같은 방법을 사용했었다. 하지만 Vue에서는 prevent를 통해 이를 수행 할 수 있다.1&lt;a v-on:click.prevent=\"click()\" href=\"https://tuhbm.github.io\"&gt;블로그 바로가기&lt;/a&gt; 를 html에서 설정할 수 있다는것이다. 더많은 v-on 한국어 설명은 링크를 통해 확인 v-bind1편 에서도 잠시 소개해 드린 v-bind 어트리뷰트는 동적으로 하나 이상의 컴포넌트 속성 또는 표현식을 바인딩 합니다.클래스나 스타일을 넣을때도 많이 사용됩니다.그리고약어 [ : ] 를 통해서 줄일 수도 있습니다.예를 들어1234&lt;div v-bind:class=\"className\"&gt;&lt;/div&gt;&lt;div :class=\"className\"&gt;&lt;/div&gt;&lt;div v-bind:style=\"display:none\"&gt;&lt;/div&gt;&lt;div :style=\"display:none\"&gt;&lt;/div&gt; 이런식으로 사용이 가능합니다. class binding클래스를 바인딩 할때 아래와같은 표현도 가능합니다.12&lt;div v-bind:class=\"&#123;red:true, blue:true&#125;\"&gt;&lt;/div&gt;&lt;div v-bind:class=\"&#123;red:true, blue:false&#125;\"&gt;&lt;/div&gt; 이렇게 표현되는것을 보실 수 있습니다.이를통해 토글이벤트도 발생시킬수 있습니다. toggle event123&lt;div v-on:click=\"available = !available\" v-bind:class=\"&#123;available:available&#125;\"&gt; &lt;span&gt;box&lt;/span&gt;&lt;/div&gt; 12345678910span&#123; background:red; display:inline-block; padding:10px; color:#fff; margin:10px 0;&#125;.available span&#123; background:green;&#125; 1234567new Vue(&#123; el:'#app', data:&#123; available: false, nearby: false &#125;&#125;); v-modelv-model은 2way binding에 적합한 어트리뷰트입니다.예를 들어보겠습니다.123&lt;label for=\"\"&gt;Name:&lt;/label&gt;&lt;input type=\"text\" v-model=\"name\"&gt;&lt;!-- v-model 어트리뷰트를 이용하면 데이터의 키에 맞게 설정됨 --&gt;&lt;span&gt;&#123;&#123;name&#125;&#125;&lt;/span&gt; 오늘은 v-on keyboard event mouse event v-bind class binding toggle event v-model 에 대해 배웠습니다.Vue 공부를 통해 지속적인 포스팅 하도록 하겠습니다. 감사합니다.","categories":[{"name":"Javascript","slug":"Javascript","permalink":"https://tuhbm.github.io/categories/Javascript/"},{"name":"Vue","slug":"Javascript/Vue","permalink":"https://tuhbm.github.io/categories/Javascript/Vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://tuhbm.github.io/tags/vue/"},{"name":"vue.js","slug":"vue-js","permalink":"https://tuhbm.github.io/tags/vue-js/"},{"name":"vue.js2","slug":"vue-js2","permalink":"https://tuhbm.github.io/tags/vue-js2/"},{"name":"tutorial","slug":"tutorial","permalink":"https://tuhbm.github.io/tags/tutorial/"},{"name":"v-bind","slug":"v-bind","permalink":"https://tuhbm.github.io/tags/v-bind/"},{"name":"v-on","slug":"v-on","permalink":"https://tuhbm.github.io/tags/v-on/"},{"name":"v-model","slug":"v-model","permalink":"https://tuhbm.github.io/tags/v-model/"}]},{"title":"vue 알아보기 1편","slug":"vue1","date":"2017-09-15T03:49:08.000Z","updated":"2018-03-11T03:23:03.905Z","comments":true,"path":"2017/09/15/vue1/","link":"","permalink":"https://tuhbm.github.io/2017/09/15/vue1/","excerpt":"Vue프론트엔드 개발 공부를 위해 SPA페이지 제작을 위한 Javascript 프레임워크 중 Vue를 공부해보도록하겠습니다.Vue에 대한 설명 및 장단점은 추후 포스팅하도록 하고, 지금은 사용방법에 대해서만 포스팅을 하도록 하겠습니다. Vue 시작하기Vue도 다른 프레임워크와 같이 npm 모듈을 이용해 설치해서 사용할 수 있습니다.1&lt;script src=\"node_modules/vue/dist/vue.min.js\"&gt;&lt;/script&gt;","text":"Vue프론트엔드 개발 공부를 위해 SPA페이지 제작을 위한 Javascript 프레임워크 중 Vue를 공부해보도록하겠습니다.Vue에 대한 설명 및 장단점은 추후 포스팅하도록 하고, 지금은 사용방법에 대해서만 포스팅을 하도록 하겠습니다. Vue 시작하기Vue도 다른 프레임워크와 같이 npm 모듈을 이용해 설치해서 사용할 수 있습니다.1&lt;script src=\"node_modules/vue/dist/vue.min.js\"&gt;&lt;/script&gt; 이렇게 스크립트 파일로 준비해 불러오면 Vue를 사용할 준비가 되었습니다. Vue 텍스트 바인딩1&lt;div id=\"app\"&gt;&lt;/div&gt; 이렇게 아이디 또는 클래스(클래스는 스타일잡을때만 사용하고, 큰단위이므로 아이디를 사용하길 권장)로 선택자를 만들어놓고 123456new Vue(&#123; el:'#app', data:&#123; name:'태균' &#125;&#125;); el키값을 통해 Vue의 선택자를 지정해줍니다. 123&lt;div id=\"app\"&gt; &lt;h1&gt;Name:&#123;&#123;name&#125;&#125;&lt;/h1&gt;&lt;/div&gt; 이렇게 data안에 있는 name 객체를 바인딩 합니다. 결과를 어떨까요? 이렇게 바인딩이 되는 결과를 확인 할 수 있습니다. Vue 함수 바인딩이번에는 함수를 바인딩 해보겠습니다.123&lt;div id=\"app\"&gt; &lt;h1&gt;&#123;&#123;greet()&#125;&#125;&lt;/h1&gt;&lt;/div&gt; 이렇게 greet라는 함수실행문을 바인딩하고,1234567891011new Vue(&#123; el:'#app', data:&#123; name:'태균' &#125;, methods:&#123; greet: function()&#123; return '안녕하세요' &#125; &#125;&#125;); Vue의 methods라는 객체를 통해 바인딩 할 함수를 넣습니다.결과를 볼까요?이처럼 함수가 바인딩 된 결과를 확인할 수 있습니다. 그렇다면 함수의 매개변수도 사용이 가능합니다. 1234567891011new Vue(&#123; el:'#app', data:&#123; name:'태균' &#125;, methods:&#123; greet: function (time) &#123; return '안녕하세요 좋은 ' + time + '입니다.'; &#125; &#125;&#125;); 1&lt;h1&gt;&#123;&#123;greet('밤')&#125;&#125;&lt;/h1&gt; 이렇게 입력을 해보겠습니다. 역시 매개변수 사용도 가능하다는 것을 확인해보았습니다. v-bind보통 템플릿에 데이터를 받아와 태그에 넣고 바인등을 합니다.Vue 역시 그러합니다. 태그 바인딩에 대해 알아보겟습니다.예를 들어 저의 블로그인 https://tuhbm.github.io를 태그에 넣고 추가해보겠습니다.1234567new Vue(&#123; el:'#app', data:&#123; name:'태균' website:'https://tuhbm.github.io' &#125;&#125;); 이렇게 데이터를 넣고1&lt;a href=\"&#123;&#123;website&#125;&#125;\"&gt;&lt;/a&gt;&lt;!-- 이렇게 하면 당연히 텍스트만 연결이 됩니다.--&gt; 그렇다면 어떻게 넣어야할까요? 바로 여기서 사용할것은 바로 Vue만의 특이한 방법인 v-bind라는 어트리뷰트입니다.1&lt;a v-bind:href=\"&#123;&#123;website&#125;&#125;\"&gt;블로그바로가기&lt;/a&gt; 이런식으로 연결을해보면 올바르게 나오는 것을 확인 할 수 있습니다. v-html태그 자체를 지정해서 넣는 방법도 있습니다.1234567new Vue(&#123; el:'#app', data:&#123; name:'태균' websiteTag:'&lt;a href=\"https://tuhbm.github.io\"&gt;블로그바로가기&lt;/a&gt;'//시멘틱한 객체이름을 지어줍니다. &#125;&#125;); 여기선 태그를 바로 바인딩 하므로 v-html이란 어트리뷰트를 사용합니다.1&lt;p v-html=\"websiteTag\"&gt;&lt;/p&gt; 결과는? 오늘은 vue를 시작하는방법 텍스트 바인딩 함수 바인딩 v-bind v-html 에 대해 배웠습니다.Vue 공부를 통해 지속적인 포스팅 하도록 하겠습니다. 감사합니다.","categories":[{"name":"Javascript","slug":"Javascript","permalink":"https://tuhbm.github.io/categories/Javascript/"},{"name":"Vue","slug":"Javascript/Vue","permalink":"https://tuhbm.github.io/categories/Javascript/Vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://tuhbm.github.io/tags/vue/"},{"name":"vue.js","slug":"vue-js","permalink":"https://tuhbm.github.io/tags/vue-js/"},{"name":"vue.js2","slug":"vue-js2","permalink":"https://tuhbm.github.io/tags/vue-js2/"},{"name":"tutorial","slug":"tutorial","permalink":"https://tuhbm.github.io/tags/tutorial/"},{"name":"v-bind","slug":"v-bind","permalink":"https://tuhbm.github.io/tags/v-bind/"},{"name":"v-html","slug":"v-html","permalink":"https://tuhbm.github.io/tags/v-html/"},{"name":"vue를 시작하는방법","slug":"vue를-시작하는방법","permalink":"https://tuhbm.github.io/tags/vue를-시작하는방법/"},{"name":"텍스트 바인딩","slug":"텍스트-바인딩","permalink":"https://tuhbm.github.io/tags/텍스트-바인딩/"},{"name":"함수 바인딩","slug":"함수-바인딩","permalink":"https://tuhbm.github.io/tags/함수-바인딩/"}]},{"title":"OSI7","slug":"OSI7","date":"2017-09-08T04:49:47.000Z","updated":"2018-03-11T03:23:03.876Z","comments":true,"path":"2017/09/08/OSI7/","link":"","permalink":"https://tuhbm.github.io/2017/09/08/OSI7/","excerpt":"용어정리이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. OSI 7계층면접을 보다보면, OSI 7계층에 대해 물어보는 곳이 꽤나있다.그렇게 접하게 된 OSI 7계층에 대해 네트워크 데이터 통신 책을 보며 간략히 정리를 해보았다.","text":"용어정리이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. OSI 7계층면접을 보다보면, OSI 7계층에 대해 물어보는 곳이 꽤나있다.그렇게 접하게 된 OSI 7계층에 대해 네트워크 데이터 통신 책을 보며 간략히 정리를 해보았다. OSI 7계층은국제표준화 단체 ISO(International Standard Organization)에서 정한 네트워크 연결 시스템이다네트워크에 연결된 호스트들은 7개층으로 모듈화된 통신기능을 갖추어야한다.먼저 HTTP프로토콜을 이용하여, 데이터를 요청하게되면, 응용계층부터 위에서 밑으로 차례로 물리계층까지 전달된다.또 데이터를 받는 과정은 반대로 물리계층부터 응용계층까지 순차적으로 밑에서부터 위로 전달된다.OSI7계층은 그림처럼 응용계층 표현계층 세션계층 전송계층 네트워크계층 데이터링크계층 물리계층이렇게 7개의 계층으로 나누어져 있습니다. 이제부터 각각 계층별로 하는 역할에 대해 알아보겠다. 응용계층응용계층은 최상위 계층으로 응용환경에서 공통적으로 필요한 기능을 다룹니다.응용환경은 범위가 매우 방대하지만 예를 들면 FTP등이 있습니다.. 표현계층계층5까지(세션계층~물리계층)까지는 데이터 전송에 관한 내용을 다룹니다.하지만 표현계층은 데이터의 의미와 표현방법을 처리합니다. 통신 양단에서 서로 이해할 수 있는 표준방식으로 데이터를 코딩하는 문제를 다룹니다. 호스트의 데이터 표현방법이 서로 다를수 있는데, 이러한 데이터를 이해할 수 있도록 적절하게 변환합니다.또 보안시 중요시 되고 있는 데이터를 암소화하는 기술,영상정보같은 대용량의 데이터크기를 압축하는 기능도 표현계층에서 처리합니다. 세션계층세션계층의 기능은 전송계층과 매우 유사합니다. 하지만 사용자가 원격파일을 전송하거나 원격 로그인등과 같은 상위적 연결개념인 세션기능을 제공하는 부분입니다.또한 송수신 호스트 사이 대화 제어등의 동작을 제어하기 위한 토큰제어,그리고 일시적인 전송장애를 해결하는 동기화기능을 제공합니다. 전송계층전송계층은 송수신 프로세스간 직접연결하는 통신기능을 합니다.전송계층의 하위계층(네트워크계층&amp;데이터링크계층)은 호스트와 호스트사이에 데이터 전송과정에서 발생하는 문제들을 다루지만,전송계층은 컴퓨터내부의 구축되는 통신당사자인 프로세스사이의 통신문제를 다룹니다.또한 사용자의 서비스 요구유형에 대한 고려, 전송 오류율, 전송속도등에대한 흐름제어기능도 제공합니다. 네트워크계층송신호스트가 전송한 데이터가 어떤경로를 통해 수신 호스트에 전달되는지를 결정하는 라우팅 문제를 다룹니다.라우팅이란 간단하게 표현하면, 데이터가 지나갈 경로를 선택해서 이동하는것을 말합니다.(경로설정)네트워크 계층에서의 전송데이터를 패킷이라 부르며,네트워크를 이용해 지나치게 많은 패킷이 전송되면, 전송속도가 떨어질수있으므로, 이를 제어하는 혼잡제어 기능도 담당합니다. 데이터 링크 계층데이터의 물리적 전송 오류를 해결합니다.상위의 네트워크 계층에 신뢰성 있는 패킷전송을 보장하여, 전송오류에 대한 부담을 줄여주고, 두 호스트간에 일대일로 직접 연결된 환경에서만 데이터를 전송합니다.이때 전송되는 데이터를 프레임이라고 부릅니다.프레임헤더에 표시되는 송수신 호스트 정보에는 LAN카드에 내장된 송수신 호스트의 MAC주소가 기록됩니다.또한 송수신 호스트사이의 전송속도 차이를 고려한 흐름제어기능도 제공합니다.그리고 물리적 오류를 감지하는 기능을 담당하며, 오류(데이터 분실 or 내용의 파손)를 감지하면 송신자가 원래데이터를 재전송으로 일반적으로 처리합니다. 물리계층물리적인 인터페이스에 관한 사항을 기술합니다.물리계층은 하드웨어 시스템으로 구현되고, 계층2 이상(응용계층~데이터링크계층)은 소프트웨어적으로 구현됩니다.물리계층에서 다루는 전송 매체의 특성은 데이터의 전송속도, 송수신 호스트사이의 클록의 동기화 방법, 물리적인 연결 형태등이 있습니다. 이처럼 네트워크 통신과정에서는 HTTP프로토콜을 이용하여 HTTP헤더에 정보를 통해, 데이터를 송수신할때 OSI7계층을 통해 데이터가 전송됨을 알 수 있다.밑에사진 HTTP프로토콜의 HTTP헤더 예시이미지 입니다.","categories":[{"name":"용어정리","slug":"용어정리","permalink":"https://tuhbm.github.io/categories/용어정리/"}],"tags":[{"name":"Component","slug":"Component","permalink":"https://tuhbm.github.io/tags/Component/"},{"name":"컴포넌트","slug":"컴포넌트","permalink":"https://tuhbm.github.io/tags/컴포넌트/"}]},{"title":"Component","slug":"component","date":"2017-09-06T09:04:01.000Z","updated":"2018-03-11T03:20:48.859Z","comments":true,"path":"2017/09/06/component/","link":"","permalink":"https://tuhbm.github.io/2017/09/06/component/","excerpt":"용어정리이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. 컴포넌트란 무엇인가?쉬운듯 하나 어려운 IT언어…금일은 컴포넌트단위.. 컴포넌트수정..등 컴포넌트에 대해 알아보겠습니다.","text":"용어정리이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. 컴포넌트란 무엇인가?쉬운듯 하나 어려운 IT언어…금일은 컴포넌트단위.. 컴포넌트수정..등 컴포넌트에 대해 알아보겠습니다. Component(컴포넌트)란 무엇인가?위키에서 검색을 하면 한국어로 구성요소라고 정의한다.기계적으로 봤을때 우리가 사용하는 휴대폰을 예로 들면휴대폰의 구성요소인 배터리는 하나의 컴포넌트이다.다시말에 어떤 기계나 프로그맹을 구성하는 부품정도라고 생각하면 될 것이다. 그렇다면 우리가 만드는 소프트웨어 즉 프로그래밍에서는 컴포넌트를 어떻게 사용하고 있을까? 개발자들의 컴포넌트사용우리 개발자들의 숙명 좋은 코드란 무엇일까?많은 좋은 코드들이 있겠지만, 프론트엔드개발자로써 좋은 코드의 요건중 하나는재사용이 가능한 코드일 것이다. html, css를 이용해서 텝리스트를 만든다고 가정을해보자!텝에 디자인만 조금 바뀐다면 어떻게 작업을 할 것인가?처음부터 다 다시만들것인가?여기서 좋은 개발자와 그냥 그러한 개발자가 나누어질것이다.좋은개발자라면 기존에 있는 코드에 부모의 클래스나 클래스를 추가하는 방법으로기본적으로 만들어놓은 텝을 활용할것이다. 이렇듯 기존에 있는 구성요소를 재활용 할 수 있도록 기본 컴포넌트를 잘 구성하는것이 좋은 개발의 한단계일 것 입니다. 프론트엔드개발에서의 컴포넌트 사용프론트엔드개발과정에서도 컴포넌트 단위로 코딩을 하는 경우가 많다.semantic-ui위 사이트는 우리가 원하는 컴포넌트를 만들어 공개해둔 사이트 입니다.기본적인 semantic-ui 모듈을 설치하고 가이드에 맞는 class명만 입력을 하면 사용하고자하는 컴포넌트로 변경되는 형태이다. 최근에 SPA(single page application)에서도 컴포넌트 단위 코딩을 하는 경우가 많다.이전에 말해던 semantic-ui 페이지는 React의 컴포넌트를 만든 페이지도 구성하고 있다.react semantic-ui 이처럼 컴포넌트를 잘 활용하는 것만으로 개발을 효율적으로 할 수 있다.","categories":[{"name":"용어정리","slug":"용어정리","permalink":"https://tuhbm.github.io/categories/용어정리/"}],"tags":[{"name":"Component","slug":"Component","permalink":"https://tuhbm.github.io/tags/Component/"},{"name":"컴포넌트","slug":"컴포넌트","permalink":"https://tuhbm.github.io/tags/컴포넌트/"}]},{"title":"doctype이란 무엇인가?","slug":"doctype","date":"2017-08-21T08:03:11.000Z","updated":"2018-03-11T03:23:03.872Z","comments":true,"path":"2017/08/21/doctype/","link":"","permalink":"https://tuhbm.github.io/2017/08/21/doctype/","excerpt":"doctype이란 무엇인가?DOCTYPE이란 무엇인가. 흔히들 줄여말해 DTD라고 불리운다.DTD는 Document Type Definition의 약자이다. 즉, 문서형식을 정의해주는 것이다.HTML이 어떤 버전으로 작성되었는지 미리 선언해,웹브라우저가 내용을 올바로 표시할 수 있도록 해주는 것이 DTD입니다.","text":"doctype이란 무엇인가?DOCTYPE이란 무엇인가. 흔히들 줄여말해 DTD라고 불리운다.DTD는 Document Type Definition의 약자이다. 즉, 문서형식을 정의해주는 것이다.HTML이 어떤 버전으로 작성되었는지 미리 선언해,웹브라우저가 내용을 올바로 표시할 수 있도록 해주는 것이 DTD입니다. Strict DTD(엄격) 가장 표준이 되는 DTD입니다. 확장된 어트리뷰트를 허용하지 않습니다. 배경색 , 글자색등의 일정한 조건에 따른 어트리뷰트(bgcolor 라던가 font태그의 color속성)을 인정하지 않습니다. mhtml(mobile html)에 최적 Transitional DTD(호환) 일반적으로 가장 많이 쓰이는 DTD입니다. 확장된 어트리뷰트를 호환합니다. 각 브라우져에 따른 DTD를 호환합니다. Strict보다 로딩속도는 느립니다. Strict보다 표준안에 가깝지는 않습니다. Frameset DTD(복합) 프레임셋을 만들때 사용하는 DTD입니다. 확장 및 프레임에 사용가능한 모든 내용을 포함합니다. html 4.01 Frameset.dtd 와 동일합니다. HTML4.01의 Strict DTD(엄격)1&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"&gt; 엄격한 HTML4.01을 따르며, font와 같은 사용이 금지된 요소 등과 frameset 을 사용할 수 없습니다. HTML4.01의 Transitional DTD(호환)1&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt; font와 같은 사용이 금지된 요소 등을 사용할 수 있으나, frameset 을 사용할 수 없습니다. HTML4.01의 Frameset DTD1&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\" \"http://www.w3.org/TR/html4/frameset.dtd\"&gt; Transitional과 같으며 frameset 을 사용할 수 있습니다. XHTML1.0의 Strict DTD(엄격)1&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"&gt; 엄격한 XHTML1.0을 따르며, font와 같은 사용이 금지된 요소 등과 frameset 을 사용할 수 없습니다. 또한, XML의 문법 사용에 맞아야 합니다. XHTML1.0의 Transitional DTD(호환)1&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt; font와 같은 사용이 금지된 요소 등을 사용할 수 있으나, frameset 을 사용할 수 없습니다. 또한, XML의 문법 사용에 맞아야 합니다. XHTML1.0의 Frameset DTD1&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\"&gt; Transitional과 같으며 frameset 을 사용할 수 있습니다. XHTML1.1 DTD1&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\"&gt; XHTML 1.0 Strict과 같으나, 루비(Ruby)와 같은 모듈의 사용을 할 수 있게 합니다. HTML5 DTD1&lt;!DOCTYPE html&gt; HTML5를 따릅니다. HTML과 XHTML의 차이 HTML DTD 종류의 선택 과거에서 현재까지 4.01과 Transitional을 많이 사용했으며, 최근의 대부분은 xml과 호환이 되는 XHTML 1.0의 Transitional을 많이 사용합니다. 최근에는 HTML5는 하위를 지원하며, 간략해졌기에 편의상 HTML5의 DTD로 즐겨 사용합니다. 표준모드와 쿼크모드 브라우저가 HTML문서를 처리를 할 경우, HTML DTD가 있으면 그에 맞는 W3C에서 정의한 방식에 따라 처리를 합니다. 이를 표준모드라고 하며, 그렇지 않은 경우를 쿼크모드라고 합니다.쿼크모드에서는 브라우저 회사마다 정의된 방식에 따르며, 그 결과에 차이를 보입니다. 대표적으로 박스모델에서 폭(width)과 높이(height)의 여백처리는 IE가 W3C의 표준과 달리 처리하기에 다른 결과를 보입니다.그러하기에 HTML DTD를 꼭 명시하여, 표준모드로 브러우저가 처리할 수 있게 해야 합니다.이것이 웹표준을 위한 첫 시작이라 봅니다.","categories":[{"name":"HTML","slug":"HTML","permalink":"https://tuhbm.github.io/categories/HTML/"}],"tags":[{"name":"html","slug":"html","permalink":"https://tuhbm.github.io/tags/html/"},{"name":"DTD","slug":"DTD","permalink":"https://tuhbm.github.io/tags/DTD/"},{"name":"html doctype","slug":"html-doctype","permalink":"https://tuhbm.github.io/tags/html-doctype/"},{"name":"doc","slug":"doc","permalink":"https://tuhbm.github.io/tags/doc/"}]},{"title":"자바스트립트 함수 정리 1편","slug":"function1","date":"2017-08-17T12:50:26.000Z","updated":"2018-03-13T16:48:39.499Z","comments":true,"path":"2017/08/17/function1/","link":"","permalink":"https://tuhbm.github.io/2017/08/17/function1/","excerpt":"함수정리&gt; 사용법편함수란 무엇일까요?우리는 중학교를 나왔다면, 이미 들어봤을것입니다.간단한 함수를 보며 살펴 보겠습니다. y = f(x)","text":"함수정리&gt; 사용법편함수란 무엇일까요?우리는 중학교를 나왔다면, 이미 들어봤을것입니다.간단한 함수를 보며 살펴 보겠습니다. y = f(x)중학교 교과에서 보아왔던 간단한 함수입니다.x는 정의역y는 치역으로x라는 정의된 값을 함수에 넣으면, y라는 치역값이 나오는것입니다.이러한 함수를 자바스크립트에서도 사용하고 있습니다. 자바스크립트에서 함수는 여러 방법으로 사용될 수 있습니다. 1. 함수 표현식123var 식별자 = function()&#123; //이곳에 함수내 처리할 식을 적어주세요.&#125; 이런식으로 식별자에 함수를 대입하는 것이라고 볼 수 있습니다.식별자에 값을 대입하는 것 입니다.“값을 대입하는것인대, 왜 함수를 넣는나요..?”함수는 값입니다.우리는 함수는 치역(y)라는 값을 배출합니다.그러므로 함수는 값으로 볼 수 있습니다. 1234var practice = function(num)&#123; return num;&#125;practice(5); //5 위함수를 예로 들어보면 5를 배출하는것으로 볼 수 있습니다. 2. 함수 선언문123function 식별자()&#123; //이곳에 함수내 처리할 식을 적어주세요.&#125; 이런식으로 함수를 선언 하는 것입니다.함수표현식과는 다르게 함수를 대입하는것이 아니라 그차제가 함수인 것 입니다.1234function practice2(num)&#123; return num;&#125;practice2(1) //1 이처럼 1을 리턴 하는것을 볼 수 있습니다.“음…그럼 함수는 값이라고 했으니 매개변수(parameter)에 함수를 넣어도 되나요?” “네 됩니다. 함수는 값이니까요.” 예를 들어보겠습니다.12345678var practice = function(num)&#123; return num;&#125;function practice2(num)&#123; return num;&#125;///함수 표현식으로 만든 함수에 num(parameter)에 함수를 넣으면practice(practice2(5)); ///5 이처럼 매개변수(parameter)값으로 함수를 넣어도 잘 실행이 되는것을 볼 수 있습니다. 3. 생성자 함수생성자 함수는 어렵습니다.생성자 함수를 만들고,새로운 식별자에 생성자 함수를 대입하여,반복되는 함수를 줄이는 방법, 그리고12345678910var Person = function(name) &#123; this.name = name; this.introduce = function() &#123; return \"Hi, my name is \" + this.name; &#125;;&#125;;var ktk = new Person('ktk');var jhk = new Person('jhk');console.log(ktk.introduce()); // Hi, my name is ktkconsole.log(jhk.introduce()); // Hi, my name is jhk 예제에서 Person은 생성자 함수이다.이처럼 함수는 반복될 수 있는 구조를 줄이기 위해 생성자 함수를 사용합니다. 마무리함수사용법에 대해 포스팅을 해보았는데요.함수는 값이다.함수는 반복을 줄이기위해 사용한다.이외에도 함수를 사용하는 이유는 다음번기회에 포스팅하겠습니다. 오늘의 포스팅을 마치겠습니다.","categories":[{"name":"Javascript","slug":"Javascript","permalink":"https://tuhbm.github.io/categories/Javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://tuhbm.github.io/tags/javascript/"},{"name":"function","slug":"function","permalink":"https://tuhbm.github.io/tags/function/"},{"name":"함수","slug":"함수","permalink":"https://tuhbm.github.io/tags/함수/"},{"name":"함수표현식","slug":"함수표현식","permalink":"https://tuhbm.github.io/tags/함수표현식/"},{"name":"함수선언문","slug":"함수선언문","permalink":"https://tuhbm.github.io/tags/함수선언문/"},{"name":"생성자함수","slug":"생성자함수","permalink":"https://tuhbm.github.io/tags/생성자함수/"},{"name":"new","slug":"new","permalink":"https://tuhbm.github.io/tags/new/"},{"name":"javascript function","slug":"javascript-function","permalink":"https://tuhbm.github.io/tags/javascript-function/"}]},{"title":"Image Compressor","slug":"image-compressor","date":"2017-08-16T07:17:26.000Z","updated":"2018-03-11T03:23:03.896Z","comments":true,"path":"2017/08/16/image-compressor/","link":"","permalink":"https://tuhbm.github.io/2017/08/16/image-compressor/","excerpt":"이미지 압축지난번 랜더링 포스팅에 있어 클라이언트가 서버에 요청을 줄이는 것이 가장 효율적인 렌더링을 하는 방법이라는 것을 포스팅했습니다.지난포스팅 1편 다시보기지난포스팅 2편 다시보기 랜더링에 있어 요청을 줄이는 것 만큼 중요한것이 있다.바로 이미지","text":"이미지 압축지난번 랜더링 포스팅에 있어 클라이언트가 서버에 요청을 줄이는 것이 가장 효율적인 렌더링을 하는 방법이라는 것을 포스팅했습니다.지난포스팅 1편 다시보기지난포스팅 2편 다시보기 랜더링에 있어 요청을 줄이는 것 만큼 중요한것이 있다.바로 이미지 우리가 입력한 코드들은 문자이므로 코드용량 굉장히 작은 크기이다.하지만 이미지는 굉장히 다양하게도 큰용량을 차지한다.많은 컬러 또 크기에 따라 용량차이는 천차만별이다. 이러한 이미지는 랜더링에도 굉장히 많은 영향을 미친다.그렇기때문에 많은 회사들에서는 요청을 줄이기위해 스트라이프 이미지를 만들고,스트라이트만들기 웹사이트그 후에 압축을 한다.압축!!! 압축은 말그래로 용량을 줄이는 것 입니다.하지만 압축은 이미지를 손상시키지 않는 선에서 압축을 해야하는데요.압축을 빌드툴을 이용해서 하는 방법도 있지만, 웹사이트를 통해 압축할 수 있습니다.지금 부터 소개해드리겠습니다. 직접 예시를 들어 설명을 해보겠습니다.오늘의 예제이미지가로 - 3720px세로 - 2138px용량 - 7.4MB의 이미지 파일입니다.의 구글 지도 이미지 입니다. 1번. compressjpegjpg파일과 png 그리고 pdf 및 밑에 보면 gif까지 압축할수 있는 사이트입니다.실험을 통해 얼마나 압축이 되는지 확인해보겠습니다.보는바와 같이 72% 압축으로 용량을 2.1MB로 줄였습니다.보시는바와같이 파일이름에 -min.확장자명 이 자동으로 붙습니다.이사이트는 최근까지 제가 가장 많이 사용하던 사이트입니다. 2번. iloveimg이미지를 압축 및 확장자 변환 및 사이즈 조절까지 가능한 사이트입니다.실험을 통해 얼마나 압축이 되는지 확인해보겠습니다.보는바와 같이 74% 압축으로 용량을 1.94MB로 줄였습니다.보시는바와같이 파일이름에 -iloveimg-compressed.확장자명 이 자동으로 붙습니다. 3번. imagesmallerjpg파일과 png 그리고 pdf 및 밑에 보면 gif까지 압축할수 있는 사이트입니다.실험을 통해 얼마나 압축이 되는지 확인해보겠습니다.보는바와 같이 78.67% 압축으로 용량을 1.51MB로 줄였습니다.파일이름에 자동으로 붙는 확장자명이 없습니다. 4번. compressorjpg파일과 png 그리고 pdf 및 밑에 보면 gif까지 압축할수 있는 사이트입니다.실험을 통해 얼마나 압축이 되는지 확인해보겠습니다.보는바와 같이 78% 압축으로 용량을 1.63MB로 줄였습니다.파일이름에 자동으로 -compressor.확장자명 이 붙습니다. 5번. tinypng이름은 tinypng라 png 파일만 압축 할 수 있나 생각 할 수 있지만,jpg도 가능합니다.위 파일을 보면 아쉽게도 무료버전은 5MB까지만 지원이되고,유료버전은 전부 다 지원이 됩니다.하지만 방법이있죠!!!다른 사이트에서 압축한 파일을 tinypng를 통해 재압축을하면 가능합니다.개인적으로 tinypng가 완전 무료면 좋겠지만, 그렇지 않습니다.tinypng는 최고의 압축률로 다른 사이트에서 압축한 이미지도 압축을 통해 용량을 확 줄여줍니다.들리는 소문에 의하면 sk 플래닛의 11번가 사이트에서도 tinypng를 통해 압축을 한다고 들었습니다. 마무리하며제 포트폴리오사이트는 굉장히 이미지가 많고, 이미지의 용량이 매우 커서 렌더링 이슈가 굉장히 큰사이트였습니다.하지만 이미지 용량을 줄이는 것만으로 7초정도의 렌더링시간을 2초정도 줄였습니다.이처럼 이미지 압축을 통해서도 사용자에서 빠른 페이지를 제공 할 수 있습니다.","categories":[{"name":"ETC","slug":"ETC","permalink":"https://tuhbm.github.io/categories/ETC/"}],"tags":[{"name":"image","slug":"image","permalink":"https://tuhbm.github.io/tags/image/"},{"name":"rendering","slug":"rendering","permalink":"https://tuhbm.github.io/tags/rendering/"},{"name":"image optimization","slug":"image-optimization","permalink":"https://tuhbm.github.io/tags/image-optimization/"},{"name":"compressor","slug":"compressor","permalink":"https://tuhbm.github.io/tags/compressor/"},{"name":"image compressor","slug":"image-compressor","permalink":"https://tuhbm.github.io/tags/image-compressor/"}]},{"title":"rendering 2편","slug":"rendering2","date":"2017-08-14T07:00:37.000Z","updated":"2018-03-11T03:23:03.911Z","comments":true,"path":"2017/08/14/rendering2/","link":"","permalink":"https://tuhbm.github.io/2017/08/14/rendering2/","excerpt":"브라우저 렌더링에 영향을 주는 build 도구란 무엇인가?보통 많이 들 사용하는 대표적인 빌드도구는 gulp, grunt, webpack등이 있다.이러한 빌드도구는 업무의 효율성에서도 탁월하게 도움을 준다. 본인은 gulp와 webpack를 모두 조금씩 사용해보고, gulp를 더 자주 사용하고 있다.이유는 webpack은 webpack2를 넘어 webpack3까지나면서 문법을 사용하는 방식도 달라지도 있기때문에,설정을 하는데 조금 어려움이 있다.그러한이유로 gulp를 사용하는것이 더 편하다고 느껴 gulp를 사용하고있다.","text":"브라우저 렌더링에 영향을 주는 build 도구란 무엇인가?보통 많이 들 사용하는 대표적인 빌드도구는 gulp, grunt, webpack등이 있다.이러한 빌드도구는 업무의 효율성에서도 탁월하게 도움을 준다. 본인은 gulp와 webpack를 모두 조금씩 사용해보고, gulp를 더 자주 사용하고 있다.이유는 webpack은 webpack2를 넘어 webpack3까지나면서 문법을 사용하는 방식도 달라지도 있기때문에,설정을 하는데 조금 어려움이 있다.그러한이유로 gulp를 사용하는것이 더 편하다고 느껴 gulp를 사용하고있다.앞서 작업에 효율성에 도움을 준다고 하였는데, 대표적인 예시로는 gulp-spritesmith가 있다.이처럼 자바스크립트 모듈을 사용하여, 스프라이트 이미지를 만들어주는 것이다.이처럼 빌드도구는 필요한 모듈을 사용하여, 설정을 하고 작업에 효율성을 주는 도구이다.빌드도구를 사용하는 방법은 이번편에서 언급하지 않겠습니다. build 도구를 사용하는 이유는 무엇인가?이렇게 작업을 효율성을 주어, 스프라이트 이미지를 사용하는 이유를 아는가?전에 1편을 보신분은 마지막쯤에 언급한대로 ‘구조가 복잡하거 길면 렌더링의 영향을 주겠구나..’라는 언급을 기억하실 수 있습니다.맞습니다! 분명히 영향을 받습니다! 하지만 돔관련해서 문서가 길어서 불필요한부분이라서 렌더링의 영향은 굉장히 이후 언급할 내용에 비하면 미비하다고 할 수 있습니다.이러한 랜더링 부분에서의 더큰 영향을 주는 것에 대해 이해하려면 네트워크의 동작원리에대해 알아야 합니다. 네트워크의 기초는 기본 http프로토콜을 사용하여 데이터를 주고 받는데,자세한 부분 http프로토콜 MDN web docs를 통해 살펴보도록 합니다. 문서에서 보면 나와있겠지만, http프로토콜을 이용하여 서버와 클라이언트(사용자)가 데이터를 주고받는데,가장 많은 리소스가 소비되는 구간은 요청 구간이다. 클라이언트에서 http프로토콜을 이용하여, 서버에 데이터를 요청하면 OSI7계층 모델을 통해응용계층부터 =&gt; 표현계층 =&gt; 세션계층 =&gt; 전송계층 =&gt; 네트워크계층 =&gt; 데이터 링크계층 =&gt; 물리계층까지순차적으로 요청을 한다.그러면 요청에 의한 답변을 역순으로 준비가 되었다고 답변을 올려보내고,그후에 다시 순차적으로 데이터를 받을 준비가 되었으니 보낸달라는 요청을 보낸후에,역순으로 데이터를 주고 받는다. 자세한 네트워크 기초에 대한 이야기는 후에 포스팅을 통해 진행하도록 하겠습니다. 이 포스팅의 주제로 돌아와서,데이터를 클라이언트와 서버에서 주고 받을때 가장 많은 리소스가 소비되는 구간은 요청구간이다. 우리는 지난번에 간단히 1편을 통해 랜더링이 이루어지는 과정에 대해 알아보았습니다.html문서를 파싱해서 내려가다보면 돔을 구성하고 돔안에 컨텐츠를 파싱할때, 이때 서버에 http프로토콜을 이용하여 내려 받는 것이다.이 포인트를 기억하면 ‘음.. 그럼 컨텐츠가 적으면 적을수록 요청이 적어지니까 렌더링이 더 빨라지겠군.’ 이러한 결론이나옵니다. 맞습니다. 우리가 빌드도구를 사용하는 이유는 include 및 live server등의 기능도 있겠지만, sprite-smith를 이용해 스프라이트 이미지를 만들고,그리고 여러개로 나뉘어 있는 css, javascript문서를 하나로 합치는 부분이 가장 핵심적인 부분이라고 생각합니다. 물론 대한민국은 전세계적으로 인터넷이 빠르기로 유명합니다. 그러므로 PC에서는 그 영향이 좀 덜할지 모릅니다. 하지만 모바일환경이라면 어떨까요?모바일에서 와이파이를 사용하면 관계없겠지만,데이터가 나가는 환경이라면, 말이 달라집니다. 왜냐하면 렌더링이 늦어지면 늦어질수록 데이터는 더 많이 나갈테니까요.데이터가 많이 들면, 고객이 불편함을 느껴 서비스를 떠날수 있는 환경이 됩니다. 자사서비스를 하는 회사에선 고객이 떠나는 것 만큼 큰 손해는 없습니다.그렇기때문에 자사서비스를 하는곳에서는 더더욱 렌더링에 신경을 써야합니다.그럼 우리 front-end개발자라면 앞으로 신경써야하는 렌더링을빌드도구를 사용하여, 보다 쉽게 작업을 하고, 효율적인 렌더링을 통해 고객을 불편을 줄여줘야하는게 업무가 아닐까요? 이상으로 포스팅을 마치겠습니다.","categories":[{"name":"HTML","slug":"HTML","permalink":"https://tuhbm.github.io/categories/HTML/"}],"tags":[{"name":"gulp","slug":"gulp","permalink":"https://tuhbm.github.io/tags/gulp/"},{"name":"html","slug":"html","permalink":"https://tuhbm.github.io/tags/html/"},{"name":"rendering","slug":"rendering","permalink":"https://tuhbm.github.io/tags/rendering/"},{"name":"랜더링","slug":"랜더링","permalink":"https://tuhbm.github.io/tags/랜더링/"},{"name":"브라우저","slug":"브라우저","permalink":"https://tuhbm.github.io/tags/브라우저/"},{"name":"grunt","slug":"grunt","permalink":"https://tuhbm.github.io/tags/grunt/"},{"name":"webpack","slug":"webpack","permalink":"https://tuhbm.github.io/tags/webpack/"},{"name":"build tool","slug":"build-tool","permalink":"https://tuhbm.github.io/tags/build-tool/"}]},{"title":"rendering 1편","slug":"rendering1","date":"2017-08-10T09:51:01.000Z","updated":"2018-03-11T03:23:03.908Z","comments":true,"path":"2017/08/10/rendering1/","link":"","permalink":"https://tuhbm.github.io/2017/08/10/rendering1/","excerpt":"브라우저 렌더링이 이루어지는 과정 웹을 개발하는 사람로써 웹브라우저가 렌더링 되는 과정을 이해하는 것은 필수가 아닐까합니다. 저는 왜???라는 말을 참 좋아하는데요.어떠한 행위를 할때 ‘왜?’ 라고 생각해보는 과정은 좋은 습관이라고 생각합니다.우리는 웹개발을 하는 사람으로써, 어떠한 과정에 한계를 두지 말고 지금은 모르더라도 점진적으로 알아가야 한다고 생각을 하는데요.우리가 작업을 하는 HTML, CSS, JavaScript가 렌더링 되는 과정을 이해하는 것이 매우 중요하다고 생각합니다.","text":"브라우저 렌더링이 이루어지는 과정 웹을 개발하는 사람로써 웹브라우저가 렌더링 되는 과정을 이해하는 것은 필수가 아닐까합니다. 저는 왜???라는 말을 참 좋아하는데요.어떠한 행위를 할때 ‘왜?’ 라고 생각해보는 과정은 좋은 습관이라고 생각합니다.우리는 웹개발을 하는 사람으로써, 어떠한 과정에 한계를 두지 말고 지금은 모르더라도 점진적으로 알아가야 한다고 생각을 하는데요.우리가 작업을 하는 HTML, CSS, JavaScript가 렌더링 되는 과정을 이해하는 것이 매우 중요하다고 생각합니다.서론이 조금 길었네요. 이제 본론으로 들어가겠습니다.우리가 구현하는 브라우저는 과연 어떻게 렌더링이 될까요? 우선 ‘렌더링’ 부터 알아보도록 하겠습니다.렌더링이란?렌더링(Rendering)은 컴퓨터 프로그램을 사용하여 모델(또는 이들을 모아놓은 장면인 씬(scene) 파일)로부터 영상을 만들어내는 과정을 말한다.라고 간단하게 표현하고 있습니다.한마디로 클라이언트(사용자)에서 서버에 파일을 받아 브라우저에 뿌려주는 과정이라고 볼 수 있습니다.더 깊이 알고싶으시면 밑에 위키링크를 클릭해보세요.위키 렌더링 클라이언트란 단어는 편하게 사용자라고 이해하시면 쉬울 것 같습니다.모바일에서 접속하면, 모바일 === 클라인언트pc에서 접속하면, pc === 클라이언트인것이죠. 이는 브라우저에만 국한된 단어는 아닙니다. 그냥 사용자를 클라이언트라고 이해하시면 될 것 같습니다. 제가 활동하고 있는 커뮤니티에서 한때 잠깐 어떤 질문이 올라온적이 있는데요.질문의 내용은 html, css, javascript 렌더링 순서에 관한 질문이었습니다. 그림을 살펴보도록하죠. 그림을 보면 doctype을 시작으로 html태그가 처음 나오는것을 보실 수 있습니다.다음 meta태그, title태그 등을 지나 head태그안에 script와 link태그를 이용한 css를 불러오는 과정을 보실수 있습니다.그렇다면..과연 html, css, javascript 중 가장 먼저 렌더링 되는 것은 무엇일까요? 정답 : html맞습니다 html이 불러와 지고 그다음 css 및 javascript가 렌더링됩니다. 아 참 빼먹은 설명이 있네요.우리의 컴퓨터 및 프로그램들은좌에서 우로 그리고위에서 아래로문서를 파싱합니다. 파싱 === 문서를 읽는다 정도로 이해하시면 될 것 같습니다. 렌더링에 관련되서 많은 서적 및 우리의 친구 구글에 보면 많은 자료들이 있습니다.그중 우리 대한민국의 포탈 네이버에서도 렌더링 되는 과정에대해 설명해 놓은 자료가 있습니다.그 중 참고를 해서 보여드리면, dom트리..랜더트리…이건무슨말이다냐….ㅋㅋㅋㅋ DOM트리 란? 하나의 태그로 구성된 형태라고 보시면 될 것 같습니다.123&lt;div&gt; &lt;p&gt;DOM트리&lt;/p&gt;&lt;/div&gt; 이 코드를 기준으로 설명드리면, ‘div’라는 돔이 있고, 그자식으로 ‘p’라는 돔이 ‘DOM트리’ 라는 텍스트를 가지고 있다.어떤가요. 이해하셨나요? 우리가 사용하는 태그 하나하나가 모두 DOM이 됩니다. 랜더트리 란? 쉽게표현해 html과 css 그리고 넓게 javascript까지!스타일에 관여하는 모든 문서를 파싱하고 html의 돔에 적용을 시키기 전에!그러니까 그리기 전에 기억을 해두는 것이라고 생각을 하면 편하겠네요.어떠한 DOM은 display가 block이고, 어떠한 DOM은 color가 #000이고, 이러한 과정을 각각의 돔을 실제 그리기전에 스타일을 입히는 것! 어떤가요 조금 이해 되셨나요?웹킷(크롬)과 모질라의 게코에서 설명해 놓은 그림을 보면웹킷 모질라 게코 두 그림을 보면 조금의 용어의 차이는 있지만, 결론적으로 과정을 보면 동일한것을 보실 수 있습니다. 어떤가요? 렌더링 과정 그림을 보니 조금 더 이해가 되나요..? DOM트리 와 랜더트리 과정을 보니…문서가 길수록, 구조가 복잡하면, 렌더링에 영향이 있겠구나..그렇기 때문에 불필요한 태그 및 필요없는 부분을 지우라는 것이구나..라고 생각이 들면 이번 포스팅은 성공인것 같습니다. 최적화된 렌더링에 대해 생각해보고, 실천을 하는것이 각각 프론트엔드개발자 더 발전을 이룰 수 있는 과정이 아닐까 생각이 듭니다.마지막 더 자세한 사항은 D2 브라우저렌더링를 통해 공부해보세요. 다음은 작업을 할 때 빌드도구 예를 들면 걸프나 그런트 또는 웹팩등 다양항 빌드도구를 사용하는데 사용하는 이유에 대해 설명해보겠습니다.먼저 맛보기로 설명드리면, 작업환경을 편하게 하는것 뿐만 아니라 렌더링에도 영향을 줄수 있는 작업들을 포함하고 있습니다. 그럼 이만 오늘의 포스팅을 마치겠습니다.","categories":[{"name":"HTML","slug":"HTML","permalink":"https://tuhbm.github.io/categories/HTML/"}],"tags":[{"name":"html","slug":"html","permalink":"https://tuhbm.github.io/tags/html/"},{"name":"rendering","slug":"rendering","permalink":"https://tuhbm.github.io/tags/rendering/"},{"name":"랜더링","slug":"랜더링","permalink":"https://tuhbm.github.io/tags/랜더링/"},{"name":"브라우저","slug":"브라우저","permalink":"https://tuhbm.github.io/tags/브라우저/"}]},{"title":"원페이지 HTML 이력서","slug":"onePageResume","date":"2017-08-05T11:49:11.000Z","updated":"2018-03-11T03:23:03.868Z","comments":true,"path":"2017/08/05/onePageResume/","link":"","permalink":"https://tuhbm.github.io/2017/08/05/onePageResume/","excerpt":"취업준비를 위해서 필요한 이력서 보통 잡코리아 또는 사람인 사이트등 잡사이트를 이용해 지원을 많이한다. 그러나 예외는 있다!!","text":"취업준비를 위해서 필요한 이력서 보통 잡코리아 또는 사람인 사이트등 잡사이트를 이용해 지원을 많이한다. 그러나 예외는 있다!! 큰기업의 경우는 자사 채용사이트에서 직접 이력서를 받기 때문에 번거롭지만…우리는 경력사항….자격증번호…. 자소설…..등 새로 작성을 해야한다. 그러던 중 내가 겪은 경험은 보통의 개발자들은 포트폴리오를 URL로 제출을 한다. 하지만 자사채용사이트에 포트폴리오 URL을 넣는 칸이 없다면 어떻게 할것인가….ㅠㅠ 그래서 준비했다 원페이지 자소서!!! 이력서 다운 바로가기 순서 git을 이용한만큼 git명령어를 좀 알아야한다. 어렵지 않다 깃이 설치되어있고, 노드가 설치되어있다는 가정하에 설명하도록 하겠다. 터미널에 저장하고 싶은 경로로 이동 잘모르겠다면……기존에 필자가 포스팅해 놓은 cli명령어 포스팅으로 이동해서 공부해보자 CLI명령어 포스팅으로 이동하기 git clone 하기 어렵지않다…그냥 복붙하는 것이라고 생각하면 된다. git clone https://github.com/tuhbm/onePage_resume.git 이렇게 입력하면 끝!!! 그리고 텍스트 수정 및 이력서 사진 변경 세부 css변경은 minify 해 놓은 파일을 beautify기능이 있는 에디터 또는 밑에 사이트에서 css mifify 변경하기 변경하여 사용하기 각각 양식에 맞추어 텍스트만 변경하면 된다. 문제는 그래프…. 그래프는 아직 템플릿화하지 못하였다. 하지만!!!!! 여러분에 능력을 믿습니다!!! 개발자도구를 열어서 css를 고쳐가면 한땀한땀 바꿔보세요(저정도는 해주셔야죠ㅋㅋㅋ) 그럼 이력서 받고 취업 성공하세요~!!","categories":[{"name":"ETC","slug":"ETC","permalink":"https://tuhbm.github.io/categories/ETC/"}],"tags":[{"name":"RESUME","slug":"RESUME","permalink":"https://tuhbm.github.io/tags/RESUME/"},{"name":"ONEPAGE","slug":"ONEPAGE","permalink":"https://tuhbm.github.io/tags/ONEPAGE/"},{"name":"HTML 이력서","slug":"HTML-이력서","permalink":"https://tuhbm.github.io/tags/HTML-이력서/"},{"name":"원페이지 이력서","slug":"원페이지-이력서","permalink":"https://tuhbm.github.io/tags/원페이지-이력서/"},{"name":"html template resume","slug":"html-template-resume","permalink":"https://tuhbm.github.io/tags/html-template-resume/"}]},{"title":"emmet1탄","slug":"emmet1","date":"2017-07-17T06:21:35.000Z","updated":"2018-03-11T03:23:03.864Z","comments":true,"path":"2017/07/17/emmet1/","link":"","permalink":"https://tuhbm.github.io/2017/07/17/emmet1/","excerpt":"오늘은 많이 사용하는 Emmet을 알아보겠습니다.많이 사용하시는 에디트플러스에서는 zen coding으로 표현하고있습니다.이러한 Emmet에 명령어에 대해 정리해보겠습니다.일반 에디트에서는 Emmet의 기능이 없어서 플러그인을 설치해야 사용이 가능하다는점!!!","text":"오늘은 많이 사용하는 Emmet을 알아보겠습니다.많이 사용하시는 에디트플러스에서는 zen coding으로 표현하고있습니다.이러한 Emmet에 명령어에 대해 정리해보겠습니다.일반 에디트에서는 Emmet의 기능이 없어서 플러그인을 설치해야 사용이 가능하다는점!!! Emmet명령어 1단 html편+ : 형제 생성 ex:)header+main+footer -호출전 -호출후 {} : 텍스트추가 ex:) div{테스트입니다} -호출전 -호출후 &gt; : 자식 생성 ex:)div&gt;ul&gt;li -호출전 -호출후 * : 갯수 ex:) a*3 -호출전 -호출후 ^ : 등반 생성(자식에서 상위로 올라가는 등반) ex:) header&gt;p^main -호출전 -호출후 () : 등반선택이 어렵다면 사용가능 ex:) header&gt;(ul&gt;li&gt;a)+main-호출전 -호출후 [속성=“속성값”] : 속성삽입 ex:) div&gt;a[href=&quot;http://tuhbm.tistory.com/&quot;] -호출전 -호출후 $ : 연속되는 숫자 ex:) ul&gt;li.item$ -호출전 -호출후 금일 포스팅한것들 통합연습 예제:) header#header&gt;a.logo[href=“http://tuhbm.tistory.com”]+div.util_wrap&gt;ul&gt;li.item$*2&gt;a^^^^^main+footer와 header#header&gt;(a.logo[href=“http://tuhbm.tistory.com”]+div.util_wrap&gt;ul&gt;li.item#*2&gt;a)+main+footer 같음 -호출후","categories":[{"name":"HTML","slug":"HTML","permalink":"https://tuhbm.github.io/categories/HTML/"}],"tags":[{"name":"emmet","slug":"emmet","permalink":"https://tuhbm.github.io/tags/emmet/"},{"name":"html","slug":"html","permalink":"https://tuhbm.github.io/tags/html/"}]},{"title":"scout앱 사용하여 sass컴파일하기","slug":"sass-compile","date":"2017-07-17T06:05:34.000Z","updated":"2018-06-14T12:29:36.090Z","comments":true,"path":"2017/07/17/sass-compile/","link":"","permalink":"https://tuhbm.github.io/2017/07/17/sass-compile/","excerpt":"SASS먼저 사스에 대해 다들아시겠지만 설명 드리겠습니다. Sass (Syntactically Awesome Style Sheets : 문법적으로 멋진 스타일시트)라는 뜻입니다. 사스는 기본적으로 웹에서 구현되는 언어는 아닙니다.그러므로 우리가 알고있는 스타일을 정의 해주는 언어인 CSS로 컴파일 해야 사용이 가능합니다.","text":"SASS먼저 사스에 대해 다들아시겠지만 설명 드리겠습니다. Sass (Syntactically Awesome Style Sheets : 문법적으로 멋진 스타일시트)라는 뜻입니다. 사스는 기본적으로 웹에서 구현되는 언어는 아닙니다.그러므로 우리가 알고있는 스타일을 정의 해주는 언어인 CSS로 컴파일 해야 사용이 가능합니다.먼저 컴파일이란?원시 코드에서 목적 코드로 옮기는 과정을 컴파일이라고 합니다. 컴파일 - 위키바로가기 Sass와 Less 등의 방법으로 스타일을 보다 간결하고 편하게 작업하도록 할 수 있습니다만,최근 Less를 사용하는 곳은 줄어들고 Sass를 사용하는 곳이 많더군요. 그래서 이 포스팅에서는 Sass만 다루도록 하겠습니다. Sass를 컴파일 하는방법은 여러가지입니다. 기본적으로 ruby를 설치해서 cli를 통해 변환하는 방법 gulp or grunt or webpack 등의 빌드도구를 사용해서 컴파일하는방법 APP 또는 사이트를 이용하는 방법입니다.본 포스팅에서는 APP을 이용하는 방법을 다루겠습니다.APP에도 컴파일 가능한 방법이 여러가지 있습니다. kolal 바로가기scout app 바로가기prepros 바로가기 위에 거론한 앱말고도 찾아보면 많은 앱들이 존재합니다.하지만 유료 또는 운영체제의 문제가 발생할 수 있습니다. 그 중에 scout app을 사용하는 방법을 포스팅해보겠습니다. 강아지모양의 아이콘 앱입니다. 현재 무료로 운영체제별로 다운로드가 각각 존재하니, 운영체제별로 확인하셔서 다운로드 해주세요. 앱을 실행하면 이런형태의 모습입니다. (개인신상문제로인해 현재 이용하고 있는 프로젝트명은 가렸습니다. 양해부탁드립니다.) 지금 이미지는 프로젝트를 추가했을때의 모습입니다. Input Folder - sass 문서가 들어있는곳Output Folder - css파일로 변환되어 들어갈곳 을 정해주고 Development 체크후 Expanded를 셀렉트해주시면 일반적인 형태의 줄바꿈 형태로 컴파일되고, 확장자가 map 파일이 나옵니다.map파일은 수정시 sass파일과 연결해주어 어디부분을 수정해야하는지 개발자도구에서 볼 수 있게 해주는데요. 현재 크롬 정식버전은 아니지만 크롬 연구버전에서 사용하게 해주면 알아서 map폴더를 인식해서 sass 파일을 알려줍니다. 아참 그리고 프로젝트 명에 플레이버튼을 클릭하면 watch 모드이므로,변경시 알아서 컴파일 해주는 부분입니다. 주로 제가 사용하는방법은 Gulp를 사용하는 방법이지만, 빌드도구 접근이 어려우신 분들을 위한 포스팅지금까지 App중에 scout app으로 컴파일하는 방법이었습니다. 참고css를 sass로 변경해주는 사이트입니다. 기본적으로 거꾸로 하는것이라 정확하지는 않아 신뢰하시않으나, 혹시나 필요한분을 위해 공유드립니다. css를 sass로 변경해주는 사이트 바로가기","categories":[{"name":"CSS","slug":"CSS","permalink":"https://tuhbm.github.io/categories/CSS/"},{"name":"SASS","slug":"CSS/SASS","permalink":"https://tuhbm.github.io/categories/CSS/SASS/"}],"tags":[{"name":"SASS","slug":"SASS","permalink":"https://tuhbm.github.io/tags/SASS/"},{"name":"SCOUT","slug":"SCOUT","permalink":"https://tuhbm.github.io/tags/SCOUT/"},{"name":"compile","slug":"compile","permalink":"https://tuhbm.github.io/tags/compile/"}]},{"title":"자주쓰는 CLI명령어","slug":"cli","date":"2017-07-17T05:55:23.000Z","updated":"2018-03-11T03:20:48.856Z","comments":true,"path":"2017/07/17/cli/","link":"","permalink":"https://tuhbm.github.io/2017/07/17/cli/","excerpt":"cli 명령어ls : 리스트출력 ls -l : 리스트 출력(사용권한,소유자,그룹,크기,날짜등 상세정보 출력) ls [폴더명]/ : 입력한 폴더의 리스트 출력 cd [폴더명] : 입력한 폴더로 이동 cd ~ : Desktop 폴더로 이동","text":"cli 명령어ls : 리스트출력 ls -l : 리스트 출력(사용권한,소유자,그룹,크기,날짜등 상세정보 출력) ls [폴더명]/ : 입력한 폴더의 리스트 출력 cd [폴더명] : 입력한 폴더로 이동 cd ~ : Desktop 폴더로 이동cd .. : 한단계 상위폴더로 이동 mkdir [폴더명] : 폴더 생성(띄어쓰기 하고 칠경우 여러개 생성 가능) touch [파일명] : 입력한 파일생성(띄어쓰기 하고 칠경우 여러개 생성 가능) mv [파일명] [폴더명/파일명] : 파일을 입력한 폴더로 이동 mv [파일명] [변경될파일명] : 현재파일을 입력한 파일명으로 변경 pwd : 현재 작업중인 폴더의 절대경로가 출력 vim [파일명] : 파일을 수정할수있다.(저장하고 나가려면 ESC키를 누른 후 :wq{Write Quit} 명령어 실행) vimtutor : vim튜토리얼 cat [파일명] : 파일내용확인 cp [폴더명/파일명] [복제될파일명] - 폴더에 파일을 현재 폴더에 복제한다 cp -R [복제될폴더명] [복제된폴더명] - 파일을 복제한다(파일도 가능) rm [파일명] : 해당 파일을 삭제(폴더불가능)(띄어쓰기 하고 칠경우 여러개 삭제 가능)(*.[파일종류]를 입력하면 해당 파일 종류 모두를 삭제한다) rmdir [폴더명] : 폴더삭제(단, 빈폴더가아닐경우 삭제안됨) rmdir —help : rmdir 삭제 도우미 rm -rf [폴더명] : 비어있지 않은 폴더 삭제 rm —help : re명령어 도우미","categories":[{"name":"ETC","slug":"ETC","permalink":"https://tuhbm.github.io/categories/ETC/"}],"tags":[{"name":"CLI","slug":"CLI","permalink":"https://tuhbm.github.io/tags/CLI/"},{"name":"터미널","slug":"터미널","permalink":"https://tuhbm.github.io/tags/터미널/"},{"name":"CMD","slug":"CMD","permalink":"https://tuhbm.github.io/tags/CMD/"}]},{"title":"한줄말줄임","slug":"oneLine-ellipsis","date":"2017-07-17T05:42:33.000Z","updated":"2018-03-11T03:23:03.883Z","comments":true,"path":"2017/07/17/oneLine-ellipsis/","link":"","permalink":"https://tuhbm.github.io/2017/07/17/oneLine-ellipsis/","excerpt":"데이터를 바인딩할, 예를 들어 게시판의 경우 정해둔 width값을 초과하는 데이터가 들어올수 있다.이를 방지하기위해 한줄말줄임을 사용해야한다.이러한 한줄 말줄임에 대해 포스팅을 해보겠다. - 적용시 알아두어야 할 것들 하나,문자열을 줄이는 대다수의 이유는 고정되고 제한된 공간을 유지하며 적절한 텍스트 표현을 하기 위한 것이기에 적용시에는 해당 영역의 width 가 고정폭인 조건이어야 합니다.","text":"데이터를 바인딩할, 예를 들어 게시판의 경우 정해둔 width값을 초과하는 데이터가 들어올수 있다.이를 방지하기위해 한줄말줄임을 사용해야한다.이러한 한줄 말줄임에 대해 포스팅을 해보겠다. - 적용시 알아두어야 할 것들 하나,문자열을 줄이는 대다수의 이유는 고정되고 제한된 공간을 유지하며 적절한 텍스트 표현을 하기 위한 것이기에 적용시에는 해당 영역의 width 가 고정폭인 조건이어야 합니다. 둘,ellipsis 사용시 CSS 지정 글꼴(Font)과 브라우저에 따라 표현되는 방식에 차이가 있습니다.통상적으로 “…” 처럼 하단에 깔려야 하지만 대부분의 브라우저에서 중앙 “—“ 영역에 노출됩니다.개인적으로 확인은 못했지만 “맑은 고딕”(웹폰트가 되겠지요?) 글꼴 사용시 대부분의 브라우저에서 우리가 원하는 결과를 얻을 수 있다고 합니다.기본 글꼴(돋움,굴림 등)로 “…” 표시를 중앙(middle)영역이 아닌 하단(bottom)에 표시하고자 한다면 프로그램단에서 처리하는 것이 효율적입니다. 셋,적용시에는 아래 두 속성도 함께 넣어줍니다. div#title{ width:200px; overflow:hidden; white-space:nowrap; text-overflow:ellipsis; } overflow:hidden;고정폭을 넘어가는 text를 숨기고 white-space:nowrap;고정폭이라도 자동 줄바꿈이 되지 않도록 합니다. text-overflow:ellipsis;고정폭을 넘을 경우 “…”를 붙여줍니다.","categories":[{"name":"CSS","slug":"CSS","permalink":"https://tuhbm.github.io/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://tuhbm.github.io/tags/CSS/"},{"name":"한줄 말줄임","slug":"한줄-말줄임","permalink":"https://tuhbm.github.io/tags/한줄-말줄임/"},{"name":"ellipsis","slug":"ellipsis","permalink":"https://tuhbm.github.io/tags/ellipsis/"}]},{"title":"framework 와 library","slug":"frameworkVSliblibrary","date":"2017-07-17T04:55:55.000Z","updated":"2018-09-03T13:09:03.645Z","comments":true,"path":"2017/07/17/frameworkVSliblibrary/","link":"","permalink":"https://tuhbm.github.io/2017/07/17/frameworkVSliblibrary/","excerpt":"용어정리이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. 라이브러리와 프레임워크의 차이초보개발자로써 나와같은 고민을 하고 있는 사람이 많을것이다.세상에는 많은 용어들이 존재한다. 무역용어부터 개발용어까지…..이러한 용어중 나는 개발자로써 개발 용어에 헷갈리는 것들을 나름 이해하기 쉽게 정리해보려한다.","text":"용어정리이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다. 라이브러리와 프레임워크의 차이초보개발자로써 나와같은 고민을 하고 있는 사람이 많을것이다.세상에는 많은 용어들이 존재한다. 무역용어부터 개발용어까지…..이러한 용어중 나는 개발자로써 개발 용어에 헷갈리는 것들을 나름 이해하기 쉽게 정리해보려한다.개발용어에는 많은 것들이 존재한다. 그러나 도대체 이많은 용어들은 무엇인가….?좀알았다 생각했으나..막상 설명하려면…..ㅂㄷㅂㄷ도대체 어떻게 설명해야할까…? 이번 주제는 라이브러리(Library)와 프레임워크(Framework)이다둘은 정말 많이 들어본 용어들이다. 하지만 그만큼 무지 헷갈린다. 라이브러리(Library)란 무엇인가?간단히 설명하면 대표적인 예로 가장 유명한 javascript의 라이브러리인 jQuery와 React가 있다.이러한 라이브러리는 내가 그냥 가져다 사용 할 수 있는 모듈이며 수정이 용이하다. 그렇게 때문에 내가 라이브러리를 가져다 쓴다고 생각 할 수 있다. 이러한 라이브러리를 어떤것을 사용해야 하는지 정해진것은없다. 표현하자면 톱이나 망치 같은 공구들이라고 보면 될것이다.땅을 팔때 톱을 이용해도 되고, 망치로 땅을 파도 무방하다. 다만 효율성의 차이일뿐…“그냥 사용해서 만든다.”라고 보면될것이다. 프레임워크(FrameWork)는 무엇인가?대표적인 예로는 현재 매우 핫한 Angular가 있다프레임워크는 이미 정해진 명세, 규칙이기 때문에 수정이 어렵다. 소스코드를 짤때 이 규칙을 토대로 프레임워크를 사용하므로, 프레임워크가 명시한 대로 사용 할 수 있을 뿐이다. 그래서 내가 짠 소스코드는 프레임워크에 의존하여 동작하게 하게 된다. 이것 역시 표현하자면 자동차,배,비행기같은 이용수단 표현 할 수 있다.라이브러리와 다르게 이용 수단이라고 보면 될것이다.바다를 항해하기 위해선 배를 이용해야한다. 자동차를 이용해서 항해 할순 없지 않은가?이처럼 사용용도가 정해져있고, 그것을 따라야 한다고 볼수있다. 즉 라이브러리와 프레임워크의 차이는 흐름의 키를 누가 쥐고있느냐일것이다.프레임워크는 전체적인 흐름을 스스로가 쥐고 있으며, 사용자는 그 안에서 필요한 코드를 짜 넣는다. 반면 라이브러리는 사용자가 전체적인 흐름을 만들며, 라이브러리를 가져다 쓰는 것이다.라이브러리는 개별자가 만든 클래스에서 호출하여 사용하지만, 프레임워크는 반대로 프레임워크의 클래스가 개별자가 만든 클래스를 부른다.","categories":[{"name":"용어정리","slug":"용어정리","permalink":"https://tuhbm.github.io/categories/용어정리/"}],"tags":[{"name":"framework","slug":"framework","permalink":"https://tuhbm.github.io/tags/framework/"},{"name":"library","slug":"library","permalink":"https://tuhbm.github.io/tags/library/"}]}]}