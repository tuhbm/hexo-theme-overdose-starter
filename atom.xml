<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>보고 배우는 개발</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tuhbm.github.io/"/>
  <updated>2019-02-16T16:40:21.466Z</updated>
  <id>https://tuhbm.github.io/</id>
  
  <author>
    <name>Taekyun Kim</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>번역 - 자바스크립트 코드 30초 시리즈&lt;Date&gt; 1편</title>
    <link href="https://tuhbm.github.io/2019/02/17/javascript30secDate/"/>
    <id>https://tuhbm.github.io/2019/02/17/javascript30secDate/</id>
    <published>2019-02-16T16:38:48.000Z</published>
    <updated>2019-02-16T16:40:21.466Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Date-코드-30초-시리즈&quot;&gt;&lt;a href=&quot;#Date-코드-30초-시리즈&quot; class=&quot;headerlink&quot; title=&quot;[Date]코드 30초 시리즈&quot;&gt;&lt;/a&gt;[Date]코드 30초 시리즈&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://tuhbm.github.io/images/javascript/img-javascript30.png&quot; alt=&quot;Javascript 30 seconds&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h3&gt;&lt;p&gt;기능을 직접 한땀 한땀 개발하는 것은 개발자로써 매우 중요한 업무입니다.&lt;br&gt;하지만 모든 기능을 미리 만들어 놓고 util함수 처럼 사용한다고 하면 어떨까요?&lt;br&gt;코드 30초만 있다면 빠르게 필요한 기능을 찾아 개발 할 수 있습니다.&lt;br&gt;어떠한 라이브러리도 사용하지않고 오로지 ES6로만 작성되어 있습니다.&lt;br&gt;이제 필요한 코드 찾아 사용하세요.&lt;br&gt;코드 30초 시리즈는 &lt;a href=&quot;https://30secondsofcode.org/index&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://30secondsofcode.org/index&lt;/a&gt;를 기반으로 번역 &amp;amp; 정리하였습니다.&lt;/p&gt;
&lt;h2 id=&quot;Date편&quot;&gt;&lt;a href=&quot;#Date편&quot; class=&quot;headerlink&quot; title=&quot;Date편&quot;&gt;&lt;/a&gt;Date편&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;###dayOfYear&lt;br&gt;&lt;code&gt;Date&lt;/code&gt;객체에서 새해로부터 몇번째 날인지 가져옵니다.&lt;br&gt;&lt;code&gt;new Date()&lt;/code&gt;를 하고 &lt;code&gt;Date.prototype.getFullYear()&lt;/code&gt;를 사용하여, 해당 연도의 첫날의 &lt;code&gt;Date&lt;/code&gt;객체에서 인자로 받은 &lt;code&gt;date&lt;/code&gt;를 뺀 값을 milliseconds로 나누워 결과를 얻습니다.&lt;br&gt;&lt;code&gt;Math.floor()&lt;/code&gt;으로 결과를 정수로 적절하게 반올림하여 사용하세요.&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; dayOfYear = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;date&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor((date - &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(date.getFullYear(), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) / &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// EXAMPLES&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dayOfYear(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;()); &lt;span class=&quot;comment&quot;&gt;// 272&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://tuhbm.github.io/categories/Javascript/"/>
    
    
      <category term="30sec" scheme="https://tuhbm.github.io/tags/30sec/"/>
    
      <category term="js" scheme="https://tuhbm.github.io/tags/js/"/>
    
      <category term="transform" scheme="https://tuhbm.github.io/tags/transform/"/>
    
      <category term="date" scheme="https://tuhbm.github.io/tags/date/"/>
    
  </entry>
  
  <entry>
    <title>번역 - 자바스크립트 코드 30초 시리즈&lt;Array&gt; 1편</title>
    <link href="https://tuhbm.github.io/2019/02/10/javascript30secArray1/"/>
    <id>https://tuhbm.github.io/2019/02/10/javascript30secArray1/</id>
    <published>2019-02-09T16:38:48.000Z</published>
    <updated>2019-02-16T16:42:50.101Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Array-1편-코드-30초-시리즈&quot;&gt;&lt;a href=&quot;#Array-1편-코드-30초-시리즈&quot; class=&quot;headerlink&quot; title=&quot;[Array 1편]코드 30초 시리즈&quot;&gt;&lt;/a&gt;[Array 1편]코드 30초 시리즈&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://tuhbm.github.io/images/javascript/img-javascript30.png&quot; alt=&quot;Javascript 30 seconds&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h3&gt;&lt;p&gt;기능을 직접 한땀 한땀 개발하는 것은 개발자로써 매우 중요한 업무입니다.&lt;br&gt;하지만 모든 기능을 미리 만들어 놓고 util함수 처럼 사용한다고 하면 어떨까요?&lt;br&gt;코드 30초만 있다면 빠르게 필요한 기능을 찾아 개발 할 수 있습니다.&lt;br&gt;어떠한 라이브러리도 사용하지않고 오로지 ES6로만 작성되어 있습니다.&lt;br&gt;이제 필요한 코드 찾아 사용하세요.&lt;br&gt;코드 30초 시리즈는 &lt;a href=&quot;https://30secondsofcode.org/index&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://30secondsofcode.org/index&lt;/a&gt;를 기반으로 번역 &amp;amp; 정리하였습니다.&lt;/p&gt;
&lt;h2 id=&quot;Array편&quot;&gt;&lt;a href=&quot;#Array편&quot; class=&quot;headerlink&quot; title=&quot;Array편&quot;&gt;&lt;/a&gt;Array편&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;all&quot;&gt;&lt;a href=&quot;#all&quot; class=&quot;headerlink&quot; title=&quot;all&quot;&gt;&lt;/a&gt;all&lt;/h3&gt;&lt;p&gt;제공된 조건부 함수가 컬렉션의 모든 요소에 대해 true를 반환하면 true를 반환하고 그렇지 않으면 false를 반환합니다.&lt;br&gt;&lt;code&gt;Array.prototype.every()&lt;/code&gt;를 사용하여 컬렉션의 모든 요소가 fn에 따라 &lt;code&gt;true&lt;/code&gt;를 반환하는지 테스트합니다. 부울을 기본값으로 사용하려면 두 번째 인수 fn을 생략하십시오.&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; all = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;arr, fn = &lt;span class=&quot;built_in&quot;&gt;Boolean&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; arr.every(fn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// EXAMPLES&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;all([&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], x =&amp;gt; x &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;all([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]); &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://tuhbm.github.io/categories/Javascript/"/>
    
    
      <category term="30sec" scheme="https://tuhbm.github.io/tags/30sec/"/>
    
      <category term="js" scheme="https://tuhbm.github.io/tags/js/"/>
    
      <category term="transform" scheme="https://tuhbm.github.io/tags/transform/"/>
    
      <category term="array" scheme="https://tuhbm.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>번역 - OOCSS, BEM, SMACSS를 사용하여 CSS 구조를 효과적으로 구성하는 방법</title>
    <link href="https://tuhbm.github.io/2018/12/09/cssArchitecture/"/>
    <id>https://tuhbm.github.io/2018/12/09/cssArchitecture/</id>
    <published>2018-12-08T17:04:10.000Z</published>
    <updated>2018-12-08T17:05:48.281Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;OOCSS-BEM-SMACSS를-사용하여-CSS-구조를-효과적으로-구성하는-방법&quot;&gt;&lt;a href=&quot;#OOCSS-BEM-SMACSS를-사용하여-CSS-구조를-효과적으로-구성하는-방법&quot; class=&quot;headerlink&quot; title=&quot;OOCSS, BEM, SMACSS를 사용하여 CSS 구조를 효과적으로 구성하는 방법&quot;&gt;&lt;/a&gt;OOCSS, BEM, SMACSS를 사용하여 CSS 구조를 효과적으로 구성하는 방법&lt;/h1&gt;&lt;p&gt;필자는 레고 블록을 매우 좋아하는 장난감으로 아주 많았습니다.&lt;br&gt;레고블록은 저의 첫번째 창의적인 작품이었습니다. 그것들은 무엇이든 생각하는대로 조립이 가능했습니다.&lt;br&gt;나는 그 당시 왜 그렇게 레고를 좋아했는지 몰랐습니다.&lt;br&gt;하지만 스타워즈 팔콘을 만들어보면 색깔 및 7000여조각이 각 조각별로 어떻게 완벽하게 맞아 떨어지는지를 보여주었습니다.&lt;/p&gt;
&lt;p&gt;이런식으로 처리가 된다면 조직화되어 HTML은 더 작아지고, CSS는 훨씬 관리하기 쉬워져 프론트엔드 개발속도가 빨라지게 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;이번 글에서는 CSS 구조를 레고블록처럼 동작하게하여 HTML / CSS 블록으로 구성하는 방법을 설명합니다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;CSS 방법론중에 세가지 모듈화 방법을 소개하겠습니다.&lt;br&gt;이 방법론은 우리가 이해하고, 유지하고, 재사용하기 쉽게 컴포넌트화 하는데 도움이 될 것입니다.&lt;/p&gt;
&lt;p&gt;저는 당신이 사용하고 있는 프론트엔드 프레임워크에 상관없이 이러한 방법들이 당신의 일하는 방식의 일부가 될꺼라고 확신합니다.&lt;br&gt;당신이 이 방법론들을 사용한다면 확신합니다.&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://tuhbm.github.io/categories/CSS/"/>
    
    
      <category term="OOCSS" scheme="https://tuhbm.github.io/tags/OOCSS/"/>
    
      <category term="BEM" scheme="https://tuhbm.github.io/tags/BEM/"/>
    
      <category term="SMACSS" scheme="https://tuhbm.github.io/tags/SMACSS/"/>
    
      <category term="style" scheme="https://tuhbm.github.io/tags/style/"/>
    
      <category term="css" scheme="https://tuhbm.github.io/tags/css/"/>
    
      <category term="architecture" scheme="https://tuhbm.github.io/tags/architecture/"/>
    
  </entry>
  
  <entry>
    <title>번역 - 자바스크립트 분해(destructuring)</title>
    <link href="https://tuhbm.github.io/2018/12/01/javascriptDestructuring/"/>
    <id>https://tuhbm.github.io/2018/12/01/javascriptDestructuring/</id>
    <published>2018-12-01T07:02:03.000Z</published>
    <updated>2018-12-01T09:16:45.757Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;자바스크립트-객체와-배열-분해-destructuring&quot;&gt;&lt;a href=&quot;#자바스크립트-객체와-배열-분해-destructuring&quot; class=&quot;headerlink&quot; title=&quot;자바스크립트 객체와 배열 분해(destructuring)&quot;&gt;&lt;/a&gt;자바스크립트 객체와 배열 분해(destructuring)&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://tuhbm.github.io/images/javascript/destructuring_intro.jpg&quot; alt=&quot;destructuring&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;destructuring&lt;/code&gt;은 &lt;code&gt;배열&lt;/code&gt; 및 &lt;code&gt;객체&lt;/code&gt;의 값으로 변수를 생성하는 강력한 방법입니다.&lt;br&gt;이 방법은 코드를 더 간결하게 만드는 방법입니다.&lt;/p&gt;
&lt;p&gt;다만 &lt;code&gt;destructuring&lt;/code&gt;은 ES2015(ES6)의 일부이며 모든 브라우저와 호환되지 않습니다.&lt;br&gt;모든 사용자에게 완전한 호환성을 보장하기 위해 babel, typescript 또는 코드를 ES5로 컴파일하는 모든 것을 사용할 것을 권장합니다.&lt;/p&gt;
&lt;h2 id=&quot;배열-분해-destructuring&quot;&gt;&lt;a href=&quot;#배열-분해-destructuring&quot; class=&quot;headerlink&quot; title=&quot;배열 분해(destructuring)&quot;&gt;&lt;/a&gt;배열 분해(destructuring)&lt;/h2&gt;&lt;p&gt;배열의 값을 별도의 변수에 할당하려는 경우, destructuring을 통해 간단하고 깨끗하게 할당 할 수 있습니다.&lt;br&gt;인덱스나 루프를 사용할 필요가 없습니다!&lt;br&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://tuhbm.github.io/categories/Javascript/"/>
    
    
      <category term="array" scheme="https://tuhbm.github.io/tags/array/"/>
    
      <category term="object" scheme="https://tuhbm.github.io/tags/object/"/>
    
      <category term="destructuring" scheme="https://tuhbm.github.io/tags/destructuring/"/>
    
  </entry>
  
  <entry>
    <title>번역 - 비동기 자바스크립트의 간단한 참고서 3편</title>
    <link href="https://tuhbm.github.io/2018/11/24/async03/"/>
    <id>https://tuhbm.github.io/2018/11/24/async03/</id>
    <published>2018-11-24T08:18:14.000Z</published>
    <updated>2018-11-24T08:27:03.015Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;비동기-자바스크립트의-간단한-참고서-3편&quot;&gt;&lt;a href=&quot;#비동기-자바스크립트의-간단한-참고서-3편&quot; class=&quot;headerlink&quot; title=&quot;비동기 자바스크립트의 간단한 참고서 3편&quot;&gt;&lt;/a&gt;비동기 자바스크립트의 간단한 참고서 3편&lt;/h1&gt;&lt;p&gt;지난시간 &lt;a href=&quot;https://tuhbm.github.io/2018/11/05/async01/&quot;&gt;1편&lt;/a&gt;에서 동기와 비동기에 대해 배우고, &lt;code&gt;callback&lt;/code&gt;을 통해 비동기 통신을 해보았습니다.&lt;br&gt;&lt;a href=&quot;https://tuhbm.github.io/2018/11/14/async02/&quot;&gt;2편&lt;/a&gt;에서는 callback이 아닌 &lt;code&gt;Promise&lt;/code&gt;을 알아보고 정적메소드를 알아보았습니다.&lt;br&gt;이번시간에는 &lt;code&gt;Promise&lt;/code&gt;를 순서대로 진행해보고, 실습을 진행해 보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;Promise순서대로-실행하기&quot;&gt;&lt;a href=&quot;#Promise순서대로-실행하기&quot; class=&quot;headerlink&quot; title=&quot;Promise순서대로 실행하기&quot;&gt;&lt;/a&gt;&lt;code&gt;Promise&lt;/code&gt;순서대로 실행하기&lt;/h2&gt;&lt;p&gt;만약 두 개의 비동기 작업을 순서대로 실행하려면 다음과 같은 패턴을 따라야합니다.&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; promiseChain = task1()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;task1Result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; task2();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;task2Result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; task3();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;task3Result&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; task4();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;task4Result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;done&#39;&lt;/span&gt;, task4Result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Error&#39;&lt;/span&gt;, err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://tuhbm.github.io/categories/Javascript/"/>
    
    
      <category term="동기" scheme="https://tuhbm.github.io/tags/%EB%8F%99%EA%B8%B0/"/>
    
      <category term="비동기" scheme="https://tuhbm.github.io/tags/%EB%B9%84%EB%8F%99%EA%B8%B0/"/>
    
      <category term="synchronous" scheme="https://tuhbm.github.io/tags/synchronous/"/>
    
      <category term="asynchronous" scheme="https://tuhbm.github.io/tags/asynchronous/"/>
    
      <category term="promise" scheme="https://tuhbm.github.io/tags/promise/"/>
    
      <category term="all" scheme="https://tuhbm.github.io/tags/all/"/>
    
      <category term="method" scheme="https://tuhbm.github.io/tags/method/"/>
    
      <category term="return" scheme="https://tuhbm.github.io/tags/return/"/>
    
      <category term="then" scheme="https://tuhbm.github.io/tags/then/"/>
    
  </entry>
  
  <entry>
    <title>번역 - 비동기 자바스크립트의 간단한 참고서 2편</title>
    <link href="https://tuhbm.github.io/2018/11/14/async02/"/>
    <id>https://tuhbm.github.io/2018/11/14/async02/</id>
    <published>2018-11-14T12:31:06.000Z</published>
    <updated>2018-11-15T00:25:07.228Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;비동기-자바스크립트의-간단한-참고서-2편&quot;&gt;&lt;a href=&quot;#비동기-자바스크립트의-간단한-참고서-2편&quot; class=&quot;headerlink&quot; title=&quot;비동기 자바스크립트의 간단한 참고서 2편&quot;&gt;&lt;/a&gt;비동기 자바스크립트의 간단한 참고서 2편&lt;/h1&gt;&lt;p&gt;지난시간 &lt;a href=&quot;https://tuhbm.github.io/2018/11/05/async01/&quot;&gt;1편&lt;/a&gt;에서 동기와 비동기에 대해 배우고, &lt;code&gt;callback&lt;/code&gt;을 통해 비동기 통신을 해보았습니다.&lt;br&gt;이번시간에는 callback이 아닌 &lt;code&gt;Promise&lt;/code&gt;을 알아보고 이를 통해 비동기 작업을 진행하는 방법을 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;Promises&quot;&gt;&lt;a href=&quot;#Promises&quot; class=&quot;headerlink&quot; title=&quot;Promises&quot;&gt;&lt;/a&gt;Promises&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Promise는 아마도 자바 스크립트로 비동기 프로그래밍에서 가장 중요한 추상적인 개념 일 것입니다. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Promise는 다른 많은 비동기 추상적인 개념을 위한 토대를 마련하기 때문에 이 섹션을 반드시 주의 깊게 읽으십시오.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Promise는 미래의 특정 시점에서 실행될 때 성공하거나 실패할 수 있는 비동기 작업의 결과를 나타내는 개체입니다. 예를 들어 API 서버에 요청을 할 때 api 호출의 결과를 나타내는 약속을 반환할 수 있습니다.&lt;br&gt;api 호출은 성공할 수도 있고 성공하지 못할 수도 있지만 결국에는 사용할 수있는 promise 객체를 얻게됩니다. 아래의 함수는 api 호출을 수행하고 그 결과를 promise 형식으로 반환합니다.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// code/promises/axios-example.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; axios = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;axios&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getDataFromServer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; result = axios.get(&lt;span class=&quot;string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/posts/1&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// B&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result; &lt;span class=&quot;comment&quot;&gt;// C&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;A 행 &lt;a href=&quot;https://github.com/axios/axios&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;axios&lt;/a&gt;에서 promise 기반 http 클라이언트 인 모듈을 로드합니다.&lt;/li&gt;
&lt;li&gt;B 행에서 우리는 axios api의 endpoint에서 GET 요청을하고 그 결과를 result 상수로 저장합니다.&lt;/li&gt;
&lt;li&gt;C 행에서 우리는 promise를 리턴합니다.
    
    </summary>
    
      <category term="Javascript" scheme="https://tuhbm.github.io/categories/Javascript/"/>
    
    
      <category term="동기" scheme="https://tuhbm.github.io/tags/%EB%8F%99%EA%B8%B0/"/>
    
      <category term="비동기" scheme="https://tuhbm.github.io/tags/%EB%B9%84%EB%8F%99%EA%B8%B0/"/>
    
      <category term="synchronous" scheme="https://tuhbm.github.io/tags/synchronous/"/>
    
      <category term="asynchronous" scheme="https://tuhbm.github.io/tags/asynchronous/"/>
    
      <category term="promise" scheme="https://tuhbm.github.io/tags/promise/"/>
    
      <category term="resolve" scheme="https://tuhbm.github.io/tags/resolve/"/>
    
      <category term="reject" scheme="https://tuhbm.github.io/tags/reject/"/>
    
      <category term="all" scheme="https://tuhbm.github.io/tags/all/"/>
    
      <category term="method" scheme="https://tuhbm.github.io/tags/method/"/>
    
  </entry>
  
  <entry>
    <title>번역 - 비동기 자바스크립트의 간단한 참고서 1편</title>
    <link href="https://tuhbm.github.io/2018/11/05/async01/"/>
    <id>https://tuhbm.github.io/2018/11/05/async01/</id>
    <published>2018-11-05T12:45:03.000Z</published>
    <updated>2018-11-05T12:54:29.453Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;비동기-자바스크립트의-간단한-참고서&quot;&gt;&lt;a href=&quot;#비동기-자바스크립트의-간단한-참고서&quot; class=&quot;headerlink&quot; title=&quot;비동기 자바스크립트의 간단한 참고서&quot;&gt;&lt;/a&gt;비동기 자바스크립트의 간단한 참고서&lt;/h1&gt;&lt;h2 id=&quot;JavaScript로-비동기-프로그래밍-배우기&quot;&gt;&lt;a href=&quot;#JavaScript로-비동기-프로그래밍-배우기&quot; class=&quot;headerlink&quot; title=&quot;JavaScript로 비동기 프로그래밍 배우기&quot;&gt;&lt;/a&gt;JavaScript로 비동기 프로그래밍 배우기&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://tuhbm.github.io/images/javascript/async/async_main_img.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;JavaScript의 비동기 특성은 많은 사람들을 혼란스럽게 할 수있는 언어 측면 중 하나입니다. 그러나 기본 비동기 구문을 잘 이해하면 언어에 대한 많은 혼란을 줄일 수 있습니다. 이 가이드의 목표는 JavaScript로 &lt;em&gt;비동기 프로그래밍&lt;/em&gt;을 소개합니다. 그리고 깨끗하고 유지 보수가 가능한 비동기 코드를 작성하는 데 필요한 기술을 제공하는 것입니다. 동기식 및 비동기식 실행 모델과 그 차이점을 살펴 보는 것으로 시작합니다. 그런 다음 콜백 기능에 대해 자세히 알아보고 비동기 작업 결과를 캡처하는 데 어떻게 사용되는지 조사하겠습니다. 그런 다음, &lt;em&gt;promise&lt;/em&gt;에 대해 알아보고 콜백 기능을 추상화하여 비동기 흐름을 단순화하는 방법에 대해 알아보겠습니다.&lt;br&gt;또한 제너레이터를 살펴보고 비동기 흐름에 어떻게 사용할 수 있는지 알아보겠습니다. 끝으로 &lt;em&gt;async&lt;/em&gt; 함수를 살펴보고 비동기 작업을 더욱 단순화하기 위해 &lt;em&gt;promise&lt;/em&gt;와 함께 사용할 수있는 방법을 보여줍니다.&lt;/p&gt;
&lt;h2 id=&quot;예제코드&quot;&gt;&lt;a href=&quot;#예제코드&quot; class=&quot;headerlink&quot; title=&quot;예제코드&quot;&gt;&lt;/a&gt;예제코드&lt;/h2&gt;&lt;p&gt;이 가이드의 모든 코드 예는 Gitlab에서 확인할 수 있습니다.&lt;br&gt;&lt;a href=&quot;https://gitlab.com/aj_meyghani/asyncjs-code-examples&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://gitlab.com/aj_meyghani/asyncjs-code-examples&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;당신은 Repository를 복제하거나 &lt;a href=&quot;https://gitlab.com/aj_meyghani/asyncjs-code-examples/-/archive/master/asyncjs-code-examples-master.zip&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;zip&lt;/a&gt; 파일로 다운로드 할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;기타-간단한-참고서&quot;&gt;&lt;a href=&quot;#기타-간단한-참고서&quot; class=&quot;headerlink&quot; title=&quot;기타 간단한 참고서&quot;&gt;&lt;/a&gt;기타 간단한 참고서&lt;/h3&gt;&lt;p&gt;다른 간단한 참고서를 확인해보세요&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/p/d42597ceb496&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;JavaScript Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/p/d88f550ffce3&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;JavaScript Prototypes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;소개&quot;&gt;&lt;a href=&quot;#소개&quot; class=&quot;headerlink&quot; title=&quot;소개&quot;&gt;&lt;/a&gt;소개&lt;/h2&gt;&lt;p&gt;JavaScript에서 비동기 프로그래밍을 처음 접한 경우 다음 코드를 보고 놀랄 수 있습니다.&lt;br&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://tuhbm.github.io/categories/Javascript/"/>
    
    
      <category term="callback" scheme="https://tuhbm.github.io/tags/callback/"/>
    
      <category term="동기" scheme="https://tuhbm.github.io/tags/%EB%8F%99%EA%B8%B0/"/>
    
      <category term="비동기" scheme="https://tuhbm.github.io/tags/%EB%B9%84%EB%8F%99%EA%B8%B0/"/>
    
      <category term="synchronous" scheme="https://tuhbm.github.io/tags/synchronous/"/>
    
      <category term="asynchronous" scheme="https://tuhbm.github.io/tags/asynchronous/"/>
    
  </entry>
  
  <entry>
    <title>번역 - css의 DOM을 가운데 정렬하는 다양한 방법</title>
    <link href="https://tuhbm.github.io/2018/10/31/cssAlignCenter/"/>
    <id>https://tuhbm.github.io/2018/10/31/cssAlignCenter/</id>
    <published>2018-10-31T10:56:08.000Z</published>
    <updated>2018-11-05T12:37:30.058Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS에서-스타일을-중심으로-배치하는-방법&quot;&gt;&lt;a href=&quot;#CSS에서-스타일을-중심으로-배치하는-방법&quot; class=&quot;headerlink&quot; title=&quot;CSS에서 스타일을 중심으로 배치하는 방법&quot;&gt;&lt;/a&gt;CSS에서 스타일을 중심으로 배치하는 방법&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://tuhbm.github.io/images/css-align-center.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;솔직하게 말해봅시다.&lt;/p&gt;
&lt;p&gt;때때로 우리의 코딩 경력 전반에 걸쳐 우리는 CSS의 중심에 좌절감을 나타 냈습니다(Google 또는 스택 오버 플로우에서 div 내에서 div를 가운데에 배치하는 방법을 찾는 방법).&lt;br&gt;이 작업은 가장 간단한 작업 중 하나일 수 있지만 페이지에 더 많은 요소와 스타일을 추가하면 빠르게 혼란이 올 수 있습니다.&lt;br&gt;이것이 꽤 흔한 문제이기 때문에, 저는 이 가이드에서 CSS를 중심으로 하는 방법을 정리했습니다.&lt;br&gt;또한 CodePen에서 만든 각 예제와 함께 코드/링크도 포함했습니다. 원한다면 마음대로 포크, 공유 또는 복사하세요!&lt;/p&gt;
&lt;p&gt;여기에서 저의 CodePen을 보세요.&lt;/p&gt;
&lt;p&gt;더 이상 고민 말고, 그것에 대해 이야기합시다!&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://tuhbm.github.io/categories/CSS/"/>
    
    
      <category term="transform" scheme="https://tuhbm.github.io/tags/transform/"/>
    
      <category term="align center" scheme="https://tuhbm.github.io/tags/align-center/"/>
    
      <category term="absolute" scheme="https://tuhbm.github.io/tags/absolute/"/>
    
      <category term="flex" scheme="https://tuhbm.github.io/tags/flex/"/>
    
      <category term="translate" scheme="https://tuhbm.github.io/tags/translate/"/>
    
  </entry>
  
  <entry>
    <title>번역 - Vue 2 + Firebase 인증 시스템을 사용하여 15분 안에 Vue 앱을 만드는 방법 5편</title>
    <link href="https://tuhbm.github.io/2018/10/30/vue-firebase5/"/>
    <id>https://tuhbm.github.io/2018/10/30/vue-firebase5/</id>
    <published>2018-10-30T11:06:19.000Z</published>
    <updated>2018-11-05T12:37:30.067Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;지난 앞선 포스팅에서 &lt;a href=&quot;https://tuhbm.github.io/2018/10/20/vue-firebase1/&quot;&gt;1편&lt;/a&gt;에서는 기본 이론을 알고,&lt;br&gt;&lt;a href=&quot;https://tuhbm.github.io/2018/10/20/vue-firebase2/&quot;&gt;2편&lt;/a&gt;에선 컴포넌트를 각각 구성해보고, vue-router에 대한 이론을 알아보았습니다.&lt;br&gt;&lt;a href=&quot;https://tuhbm.github.io/2018/10/20/vue-firebase3/&quot;&gt;3편&lt;/a&gt;에선 vue-router를 사용해 컴포넌트간 이동을 진행해보았습니다.&lt;br&gt;&lt;a href=&quot;https://tuhbm.github.io/2018/10/22/vue-firebase4/&quot;&gt;4편&lt;/a&gt;에서는 firebase를 연결하고 회원가입&amp;amp;로그인을 진행해 보겠습니다.&lt;/p&gt;
&lt;p&gt;마지막으로 firebase에 가입된 데이터에 인증을 통해 페이지 접속이 가능하도록 해보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;스텝4-인증-후-앱-접속&quot;&gt;&lt;a href=&quot;#스텝4-인증-후-앱-접속&quot; class=&quot;headerlink&quot; title=&quot;스텝4 인증 후 앱 접속&quot;&gt;&lt;/a&gt;스텝4 인증 후 앱 접속&lt;/h2&gt;&lt;h3 id=&quot;4-1-router에-meta-추가&quot;&gt;&lt;a href=&quot;#4-1-router에-meta-추가&quot; class=&quot;headerlink&quot; title=&quot;4.1 router에 meta 추가&quot;&gt;&lt;/a&gt;4.1 router에 meta 추가&lt;/h3&gt;&lt;p&gt;이제 인증을 받았습니다! 하지만 아무 일도 일어나지 않습니다. 사용자를 인증 한 경우에만 응용 프로그램으로 접근 가능하도록 사용자를 리다이렉션시켜야합니다. 우리는 앱에서 인증 후 이동 될 컴포넌트가 &lt;em&gt;Hello&lt;/em&gt; 컴포넌트라고 정의 하였습니다.&lt;/p&gt;
&lt;p&gt;Vue 애플리케이션에서 이를 구현하기 위해 vue-router의 메타 필드를 사용할 수 있습니다. 메타 필드는 경로에 설정할 수있는 추가 정보입니다.&lt;/p&gt;
&lt;p&gt;메타에 대한 자세한 내용을 보려면 여기에서 vue-router 설명서를 확인하십시오.&lt;br&gt;&lt;a href=&quot;https://router.vuejs.org/en/advanced/meta.html&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://router.vuejs.org/en/advanced/meta.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이 예제에서 사용할 Hello 뷰에 메타 필드를 추가해 보겠습니다.&lt;br&gt;이 메타는 requiresAuth라고하며 &lt;em&gt;Hello&lt;/em&gt; 컴포넌트에 인증이 필요함을 알립니다.&lt;/p&gt;
&lt;p&gt;모든 컴포넌트에 경로가 존재하며, 기본 디폴트 페이지의 앱 기본경로를 재정의해야합니다.&lt;br&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://tuhbm.github.io/categories/Javascript/"/>
    
      <category term="Vue" scheme="https://tuhbm.github.io/categories/Javascript/Vue/"/>
    
    
      <category term="vue" scheme="https://tuhbm.github.io/tags/vue/"/>
    
      <category term="vue.js" scheme="https://tuhbm.github.io/tags/vue-js/"/>
    
      <category term="tutorial" scheme="https://tuhbm.github.io/tags/tutorial/"/>
    
      <category term="vue-router" scheme="https://tuhbm.github.io/tags/vue-router/"/>
    
      <category term="router-link" scheme="https://tuhbm.github.io/tags/router-link/"/>
    
  </entry>
  
  <entry>
    <title>번역 - Vue 2 + Firebase 인증 시스템을 사용하여 15분 안에 Vue 앱을 만드는 방법 4편</title>
    <link href="https://tuhbm.github.io/2018/10/22/vue-firebase4/"/>
    <id>https://tuhbm.github.io/2018/10/22/vue-firebase4/</id>
    <published>2018-10-22T13:01:25.000Z</published>
    <updated>2018-11-05T12:37:30.065Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;지난 앞선 포스팅에서 &lt;a href=&quot;https://tuhbm.github.io/2018/10/20/vue-firebase1/&quot;&gt;1편&lt;/a&gt;에서는 기본 이론을 알고,&lt;br&gt;&lt;a href=&quot;https://tuhbm.github.io/2018/10/20/vue-firebase2/&quot;&gt;2편&lt;/a&gt;에선 컴포넌트를 각각 구성해보고, vue-router에 대한 이론을 알아보았습니다.&lt;br&gt;&lt;a href=&quot;https://tuhbm.github.io/2018/10/20/vue-firebase3/&quot;&gt;3편&lt;/a&gt;에선 vue-router를 사용해 컴포넌트간 이동을 진행해보았습니다.&lt;/p&gt;
&lt;p&gt;이번편에서는 firebase를 연결하고 회원가입&amp;amp;로그인을 진행해 보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;스텝3-firebase-사용&quot;&gt;&lt;a href=&quot;#스텝3-firebase-사용&quot; class=&quot;headerlink&quot; title=&quot;스텝3 firebase 사용&quot;&gt;&lt;/a&gt;스텝3 firebase 사용&lt;/h2&gt;&lt;p&gt;우리의 프론트 엔드 애플리케이션을 준비가 되었습니다. 인증 시스템을 사용할 수 있도록 Firebase를 구현합시다!&lt;/p&gt;
&lt;h3 id=&quot;3-1-Firebase에서-새로운-프로젝트-만들기&quot;&gt;&lt;a href=&quot;#3-1-Firebase에서-새로운-프로젝트-만들기&quot; class=&quot;headerlink&quot; title=&quot;3.1 Firebase에서 새로운 프로젝트 만들기&quot;&gt;&lt;/a&gt;3.1 Firebase에서 새로운 프로젝트 만들기&lt;/h3&gt;&lt;p&gt;Firebase를 사용하려면, 먼저 firebase 콘솔에 새로운 프로젝트를 생성해야합니다.&lt;br&gt;가입된 계정이 없으면 계정을 만든 다음으로 이동하십시오.&lt;/p&gt;
&lt;p&gt;&amp;lt;console.firebase.google.com&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tuhbm.github.io/images/vue-firebase/vue-firebase23.png&quot; alt=&quot;Firebase console&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Add project - 프로젝트추가&lt;/em&gt; 를 클릭하세요. 새 프로젝트를 만드는 팝업이 활성화됩니다.&lt;br&gt;그리고 원하는 이름을 정하세요. 나는 &lt;em&gt;vue-firebase-tutorial&lt;/em&gt; 라고 정했습니다.&lt;br&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://tuhbm.github.io/categories/Javascript/"/>
    
      <category term="Vue" scheme="https://tuhbm.github.io/categories/Javascript/Vue/"/>
    
    
      <category term="vue" scheme="https://tuhbm.github.io/tags/vue/"/>
    
      <category term="vue.js" scheme="https://tuhbm.github.io/tags/vue-js/"/>
    
      <category term="tutorial" scheme="https://tuhbm.github.io/tags/tutorial/"/>
    
      <category term="vue-router" scheme="https://tuhbm.github.io/tags/vue-router/"/>
    
      <category term="router-link" scheme="https://tuhbm.github.io/tags/router-link/"/>
    
  </entry>
  
  <entry>
    <title>번역 - Vue 2 + Firebase 인증 시스템을 사용하여 15분 안에 Vue 앱을 만드는 방법 3편</title>
    <link href="https://tuhbm.github.io/2018/10/20/vue-firebase3/"/>
    <id>https://tuhbm.github.io/2018/10/20/vue-firebase3/</id>
    <published>2018-10-20T05:20:32.000Z</published>
    <updated>2018-11-05T12:37:30.056Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;지난 앞선 포스팅에서 &lt;a href=&quot;https://tuhbm.github.io/2018/10/20/vue-firebase1/&quot;&gt;1편&lt;/a&gt;에서는 기본 이론을 알고,&lt;br&gt;&lt;a href=&quot;https://tuhbm.github.io/2018/10/20/vue-firebase2/&quot;&gt;2편&lt;/a&gt;에선 컴포넌트를 각각 구성해보고, vue-router에 대한 이론을 알아보았습니다.&lt;br&gt;이제 vue-router를 사용해 컴포넌트간 이동을 진행해보도록 하겠습니다. &lt;/p&gt;
&lt;h2 id=&quot;스텝2-컴포넌트에서-컴포넌트의-이동&quot;&gt;&lt;a href=&quot;#스텝2-컴포넌트에서-컴포넌트의-이동&quot; class=&quot;headerlink&quot; title=&quot;스텝2 컴포넌트에서 컴포넌트의 이동&quot;&gt;&lt;/a&gt;스텝2 컴포넌트에서 컴포넌트의 이동&lt;/h2&gt;&lt;p&gt;우리가 정의한 앱 구조를 살펴보면 Login 컴포넌트에서 SignUp컴포넌트로 이동하고 두 컴포넌트에서 Hello 컴포넌트로 이동할 수 있습니다.&lt;br&gt;어떻게 해야할까요?&lt;/p&gt;
&lt;p&gt;우리는 &lt;em&gt;router-link&lt;/em&gt;라는 &lt;em&gt;vue-router&lt;/em&gt; 구성 요소를 사용할 것입니다.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;router-link&amp;gt;는 라우터를 사용하는 앱에서 사용자가 이동하기 위한 구성 요소입니다. 목표 위치는 to라는 prop으로 지정됩니다.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;기본적으로 올바른 href로 &amp;lt;a&amp;gt; 태그로 렌더링되지만 tag의 prop으로 구성할 수 있습니다.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;router-link tag=&amp;quot;li&amp;quot; to=&amp;quot;/foo&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;a&amp;gt;/foo&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/router-link&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;또한 대상 경로가 활성화되어 있으면 링크가 자동으로 활성화된 CSS 클래스를 가져옵니다.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vue-router 설명서&amp;lt;https://router.vuejs.org/en/api/router-link.html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://tuhbm.github.io/categories/Javascript/"/>
    
      <category term="Vue" scheme="https://tuhbm.github.io/categories/Javascript/Vue/"/>
    
    
      <category term="컴포넌트" scheme="https://tuhbm.github.io/tags/%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8/"/>
    
      <category term="vue" scheme="https://tuhbm.github.io/tags/vue/"/>
    
      <category term="vue.js" scheme="https://tuhbm.github.io/tags/vue-js/"/>
    
      <category term="tutorial" scheme="https://tuhbm.github.io/tags/tutorial/"/>
    
      <category term="vue-router" scheme="https://tuhbm.github.io/tags/vue-router/"/>
    
      <category term="to" scheme="https://tuhbm.github.io/tags/to/"/>
    
      <category term="compontent" scheme="https://tuhbm.github.io/tags/compontent/"/>
    
      <category term="router-link" scheme="https://tuhbm.github.io/tags/router-link/"/>
    
  </entry>
  
  <entry>
    <title>번역 - Vue 2 + Firebase 인증 시스템을 사용하여 15분 안에 Vue 앱을 만드는 방법 2편</title>
    <link href="https://tuhbm.github.io/2018/10/20/vue-firebase2/"/>
    <id>https://tuhbm.github.io/2018/10/20/vue-firebase2/</id>
    <published>2018-10-20T05:20:24.000Z</published>
    <updated>2018-11-05T12:37:30.063Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;코드-작성하기&quot;&gt;&lt;a href=&quot;#코드-작성하기&quot; class=&quot;headerlink&quot; title=&quot;코드 작성하기!&quot;&gt;&lt;/a&gt;코드 작성하기!&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://tuhbm.github.io/2018/10/20/vue-firebase1/&quot;&gt;지난 포스팅&lt;/a&gt;에서 우리는 vue에 대해 알아보고 실습을 위한 이론 및 프로젝트를 생성해 보았습니다.&lt;br&gt;이번시간에는 코드를 작성하면서 vue-router 실습을 진행해 보겠습니다.&lt;/p&gt;
&lt;h4 id=&quot;우리의-미래-App-아키텍처&quot;&gt;&lt;a href=&quot;#우리의-미래-App-아키텍처&quot; class=&quot;headerlink&quot; title=&quot;우리의 미래 App 아키텍처&quot;&gt;&lt;/a&gt;우리의 미래 App 아키텍처&lt;/h4&gt;&lt;p&gt;우리의 APP은 인증없이 접근 할 수 있는 2개의 View(로그인보기 및 가입보기)와 인증을 통해서만 접근 할 수 있는 1개의 뷰 View (Hello보기)로 총 3개의 View로 구성됩니다.&lt;br&gt;&lt;img src=&quot;https://tuhbm.github.io/images/vue-firebase/vue-firebase7.png&quot; alt=&quot;APP의 View구성&quot;&gt;&lt;/p&gt;
&lt;p&gt;로그인이 성공적으로 완료되거나 새 계정을 만든 후에는 앱의 인증 된 부분 Hello의 View로 리다이렉션됩니다.&lt;/p&gt;
&lt;h2 id=&quot;스텝1-로그인과-회원가입&quot;&gt;&lt;a href=&quot;#스텝1-로그인과-회원가입&quot; class=&quot;headerlink&quot; title=&quot;스텝1. 로그인과 회원가입&quot;&gt;&lt;/a&gt;스텝1. 로그인과 회원가입&lt;/h2&gt;&lt;h3 id=&quot;1-1-로그인-View&quot;&gt;&lt;a href=&quot;#1-1-로그인-View&quot; class=&quot;headerlink&quot; title=&quot;1-1 로그인 View&quot;&gt;&lt;/a&gt;1-1 로그인 View&lt;/h3&gt;&lt;p&gt;Login 컴포넌트를 만들어봅시다. src / components 아래에 Login이라는 새로운 Vue 구성 요소를 만듭니다.&lt;/p&gt;
&lt;p&gt;일단 컴포넌트는 단순히 제목, 두 개의 input 필드, 버튼 그리고 간단한 문장으로 구성됩니다.&lt;br&gt;&lt;img src=&quot;https://tuhbm.github.io/images/vue-firebase/vue-firebase8.png&quot; alt=&quot;Login 컴포넌트&quot;&gt;&lt;/p&gt;
&lt;p&gt;이제 컴포넌트가 생성되었습니다! 하지만이 새로운 컴포넌트를 우리 앱에 어떻게 보여 줄 수 있을까요?&lt;br&gt;음… 우리는 vue-router를 사용할것입니다. 기억하시나요? 우리는 Vue-cli로 앱을 초기 구성할때 이미 vue-router를 설치했습니다.&lt;br&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://tuhbm.github.io/categories/Javascript/"/>
    
      <category term="Vue" scheme="https://tuhbm.github.io/categories/Javascript/Vue/"/>
    
    
      <category term="컴포넌트" scheme="https://tuhbm.github.io/tags/%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8/"/>
    
      <category term="vue" scheme="https://tuhbm.github.io/tags/vue/"/>
    
      <category term="vue.js" scheme="https://tuhbm.github.io/tags/vue-js/"/>
    
      <category term="tutorial" scheme="https://tuhbm.github.io/tags/tutorial/"/>
    
      <category term="vue-router" scheme="https://tuhbm.github.io/tags/vue-router/"/>
    
      <category term="history mode" scheme="https://tuhbm.github.io/tags/history-mode/"/>
    
      <category term="to" scheme="https://tuhbm.github.io/tags/to/"/>
    
      <category term="compontent" scheme="https://tuhbm.github.io/tags/compontent/"/>
    
  </entry>
  
  <entry>
    <title>번역 - Vue 2 + Firebase 인증 시스템을 사용하여 15분 안에 Vue 앱을 만드는 방법 1편</title>
    <link href="https://tuhbm.github.io/2018/10/20/vue-firebase1/"/>
    <id>https://tuhbm.github.io/2018/10/20/vue-firebase1/</id>
    <published>2018-10-20T03:56:34.000Z</published>
    <updated>2018-11-05T12:37:30.061Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vue-2-Firebase-Firebase-인증-시스템을-사용하여-15분-안에-Vue-앱을-만드는-방법-2편&quot;&gt;&lt;a href=&quot;#Vue-2-Firebase-Firebase-인증-시스템을-사용하여-15분-안에-Vue-앱을-만드는-방법-2편&quot; class=&quot;headerlink&quot; title=&quot;Vue 2 + Firebase: Firebase 인증 시스템을 사용하여 15분 안에 Vue 앱을 만드는 방법 2편&quot;&gt;&lt;/a&gt;Vue 2 + Firebase: Firebase 인증 시스템을 사용하여 15분 안에 Vue 앱을 만드는 방법 2편&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://tuhbm.github.io/images/vue-firebase/vue-firebase1.png&quot; alt=&quot;Vue &amp;amp; Firebase&quot;&gt;&lt;/p&gt;
&lt;p&gt;이 튜토리얼에서는 Vue 2, vue-router 사용 그리고 Firebase의 인증 시스템을 사용하여,&lt;br&gt;웹 어플리케이션을 신속하게 구축하는 방법을 알아봅니다.&lt;/p&gt;
&lt;h2 id=&quot;Vue-js란-무엇인가&quot;&gt;&lt;a href=&quot;#Vue-js란-무엇인가&quot; class=&quot;headerlink&quot; title=&quot;Vue.js란 무엇인가?&quot;&gt;&lt;/a&gt;Vue.js란 무엇인가?&lt;/h2&gt;&lt;p&gt;다음은 놀랍고 가벼운 Javascript 프레임워크인 Vue.js의 개요입니다.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Vue는 사용자 인터페이스 구축을 위한 진보적인 프레임워크입니다. Vue는 타 다른 프레임 워크와 다르게 점진적으로 채택 가능하도록 설계되었습니다. 핵심 라이브러리는 &amp;apos;View&amp;apos; 단에만 초점을 맞추고 있으며, 다른 라이브러리 또는 기존 프로젝트와 통합하기가 매우 쉽습니다.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vuejs 공식 문서: &amp;lt;https://vuejs.org/v2/guide&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://tuhbm.github.io/categories/Javascript/"/>
    
      <category term="Vue" scheme="https://tuhbm.github.io/categories/Javascript/Vue/"/>
    
    
      <category term="vue" scheme="https://tuhbm.github.io/tags/vue/"/>
    
      <category term="vue.js" scheme="https://tuhbm.github.io/tags/vue-js/"/>
    
      <category term="tutorial" scheme="https://tuhbm.github.io/tags/tutorial/"/>
    
      <category term="Vue.component" scheme="https://tuhbm.github.io/tags/Vue-component/"/>
    
      <category term="vue-cli" scheme="https://tuhbm.github.io/tags/vue-cli/"/>
    
      <category term="vue init" scheme="https://tuhbm.github.io/tags/vue-init/"/>
    
      <category term="vue-cli 3.0" scheme="https://tuhbm.github.io/tags/vue-cli-3-0/"/>
    
      <category term="vue create" scheme="https://tuhbm.github.io/tags/vue-create/"/>
    
      <category term="npm install" scheme="https://tuhbm.github.io/tags/npm-install/"/>
    
      <category term="npm run dev" scheme="https://tuhbm.github.io/tags/npm-run-dev/"/>
    
  </entry>
  
  <entry>
    <title>SEO(Search Engine Optimization) 검색 엔진 최적화</title>
    <link href="https://tuhbm.github.io/2018/09/29/seo/"/>
    <id>https://tuhbm.github.io/2018/09/29/seo/</id>
    <published>2018-09-29T09:32:59.000Z</published>
    <updated>2018-10-20T04:10:21.129Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://tuhbm.github.io/images/seo.jpg&quot; alt=&quot;SEO&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;SEO의-중요성&quot;&gt;&lt;a href=&quot;#SEO의-중요성&quot; class=&quot;headerlink&quot; title=&quot;SEO의 중요성&quot;&gt;&lt;/a&gt;SEO의 중요성&lt;/h1&gt;&lt;p&gt;비지니스 측면에 있어서 검색순위 상위권에 노출되는 것은 매우 중요한 부분입니다.&lt;br&gt;검색시 페이지 이동을 해야 검색이 된다면, 그만큼 유저들이 이전페이지들에서 원하는 결과를 얻어 해당 웹사이트에 접속할 확률이 낮습니다.&lt;br&gt;물론 입소문이 타서 자연스럽게 해당 검색어를 정확하게 입력한다면 유저의 유입확률이 높을 것이지만, 그렇지 못한 경우가 많습니다.&lt;br&gt;노출의 효과는 광고를 보면 알 수 있습니다. 자주 보는 광고를 통해 유저에게 특정 비지니스 상품을 홍보하고 그로인해 수익이 됩니다.&lt;br&gt;검색 엔진 최적화도 마찬가지의 효과입니다.&lt;br&gt;그러므로 비지니스 측면에서 검색 엔진 최적화는 매우 중요합니다.&lt;br&gt;스타트업 또는 신제품의 경우 더더욱 중요합니다.&lt;/p&gt;
    
    </summary>
    
      <category term="HTML" scheme="https://tuhbm.github.io/categories/HTML/"/>
    
    
      <category term="html" scheme="https://tuhbm.github.io/tags/html/"/>
    
      <category term="seo" scheme="https://tuhbm.github.io/tags/seo/"/>
    
      <category term="search" scheme="https://tuhbm.github.io/tags/search/"/>
    
      <category term="engine" scheme="https://tuhbm.github.io/tags/engine/"/>
    
      <category term="optimization" scheme="https://tuhbm.github.io/tags/optimization/"/>
    
      <category term="검색최적화" scheme="https://tuhbm.github.io/tags/%EA%B2%80%EC%83%89%EC%B5%9C%EC%A0%81%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>자료정렬</title>
    <link href="https://tuhbm.github.io/2018/09/03/arrayAlign/"/>
    <id>https://tuhbm.github.io/2018/09/03/arrayAlign/</id>
    <published>2018-09-03T13:20:41.162Z</published>
    <updated>2018-09-03T13:20:41.162Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;용어정리&quot;&gt;&lt;a href=&quot;#용어정리&quot; class=&quot;headerlink&quot; title=&quot;용어정리&quot;&gt;&lt;/a&gt;용어정리&lt;/h2&gt;&lt;p&gt;이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.&lt;br&gt;제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.&lt;br&gt;오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://tuhbm.github.io/images/terms/align1.jpg&quot; alt=&quot;정렬&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;정렬&quot;&gt;&lt;a href=&quot;#정렬&quot; class=&quot;headerlink&quot; title=&quot;정렬&quot;&gt;&lt;/a&gt;정렬&lt;/h1&gt;&lt;p&gt;지난시간에 &lt;a href=&quot;https://tuhbm.github.io/2018/08/20/algorithm/&quot;&gt;알고리즘&lt;/a&gt;에 대해 알아보았습니다.&lt;br&gt;알고리즘을 요약하자면, &lt;em&gt;어떠한 명령어들을 처리하는 과정&lt;/em&gt;이라고 하였습니다.&lt;/p&gt;
&lt;p&gt;이러한 과정을 함에 있어서 &lt;strong&gt;효율적이고 좋은 성능&lt;/strong&gt;을 통해 개발을 하는 것이 좋은 알고리즘이라고 했었습니다.&lt;br&gt;
    
    </summary>
    
      <category term="용어정리" scheme="https://tuhbm.github.io/categories/%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC/"/>
    
    
      <category term="효율성" scheme="https://tuhbm.github.io/tags/%ED%9A%A8%EC%9C%A8%EC%84%B1/"/>
    
      <category term="algorithm" scheme="https://tuhbm.github.io/tags/algorithm/"/>
    
      <category term="알고리즘" scheme="https://tuhbm.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="개발" scheme="https://tuhbm.github.io/tags/%EA%B0%9C%EB%B0%9C/"/>
    
  </entry>
  
  <entry>
    <title>알고리즘</title>
    <link href="https://tuhbm.github.io/2018/08/20/algorithm/"/>
    <id>https://tuhbm.github.io/2018/08/20/algorithm/</id>
    <published>2018-08-20T13:47:40.000Z</published>
    <updated>2018-08-20T14:01:37.861Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;용어정리&quot;&gt;&lt;a href=&quot;#용어정리&quot; class=&quot;headerlink&quot; title=&quot;용어정리&quot;&gt;&lt;/a&gt;용어정리&lt;/h2&gt;&lt;p&gt;이 카테고리는 비전공자로서 개발자로써 공부하며, 평소 이해하지 못한 단어를 제방식대로 정리하는 카테고리입니다.&lt;br&gt;제방식대로 풀어 쓴것이므로 오류가 있을 수 있습니다.&lt;br&gt;오류가 있을시 댓글로 남겨주시면 참고하도록 하겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://tuhbm.github.io/images/terms/algorithm1.png&quot; alt=&quot;알고리즘&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;알고리즘&quot;&gt;&lt;a href=&quot;#알고리즘&quot; class=&quot;headerlink&quot; title=&quot;알고리즘&quot;&gt;&lt;/a&gt;알고리즘&lt;/h1&gt;&lt;h2 id=&quot;알고리즘이란&quot;&gt;&lt;a href=&quot;#알고리즘이란&quot; class=&quot;headerlink&quot; title=&quot;알고리즘이란?&quot;&gt;&lt;/a&gt;알고리즘이란?&lt;/h2&gt;&lt;p&gt;명령어들의 순서상 &lt;strong&gt;처리과정&lt;/strong&gt;을 말합니다.&lt;br&gt;예를들어 우리가 학교에 등교할때도 잠에서 깨고, 아침을 먹고, 양치를 하고, 씻고, 교복을 입고, 학교에 도착하기까지의 순서상 처리하는 과정이 있습니다.&lt;br&gt;이들을 순서상 나열해놓은 것을 알고리즘이라고 합니다.&lt;/p&gt;
    
    </summary>
    
      <category term="용어정리" scheme="https://tuhbm.github.io/categories/%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC/"/>
    
    
      <category term="효율성" scheme="https://tuhbm.github.io/tags/%ED%9A%A8%EC%9C%A8%EC%84%B1/"/>
    
      <category term="algorithm" scheme="https://tuhbm.github.io/tags/algorithm/"/>
    
      <category term="알고리즘" scheme="https://tuhbm.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="개발" scheme="https://tuhbm.github.io/tags/%EA%B0%9C%EB%B0%9C/"/>
    
  </entry>
  
  <entry>
    <title>java 유효범위(scope)</title>
    <link href="https://tuhbm.github.io/2018/06/24/javaScope/"/>
    <id>https://tuhbm.github.io/2018/06/24/javaScope/</id>
    <published>2018-06-24T12:08:55.000Z</published>
    <updated>2018-06-24T12:20:02.090Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JAVA&quot;&gt;&lt;a href=&quot;#JAVA&quot; class=&quot;headerlink&quot; title=&quot;JAVA&quot;&gt;&lt;/a&gt;JAVA&lt;/h2&gt;&lt;p&gt;이 카테고리는 자바를 공부 하며, 익힌 내용을 기록합니다.&lt;br&gt;책을 보며, 또는 독학을 하므로 &lt;code&gt;잘못된 내용이 있으면 댓글 또는 메일주시면 신속히 오류처리하겠습니다.&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;유효범위-scope&quot;&gt;&lt;a href=&quot;#유효범위-scope&quot; class=&quot;headerlink&quot; title=&quot;유효범위(scope)&quot;&gt;&lt;/a&gt;유효범위(scope)&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://tuhbm.github.io/images/java/img_scope.jpg&quot; alt=&quot;Scope&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;이론&quot;&gt;&lt;a href=&quot;#이론&quot; class=&quot;headerlink&quot; title=&quot;이론&quot;&gt;&lt;/a&gt;이론&lt;/h2&gt;&lt;p&gt;우리는 보통 여러명의 개발자들과 협업을 하며 개발을 진행합니다.&lt;br&gt;그렇기에 어떠한 것을 명명할때, 같은 이름으로 충돌이 발생 할 수 있습니다.&lt;br&gt;예를들어,&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JAVA" scheme="https://tuhbm.github.io/categories/JAVA/"/>
    
    
      <category term="java" scheme="https://tuhbm.github.io/tags/java/"/>
    
      <category term="oop" scheme="https://tuhbm.github.io/tags/oop/"/>
    
      <category term="객체지향" scheme="https://tuhbm.github.io/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/"/>
    
      <category term="메소드" scheme="https://tuhbm.github.io/tags/%EB%A9%94%EC%86%8C%EB%93%9C/"/>
    
      <category term="클래스" scheme="https://tuhbm.github.io/tags/%ED%81%B4%EB%9E%98%EC%8A%A4/"/>
    
      <category term="멤버변수" scheme="https://tuhbm.github.io/tags/%EB%A9%A4%EB%B2%84%EB%B3%80%EC%88%98/"/>
    
      <category term="유효범위" scheme="https://tuhbm.github.io/tags/%EC%9C%A0%ED%9A%A8%EB%B2%94%EC%9C%84/"/>
    
      <category term="스코프" scheme="https://tuhbm.github.io/tags/%EC%8A%A4%EC%BD%94%ED%94%84/"/>
    
      <category term="scope" scheme="https://tuhbm.github.io/tags/scope/"/>
    
      <category term="this" scheme="https://tuhbm.github.io/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>객체지향 언어 자바 이론</title>
    <link href="https://tuhbm.github.io/2018/06/21/javaObjectOriented/"/>
    <id>https://tuhbm.github.io/2018/06/21/javaObjectOriented/</id>
    <published>2018-06-21T13:33:33.000Z</published>
    <updated>2018-06-21T13:53:26.703Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JAVA&quot;&gt;&lt;a href=&quot;#JAVA&quot; class=&quot;headerlink&quot; title=&quot;JAVA&quot;&gt;&lt;/a&gt;JAVA&lt;/h2&gt;&lt;p&gt;이 카테고리는 자바를 공부 하며, 익힌 내용을 기록합니다.&lt;br&gt;책을 보며, 또는 독학을 하므로 &lt;code&gt;잘못된 내용이 있으면 댓글 또는 메일주시면 신속히 오류처리하겠습니다.&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;객체지향&quot;&gt;&lt;a href=&quot;#객체지향&quot; class=&quot;headerlink&quot; title=&quot;객체지향&quot;&gt;&lt;/a&gt;객체지향&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://tuhbm.github.io/images/java/img_oop.png&quot; alt=&quot;OOP&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;이론&quot;&gt;&lt;a href=&quot;#이론&quot; class=&quot;headerlink&quot; title=&quot;이론&quot;&gt;&lt;/a&gt;이론&lt;/h2&gt;&lt;p&gt;하나의 결과물을 만들때, 필요한부분을 각각 개발하여, 하나로 사용하고, 또 필요한부분을 가져가 쓰는 방법이 객체지향프로그래밍입니다.&lt;/p&gt;
&lt;p&gt;예를 들어보겠습니다.&lt;br&gt;초창기 컴퓨터는 하나의 기계였습니다..&lt;br&gt;그림으로 살펴보겠습니다..&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="https://tuhbm.github.io/categories/JAVA/"/>
    
    
      <category term="java" scheme="https://tuhbm.github.io/tags/java/"/>
    
      <category term="oop" scheme="https://tuhbm.github.io/tags/oop/"/>
    
      <category term="객체지향" scheme="https://tuhbm.github.io/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/"/>
    
      <category term="메소드" scheme="https://tuhbm.github.io/tags/%EB%A9%94%EC%86%8C%EB%93%9C/"/>
    
      <category term="클래스" scheme="https://tuhbm.github.io/tags/%ED%81%B4%EB%9E%98%EC%8A%A4/"/>
    
      <category term="멤버변수" scheme="https://tuhbm.github.io/tags/%EB%A9%A4%EB%B2%84%EB%B3%80%EC%88%98/"/>
    
      <category term="은닉화" scheme="https://tuhbm.github.io/tags/%EC%9D%80%EB%8B%89%ED%99%94/"/>
    
      <category term="캡슐화" scheme="https://tuhbm.github.io/tags/%EC%BA%A1%EC%8A%90%ED%99%94/"/>
    
      <category term="인터페이스" scheme="https://tuhbm.github.io/tags/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>Java Data Type</title>
    <link href="https://tuhbm.github.io/2018/06/14/javaDataType/"/>
    <id>https://tuhbm.github.io/2018/06/14/javaDataType/</id>
    <published>2018-06-14T12:27:36.000Z</published>
    <updated>2018-06-21T14:01:13.529Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JAVA&quot;&gt;&lt;a href=&quot;#JAVA&quot; class=&quot;headerlink&quot; title=&quot;JAVA&quot;&gt;&lt;/a&gt;JAVA&lt;/h2&gt;&lt;p&gt;이 카테고리는 자바를 공부 하며, 익힌 내용을 기록합니다.&lt;br&gt;책을 보며, 또는 독학을 하므로 &lt;code&gt;잘못된 내용이 있으면 댓글 또는 메일주시면 신속히 오류처리하겠습니다.&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;데이터-타입&quot;&gt;&lt;a href=&quot;#데이터-타입&quot; class=&quot;headerlink&quot; title=&quot;데이터 타입&quot;&gt;&lt;/a&gt;데이터 타입&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://tuhbm.github.io/images/java/img_data.jpg&quot; alt=&quot;data&quot;&gt;&lt;br&gt;프로그래밍에서 데이터는 데이터형식, 메모리의 소비크기, 표현가능범위에 따라 알맞게 사용해야합니다.&lt;br&gt;그 내용은 데이터의 형식을 알아보면서 알아보겠습니다.&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="https://tuhbm.github.io/categories/JAVA/"/>
    
    
      <category term="java" scheme="https://tuhbm.github.io/tags/java/"/>
    
      <category term="oop" scheme="https://tuhbm.github.io/tags/oop/"/>
    
      <category term="객체지향" scheme="https://tuhbm.github.io/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/"/>
    
      <category term="데이터타입" scheme="https://tuhbm.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%83%80%EC%9E%85/"/>
    
      <category term="byte" scheme="https://tuhbm.github.io/tags/byte/"/>
    
      <category term="숫자" scheme="https://tuhbm.github.io/tags/%EC%88%AB%EC%9E%90/"/>
    
      <category term="정수" scheme="https://tuhbm.github.io/tags/%EC%A0%95%EC%88%98/"/>
    
      <category term="실수" scheme="https://tuhbm.github.io/tags/%EC%8B%A4%EC%88%98/"/>
    
      <category term="문자" scheme="https://tuhbm.github.io/tags/%EB%AC%B8%EC%9E%90/"/>
    
      <category term="문자열" scheme="https://tuhbm.github.io/tags/%EB%AC%B8%EC%9E%90%EC%97%B4/"/>
    
      <category term="long" scheme="https://tuhbm.github.io/tags/long/"/>
    
      <category term="float" scheme="https://tuhbm.github.io/tags/float/"/>
    
      <category term="암시적형변화" scheme="https://tuhbm.github.io/tags/%EC%95%94%EC%8B%9C%EC%A0%81%ED%98%95%EB%B3%80%ED%99%94/"/>
    
      <category term="명시적형변화" scheme="https://tuhbm.github.io/tags/%EB%AA%85%EC%8B%9C%EC%A0%81%ED%98%95%EB%B3%80%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>Java 숫자와 문자</title>
    <link href="https://tuhbm.github.io/2018/06/13/javaNumberText/"/>
    <id>https://tuhbm.github.io/2018/06/13/javaNumberText/</id>
    <published>2018-06-13T11:29:10.000Z</published>
    <updated>2018-06-21T13:53:52.645Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JAVA&quot;&gt;&lt;a href=&quot;#JAVA&quot; class=&quot;headerlink&quot; title=&quot;JAVA&quot;&gt;&lt;/a&gt;JAVA&lt;/h2&gt;&lt;p&gt;이 카테고리는 자바를 공부 하며, 익힌 내용을 기록합니다.&lt;br&gt;책을 보며, 또는 독학을 하므로 &lt;code&gt;잘못된 내용이 있으면 댓글 또는 메일주시면 신속히 오류처리하겠습니다.&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;자바-JAVA-숫자와-문자&quot;&gt;&lt;a href=&quot;#자바-JAVA-숫자와-문자&quot; class=&quot;headerlink&quot; title=&quot;자바(JAVA) 숫자와 문자&quot;&gt;&lt;/a&gt;자바(JAVA) 숫자와 문자&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://tuhbm.github.io/images/java/img_dataType.png&quot; alt=&quot;text&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;System-out&quot;&gt;&lt;a href=&quot;#System-out&quot; class=&quot;headerlink&quot; title=&quot;System.out&quot;&gt;&lt;/a&gt;System.out&lt;/h2&gt;&lt;p&gt;숫자와 문자를 접하기전에 우리는 결과물을 확인 할 방법을 먼저 알아보겠습니다.&lt;br&gt;자바는 웹브라우저가 아닌 &lt;strong&gt;JVM&lt;/strong&gt;을 이용해 실행합니다. CMD나 터미널등을 통해서도 코드작성이 가능하지만, &lt;strong&gt;IDE(Integrated development environment)&lt;/strong&gt;를 통해 편하게 개발을 할 수 있습니다.&lt;br&gt;IDE에는 여러가지가 있겠지만, 저는 jetbrain사의 &lt;a href=&quot;https://www.jetbrains.com/idea/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;intellij&lt;/a&gt;를 사용하고 있습니다.&lt;br&gt;개발시 각자 본인에 맞는 IDE를 찾아보시길 권장합니다.&lt;br&gt;IDE에서는 Run기능을 통해 실행하여 작성한 코드의 컴파일 결과를 확인 할 수 있습니다.&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="https://tuhbm.github.io/categories/JAVA/"/>
    
    
      <category term="java" scheme="https://tuhbm.github.io/tags/java/"/>
    
      <category term="oop" scheme="https://tuhbm.github.io/tags/oop/"/>
    
      <category term="객체지향" scheme="https://tuhbm.github.io/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/"/>
    
      <category term="문자열" scheme="https://tuhbm.github.io/tags/%EB%AC%B8%EC%9E%90%EC%97%B4/"/>
    
      <category term="System.out" scheme="https://tuhbm.github.io/tags/System-out/"/>
    
      <category term="console" scheme="https://tuhbm.github.io/tags/console/"/>
    
      <category term="세미콜론" scheme="https://tuhbm.github.io/tags/%EC%84%B8%EB%AF%B8%EC%BD%9C%EB%A1%A0/"/>
    
      <category term="큰따옴표" scheme="https://tuhbm.github.io/tags/%ED%81%B0%EB%94%B0%EC%98%B4%ED%91%9C/"/>
    
      <category term="작은따옴표" scheme="https://tuhbm.github.io/tags/%EC%9E%91%EC%9D%80%EB%94%B0%EC%98%B4%ED%91%9C/"/>
    
  </entry>
  
</feed>
